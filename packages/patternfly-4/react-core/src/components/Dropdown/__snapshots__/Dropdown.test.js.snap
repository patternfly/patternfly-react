// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KebabToggle basic 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={Array []}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  onSelect={[Function]}
  position="left"
  toggle={
    <Kebab
      aria-label="Actions"
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    />
  }
>
  <div
    className="pf-c-dropdown pf-m-expanded"
  >
    <Kebab
      aria-label="Actions"
      ariaHasPopup={null}
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        aria-label="Actions"
        ariaHasPopup={null}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={true}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={true}
          aria-haspopup={null}
          aria-label="Actions"
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <EllipsisVIcon
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 192 512"
              width="1em"
            >
              <path
                d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                transform=""
              />
            </svg>
          </EllipsisVIcon>
        </button>
      </Toggle>
    </Kebab>
    <DropdownMenu
      aria-labelledby="Dropdown Toggle"
      className=""
      component="div"
      isGrouped={false}
      isOpen={true}
      openedOnEnter={false}
      position="left"
    >
      <ul
        className="pf-c-dropdown__menu"
        hidden={false}
        onClick={[Function]}
      >
        <div
          aria-labelledby="Dropdown Toggle"
        >
          <div
            className="pf-c-dropdown__menu-item"
            key=".0"
            onKeyDown={[Function]}
            tabIndex={-1}
          >
            BASIC
          </div>
        </div>
      </ul>
    </DropdownMenu>
  </div>
</Dropdown>
`;

exports[`KebabToggle dropup + right aligned 1`] = `
<Dropdown
  className=""
  direction="up"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  onSelect={[Function]}
  position="right"
  toggle={
    <Kebab
      aria-label="Actions"
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    />
  }
>
  <div
    className="pf-c-dropdown pf-m-top"
  >
    <Kebab
      aria-label="Actions"
      ariaHasPopup={true}
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          aria-label="Actions"
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <EllipsisVIcon
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 192 512"
              width="1em"
            >
              <path
                d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                transform=""
              />
            </svg>
          </EllipsisVIcon>
        </button>
      </Toggle>
    </Kebab>
  </div>
</Dropdown>
`;

exports[`KebabToggle dropup 1`] = `
<Dropdown
  className=""
  direction="up"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  onSelect={[Function]}
  position="left"
  toggle={
    <Kebab
      aria-label="Actions"
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    />
  }
>
  <div
    className="pf-c-dropdown pf-m-top"
  >
    <Kebab
      aria-label="Actions"
      ariaHasPopup={true}
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          aria-label="Actions"
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <EllipsisVIcon
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 192 512"
              width="1em"
            >
              <path
                d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                transform=""
              />
            </svg>
          </EllipsisVIcon>
        </button>
      </Toggle>
    </Kebab>
  </div>
</Dropdown>
`;

exports[`KebabToggle expanded 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  onSelect={[Function]}
  position="left"
  toggle={
    <Kebab
      aria-label="Actions"
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    />
  }
>
  <div
    className="pf-c-dropdown pf-m-expanded"
  >
    <Kebab
      aria-label="Actions"
      ariaHasPopup={true}
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={true}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={true}
          aria-haspopup={true}
          aria-label="Actions"
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <EllipsisVIcon
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 192 512"
              width="1em"
            >
              <path
                d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                transform=""
              />
            </svg>
          </EllipsisVIcon>
        </button>
      </Toggle>
    </Kebab>
    <DropdownMenu
      aria-labelledby="Dropdown Toggle"
      className=""
      component="ul"
      isGrouped={false}
      isOpen={true}
      openedOnEnter={false}
      position="left"
    >
      <ul
        aria-labelledby="Dropdown Toggle"
        className="pf-c-dropdown__menu"
        hidden={false}
        role="menu"
      >
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={0}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          key=".$link"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <a
              aria-disabled={false}
              className="pf-c-dropdown__menu-item"
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
            >
              Link
            </a>
          </li>
        </DropdownItem>
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          key=".$action"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <button
              className="pf-c-dropdown__menu-item"
              disabled={false}
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
              type="button"
            >
              Action
            </button>
          </li>
        </DropdownItem>
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={2}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          key=".$disabled link"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <a
              aria-disabled={true}
              className="pf-c-dropdown__menu-item pf-m-disabled"
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
              tabIndex={-1}
            >
              Disabled Link
            </a>
          </li>
        </DropdownItem>
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={3}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          key=".$disabled action"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <button
              className="pf-c-dropdown__menu-item pf-m-disabled"
              disabled={true}
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
              type="button"
            >
              Disabled Action
            </button>
          </li>
        </DropdownItem>
        <Separator
          className=""
          component="a"
          href="#"
          index={4}
          isDisabled={false}
          isHovered={false}
          key=".$separator"
        >
          <DropdownItem
            className="pf-c-dropdown__separator"
            component="div"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            href="#"
            index={4}
            isAppLauncher={false}
            isDisabled={false}
            isHovered={false}
            onClick={[Function]}
            role="separator"
          >
            <li
              role="none"
            >
              <div
                className="pf-c-dropdown__separator"
                href="#"
                onClick={[Function]}
                onKeyDown={[Function]}
                role="separator"
              />
            </li>
          </DropdownItem>
        </Separator>
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={5}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          key=".$separated link"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <a
              aria-disabled={false}
              className="pf-c-dropdown__menu-item"
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
            >
              Separated Link
            </a>
          </li>
        </DropdownItem>
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={6}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          key=".$separated action"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <button
              className="pf-c-dropdown__menu-item"
              disabled={false}
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
              type="button"
            >
              Separated Action
            </button>
          </li>
        </DropdownItem>
      </ul>
    </DropdownMenu>
  </div>
</Dropdown>
`;

exports[`KebabToggle plain 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={true}
  onSelect={[Function]}
  position="left"
  toggle={
    <Kebab
      aria-label="Actions"
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    />
  }
>
  <div
    className="pf-c-dropdown"
  >
    <Kebab
      aria-label="Actions"
      ariaHasPopup={true}
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={true}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={true}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          aria-label="Actions"
          className="pf-c-dropdown__toggle pf-m-plain"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <EllipsisVIcon
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 192 512"
              width="1em"
            >
              <path
                d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                transform=""
              />
            </svg>
          </EllipsisVIcon>
        </button>
      </Toggle>
    </Kebab>
  </div>
</Dropdown>
`;

exports[`KebabToggle regular 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  onSelect={[Function]}
  position="left"
  toggle={
    <Kebab
      aria-label="Actions"
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    />
  }
>
  <div
    className="pf-c-dropdown"
  >
    <Kebab
      aria-label="Actions"
      ariaHasPopup={true}
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          aria-label="Actions"
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <EllipsisVIcon
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 192 512"
              width="1em"
            >
              <path
                d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                transform=""
              />
            </svg>
          </EllipsisVIcon>
        </button>
      </Toggle>
    </Kebab>
  </div>
</Dropdown>
`;

exports[`KebabToggle right aligned 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  onSelect={[Function]}
  position="right"
  toggle={
    <Kebab
      aria-label="Actions"
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    />
  }
>
  <div
    className="pf-c-dropdown"
  >
    <Kebab
      aria-label="Actions"
      ariaHasPopup={true}
      className=""
      id="Dropdown Toggle"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          aria-label="Actions"
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <EllipsisVIcon
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 192 512"
              width="1em"
            >
              <path
                d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                transform=""
              />
            </svg>
          </EllipsisVIcon>
        </button>
      </Toggle>
    </Kebab>
  </div>
</Dropdown>
`;

exports[`dropdown basic 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={Array []}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  onSelect={[Function]}
  position="left"
  toggle={
    <DropdownToggle
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    >
      Dropdown
    </DropdownToggle>
  }
>
  <div
    className="pf-c-dropdown pf-m-expanded"
  >
    <DropdownToggle
      ariaHasPopup={null}
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        ariaHasPopup={null}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={true}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={true}
          aria-haspopup={null}
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <span
            className="pf-c-dropdown__toggle-text"
          >
            Dropdown
          </span>
          <CaretDownIcon
            className="pf-c-dropdown__toggle-icon"
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-dropdown__toggle-icon"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </CaretDownIcon>
        </button>
      </Toggle>
    </DropdownToggle>
    <DropdownMenu
      aria-labelledby="Dropdown Toggle"
      className=""
      component="div"
      isGrouped={false}
      isOpen={true}
      openedOnEnter={false}
      position="left"
    >
      <ul
        className="pf-c-dropdown__menu"
        hidden={false}
        onClick={[Function]}
      >
        <div
          aria-labelledby="Dropdown Toggle"
        >
          <div
            className="pf-c-dropdown__menu-item"
            key=".0"
            onKeyDown={[Function]}
            tabIndex={-1}
          >
            BASIC
          </div>
        </div>
      </ul>
    </DropdownMenu>
  </div>
</Dropdown>
`;

exports[`dropdown dropup + right aligned 1`] = `
<Dropdown
  className=""
  direction="up"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  onSelect={[Function]}
  position="right"
  toggle={
    <DropdownToggle
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    >
      Dropdown
    </DropdownToggle>
  }
>
  <div
    className="pf-c-dropdown pf-m-top"
  >
    <DropdownToggle
      ariaHasPopup={true}
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <span
            className="pf-c-dropdown__toggle-text"
          >
            Dropdown
          </span>
          <CaretDownIcon
            className="pf-c-dropdown__toggle-icon"
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-dropdown__toggle-icon"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </CaretDownIcon>
        </button>
      </Toggle>
    </DropdownToggle>
  </div>
</Dropdown>
`;

exports[`dropdown dropup 1`] = `
<Dropdown
  className=""
  direction="up"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  onSelect={[Function]}
  position="left"
  toggle={
    <DropdownToggle
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    >
      Dropdown
    </DropdownToggle>
  }
>
  <div
    className="pf-c-dropdown pf-m-top"
  >
    <DropdownToggle
      ariaHasPopup={true}
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <span
            className="pf-c-dropdown__toggle-text"
          >
            Dropdown
          </span>
          <CaretDownIcon
            className="pf-c-dropdown__toggle-icon"
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-dropdown__toggle-icon"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </CaretDownIcon>
        </button>
      </Toggle>
    </DropdownToggle>
  </div>
</Dropdown>
`;

exports[`dropdown expanded 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  onSelect={[Function]}
  position="left"
  toggle={
    <DropdownToggle
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    >
      Dropdown
    </DropdownToggle>
  }
>
  <div
    className="pf-c-dropdown pf-m-expanded"
  >
    <DropdownToggle
      ariaHasPopup={true}
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={true}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={true}
          aria-haspopup={true}
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <span
            className="pf-c-dropdown__toggle-text"
          >
            Dropdown
          </span>
          <CaretDownIcon
            className="pf-c-dropdown__toggle-icon"
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-dropdown__toggle-icon"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </CaretDownIcon>
        </button>
      </Toggle>
    </DropdownToggle>
    <DropdownMenu
      aria-labelledby="Dropdown Toggle"
      className=""
      component="ul"
      isGrouped={false}
      isOpen={true}
      openedOnEnter={false}
      position="left"
    >
      <ul
        aria-labelledby="Dropdown Toggle"
        className="pf-c-dropdown__menu"
        hidden={false}
        role="menu"
      >
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={0}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          key=".$link"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <a
              aria-disabled={false}
              className="pf-c-dropdown__menu-item"
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
            >
              Link
            </a>
          </li>
        </DropdownItem>
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          key=".$action"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <button
              className="pf-c-dropdown__menu-item"
              disabled={false}
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
              type="button"
            >
              Action
            </button>
          </li>
        </DropdownItem>
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={2}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          key=".$disabled link"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <a
              aria-disabled={true}
              className="pf-c-dropdown__menu-item pf-m-disabled"
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
              tabIndex={-1}
            >
              Disabled Link
            </a>
          </li>
        </DropdownItem>
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={3}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          key=".$disabled action"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <button
              className="pf-c-dropdown__menu-item pf-m-disabled"
              disabled={true}
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
              type="button"
            >
              Disabled Action
            </button>
          </li>
        </DropdownItem>
        <Separator
          className=""
          component="a"
          href="#"
          index={4}
          isDisabled={false}
          isHovered={false}
          key=".$separator"
        >
          <DropdownItem
            className="pf-c-dropdown__separator"
            component="div"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            href="#"
            index={4}
            isAppLauncher={false}
            isDisabled={false}
            isHovered={false}
            onClick={[Function]}
            role="separator"
          >
            <li
              role="none"
            >
              <div
                className="pf-c-dropdown__separator"
                href="#"
                onClick={[Function]}
                onKeyDown={[Function]}
                role="separator"
              />
            </li>
          </DropdownItem>
        </Separator>
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={5}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          key=".$separated link"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <a
              aria-disabled={false}
              className="pf-c-dropdown__menu-item"
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
            >
              Separated Link
            </a>
          </li>
        </DropdownItem>
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={6}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          key=".$separated action"
          onClick={[Function]}
          role={null}
        >
          <li
            role="none"
          >
            <button
              className="pf-c-dropdown__menu-item"
              disabled={false}
              href="#"
              onClick={[Function]}
              onKeyDown={[Function]}
              role={null}
              type="button"
            >
              Separated Action
            </button>
          </li>
        </DropdownItem>
      </ul>
    </DropdownMenu>
  </div>
</Dropdown>
`;

exports[`dropdown regular 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  onSelect={[Function]}
  position="left"
  toggle={
    <DropdownToggle
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    >
      Dropdown
    </DropdownToggle>
  }
>
  <div
    className="pf-c-dropdown"
  >
    <DropdownToggle
      ariaHasPopup={true}
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <span
            className="pf-c-dropdown__toggle-text"
          >
            Dropdown
          </span>
          <CaretDownIcon
            className="pf-c-dropdown__toggle-icon"
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-dropdown__toggle-icon"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </CaretDownIcon>
        </button>
      </Toggle>
    </DropdownToggle>
  </div>
</Dropdown>
`;

exports[`dropdown right aligned 1`] = `
<Dropdown
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  onSelect={[Function]}
  position="right"
  toggle={
    <DropdownToggle
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onToggle={[Function]}
      parentRef={null}
    >
      Dropdown
    </DropdownToggle>
  }
>
  <div
    className="pf-c-dropdown"
  >
    <DropdownToggle
      ariaHasPopup={true}
      className=""
      iconComponent={[Function]}
      id="Dropdown Toggle"
      isActive={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      key=".0"
      onEnter={[Function]}
      onToggle={[Function]}
      parentRef={null}
    >
      <Toggle
        ariaHasPopup={true}
        className=""
        id="Dropdown Toggle"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        isSplitButton={false}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
        type={null}
      >
        <button
          aria-expanded={false}
          aria-haspopup={true}
          className="pf-c-dropdown__toggle"
          disabled={false}
          id="Dropdown Toggle"
          onClick={[Function]}
          onKeyDown={[Function]}
          type="button"
        >
          <span
            className="pf-c-dropdown__toggle-text"
          >
            Dropdown
          </span>
          <CaretDownIcon
            className="pf-c-dropdown__toggle-icon"
            color="currentColor"
            size="sm"
            title={null}
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-dropdown__toggle-icon"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </CaretDownIcon>
        </button>
      </Toggle>
    </DropdownToggle>
  </div>
</Dropdown>
`;
