// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ApplicationLauncher dropup + right aligned 1`] = `
<ApplicationLauncher
  aria-label="Actions"
  className=""
  direction="up"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isDisabled={false}
  isOpen={false}
  onSelect={[Function]}
  onToggle={[Function]}
  position="right"
>
  <DropdownWithContext
    className=""
    direction="up"
    dropdownItems={
      Array [
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Action
        </DropdownItem>,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Action
        </DropdownItem>,
        <Separator
          className=""
          component="a"
          href="#"
          isDisabled={false}
          isHovered={false}
        />,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Action
        </DropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={true}
    onSelect={[Function]}
    position="right"
    toggle={
      <DropdownToggle
        aria-label="Actions"
        className=""
        iconComponent={null}
        id=""
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        onToggle={[Function]}
        parentRef={null}
      >
        <ThIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
          title={null}
        />
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-app-launcher pf-m-top"
    >
      <DropdownToggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        iconComponent={null}
        id="pf-toggle-id-3"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={true}
        key=".0"
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
      >
        <Toggle
          aria-label="Actions"
          ariaHasPopup={true}
          className=""
          id="pf-toggle-id-3"
          isActive={false}
          isDisabled={false}
          isFocused={false}
          isHovered={false}
          isOpen={false}
          isPlain={true}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={null}
          type={null}
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-app-launcher__toggle pf-m-plain"
            disabled={false}
            id="pf-toggle-id-3"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className={null}
            >
              <ThIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"
                    transform=""
                  />
                </svg>
              </ThIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</ApplicationLauncher>
`;

exports[`ApplicationLauncher dropup 1`] = `
<ApplicationLauncher
  aria-label="Actions"
  className=""
  direction="up"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isDisabled={false}
  isOpen={false}
  onSelect={[Function]}
  onToggle={[Function]}
  position="left"
>
  <DropdownWithContext
    className=""
    direction="up"
    dropdownItems={
      Array [
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Action
        </DropdownItem>,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Action
        </DropdownItem>,
        <Separator
          className=""
          component="a"
          href="#"
          isDisabled={false}
          isHovered={false}
        />,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Action
        </DropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={true}
    onSelect={[Function]}
    position="left"
    toggle={
      <DropdownToggle
        aria-label="Actions"
        className=""
        iconComponent={null}
        id=""
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        onToggle={[Function]}
        parentRef={null}
      >
        <ThIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
          title={null}
        />
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-app-launcher pf-m-top"
    >
      <DropdownToggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        iconComponent={null}
        id="pf-toggle-id-2"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={true}
        key=".0"
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
      >
        <Toggle
          aria-label="Actions"
          ariaHasPopup={true}
          className=""
          id="pf-toggle-id-2"
          isActive={false}
          isDisabled={false}
          isFocused={false}
          isHovered={false}
          isOpen={false}
          isPlain={true}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={null}
          type={null}
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-app-launcher__toggle pf-m-plain"
            disabled={false}
            id="pf-toggle-id-2"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className={null}
            >
              <ThIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"
                    transform=""
                  />
                </svg>
              </ThIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</ApplicationLauncher>
`;

exports[`ApplicationLauncher expanded 1`] = `
<ApplicationLauncher
  aria-label="Actions"
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isDisabled={false}
  isOpen={true}
  onSelect={[Function]}
  onToggle={[Function]}
  position="left"
>
  <DropdownWithContext
    className=""
    direction="down"
    dropdownItems={
      Array [
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Action
        </DropdownItem>,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Action
        </DropdownItem>,
        <Separator
          className=""
          component="a"
          href="#"
          isDisabled={false}
          isHovered={false}
        />,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Action
        </DropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={true}
    isPlain={true}
    onSelect={[Function]}
    position="left"
    toggle={
      <DropdownToggle
        aria-label="Actions"
        className=""
        iconComponent={null}
        id=""
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={true}
        isPlain={false}
        onToggle={[Function]}
        parentRef={null}
      >
        <ThIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
          title={null}
        />
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-app-launcher pf-m-expanded"
    >
      <DropdownToggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        iconComponent={null}
        id="pf-toggle-id-4"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={true}
        isPlain={true}
        key=".0"
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
      >
        <Toggle
          aria-label="Actions"
          ariaHasPopup={true}
          className=""
          id="pf-toggle-id-4"
          isActive={false}
          isDisabled={false}
          isFocused={false}
          isHovered={false}
          isOpen={true}
          isPlain={true}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={null}
          type={null}
        >
          <button
            aria-expanded={true}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-app-launcher__toggle pf-m-plain"
            disabled={false}
            id="pf-toggle-id-4"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className={null}
            >
              <ThIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"
                    transform=""
                  />
                </svg>
              </ThIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
      <DropdownMenu
        aria-labelledby="pf-toggle-id-4"
        className=""
        component="ul"
        isGrouped={false}
        isOpen={true}
        openedOnEnter={false}
        position="left"
      >
        <ul
          aria-labelledby="pf-toggle-id-4"
          className="pf-c-app-launcher__menu"
          hidden={false}
          role="menu"
        >
          <DropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            href="#"
            index={0}
            isAppLauncher={false}
            isDisabled={false}
            isHovered={false}
            key=".$link"
            onClick={[Function]}
            role={null}
          >
            <li
              role="none"
            >
              <a
                aria-disabled={false}
                className="pf-c-app-launcher__menu-item"
                href="#"
                onClick={[Function]}
                onKeyDown={[Function]}
                role={null}
              >
                Link
              </a>
            </li>
          </DropdownItem>
          <DropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            href="#"
            index={1}
            isAppLauncher={false}
            isDisabled={false}
            isHovered={false}
            key=".$action"
            onClick={[Function]}
            role={null}
          >
            <li
              role="none"
            >
              <button
                className="pf-c-app-launcher__menu-item"
                disabled={false}
                href="#"
                onClick={[Function]}
                onKeyDown={[Function]}
                role={null}
                type="button"
              >
                Action
              </button>
            </li>
          </DropdownItem>
          <DropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            href="#"
            index={2}
            isAppLauncher={false}
            isDisabled={true}
            isHovered={false}
            key=".$disabled link"
            onClick={[Function]}
            role={null}
          >
            <li
              role="none"
            >
              <a
                aria-disabled={true}
                className="pf-m-disabled pf-c-app-launcher__menu-item"
                href="#"
                onClick={[Function]}
                onKeyDown={[Function]}
                role={null}
                tabIndex={-1}
              >
                Disabled Link
              </a>
            </li>
          </DropdownItem>
          <DropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            href="#"
            index={3}
            isAppLauncher={false}
            isDisabled={true}
            isHovered={false}
            key=".$disabled action"
            onClick={[Function]}
            role={null}
          >
            <li
              role="none"
            >
              <button
                className="pf-m-disabled pf-c-app-launcher__menu-item"
                disabled={true}
                href="#"
                onClick={[Function]}
                onKeyDown={[Function]}
                role={null}
                type="button"
              >
                Disabled Action
              </button>
            </li>
          </DropdownItem>
          <Separator
            className=""
            component="a"
            href="#"
            index={4}
            isDisabled={false}
            isHovered={false}
            key=".$separator"
          >
            <DropdownItem
              className="pf-c-dropdown__separator"
              component="div"
              context={
                Object {
                  "keyHandler": [Function],
                  "sendRef": [Function],
                }
              }
              href="#"
              index={4}
              isAppLauncher={false}
              isDisabled={false}
              isHovered={false}
              onClick={[Function]}
              role="separator"
            >
              <li
                role="none"
              >
                <div
                  className="pf-c-dropdown__separator"
                  href="#"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="separator"
                />
              </li>
            </DropdownItem>
          </Separator>
          <DropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            href="#"
            index={5}
            isAppLauncher={false}
            isDisabled={false}
            isHovered={false}
            key=".$separated link"
            onClick={[Function]}
            role={null}
          >
            <li
              role="none"
            >
              <a
                aria-disabled={false}
                className="pf-c-app-launcher__menu-item"
                href="#"
                onClick={[Function]}
                onKeyDown={[Function]}
                role={null}
              >
                Separated Link
              </a>
            </li>
          </DropdownItem>
          <DropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            href="#"
            index={6}
            isAppLauncher={false}
            isDisabled={false}
            isHovered={false}
            key=".$separated action"
            onClick={[Function]}
            role={null}
          >
            <li
              role="none"
            >
              <button
                className="pf-c-app-launcher__menu-item"
                disabled={false}
                href="#"
                onClick={[Function]}
                onKeyDown={[Function]}
                role={null}
                type="button"
              >
                Separated Action
              </button>
            </li>
          </DropdownItem>
        </ul>
      </DropdownMenu>
    </div>
  </DropdownWithContext>
</ApplicationLauncher>
`;

exports[`ApplicationLauncher regular 1`] = `
<ApplicationLauncher
  aria-label="Actions"
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isDisabled={false}
  isOpen={false}
  onSelect={[Function]}
  onToggle={[Function]}
  position="left"
>
  <DropdownWithContext
    className=""
    direction="down"
    dropdownItems={
      Array [
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Action
        </DropdownItem>,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Action
        </DropdownItem>,
        <Separator
          className=""
          component="a"
          href="#"
          isDisabled={false}
          isHovered={false}
        />,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Action
        </DropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={true}
    onSelect={[Function]}
    position="left"
    toggle={
      <DropdownToggle
        aria-label="Actions"
        className=""
        iconComponent={null}
        id=""
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        onToggle={[Function]}
        parentRef={null}
      >
        <ThIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
          title={null}
        />
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-app-launcher"
    >
      <DropdownToggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        iconComponent={null}
        id="pf-toggle-id-0"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={true}
        key=".0"
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
      >
        <Toggle
          aria-label="Actions"
          ariaHasPopup={true}
          className=""
          id="pf-toggle-id-0"
          isActive={false}
          isDisabled={false}
          isFocused={false}
          isHovered={false}
          isOpen={false}
          isPlain={true}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={null}
          type={null}
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-app-launcher__toggle pf-m-plain"
            disabled={false}
            id="pf-toggle-id-0"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className={null}
            >
              <ThIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"
                    transform=""
                  />
                </svg>
              </ThIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</ApplicationLauncher>
`;

exports[`ApplicationLauncher right aligned 1`] = `
<ApplicationLauncher
  aria-label="Actions"
  className=""
  direction="down"
  dropdownItems={
    Array [
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Action
      </DropdownItem>,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={true}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Disabled Action
      </DropdownItem>,
      <Separator
        className=""
        component="a"
        href="#"
        isDisabled={false}
        isHovered={false}
      />,
      <DropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Link
      </DropdownItem>,
      <DropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        href="#"
        index={-1}
        isAppLauncher={false}
        isDisabled={false}
        isHovered={false}
        onClick={[Function]}
        role={null}
      >
        Separated Action
      </DropdownItem>,
    ]
  }
  isDisabled={false}
  isOpen={false}
  onSelect={[Function]}
  onToggle={[Function]}
  position="right"
>
  <DropdownWithContext
    className=""
    direction="down"
    dropdownItems={
      Array [
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Action
        </DropdownItem>,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={true}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Disabled Action
        </DropdownItem>,
        <Separator
          className=""
          component="a"
          href="#"
          isDisabled={false}
          isHovered={false}
        />,
        <DropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Link
        </DropdownItem>,
        <DropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          href="#"
          index={-1}
          isAppLauncher={false}
          isDisabled={false}
          isHovered={false}
          onClick={[Function]}
          role={null}
        >
          Separated Action
        </DropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={true}
    onSelect={[Function]}
    position="right"
    toggle={
      <DropdownToggle
        aria-label="Actions"
        className=""
        iconComponent={null}
        id=""
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={false}
        onToggle={[Function]}
        parentRef={null}
      >
        <ThIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
          title={null}
        />
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-app-launcher"
    >
      <DropdownToggle
        aria-label="Actions"
        ariaHasPopup={true}
        className=""
        iconComponent={null}
        id="pf-toggle-id-1"
        isActive={false}
        isDisabled={false}
        isFocused={false}
        isHovered={false}
        isOpen={false}
        isPlain={true}
        key=".0"
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={null}
      >
        <Toggle
          aria-label="Actions"
          ariaHasPopup={true}
          className=""
          id="pf-toggle-id-1"
          isActive={false}
          isDisabled={false}
          isFocused={false}
          isHovered={false}
          isOpen={false}
          isPlain={true}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={null}
          type={null}
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-app-launcher__toggle pf-m-plain"
            disabled={false}
            id="pf-toggle-id-1"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className={null}
            >
              <ThIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"
                    transform=""
                  />
                </svg>
              </ThIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</ApplicationLauncher>
`;
