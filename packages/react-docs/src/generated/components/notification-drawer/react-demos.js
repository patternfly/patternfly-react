import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';
import CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';
import BarsIcon from '@patternfly/react-icons/dist/js/icons/bars-icon';
import HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';
import QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';
import SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';
import imgBrand from '@patternfly/react-core/src/components/Brand/examples/pfLogo.svg';
import imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';
import AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';
import srcImportbasic from './react-demos/basic.png';
import srcImportgrouped from './react-demos/grouped.png';
const pageData = {
  "id": "Notification drawer",
  "section": "components",
  "source": "react-demos",
  "slug": "/components/notification-drawer/react-demos",
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/demos/NotificationDrawer/NotificationDrawer.md",
  "beta": true,
  "fullscreenExamples": [
    "Basic",
    "Grouped"
  ]
};
pageData.liveContext = {
  BellIcon,
  CogIcon,
  BarsIcon,
  HelpIcon,
  QuestionCircleIcon,
  SearchIcon,
  imgBrand,
  imgAvatar,
  AttentionBellIcon
};
pageData.examples = {
  'Basic': props => 
    <Example {...pageData} {...props} thumbnail={srcImportbasic} {...{"code":"import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  Dropdown,\n  DropdownGroup,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStatePrimary,\n  Gallery,\n  GalleryItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  NotificationBadge,\n  NotificationDrawer,\n  NotificationDrawerBody,\n  NotificationDrawerHeader,\n  NotificationDrawerList,\n  NotificationDrawerListItem,\n  NotificationDrawerListItemBody,\n  NotificationDrawerListItemHeader,\n  Page,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  Title,\n  PageToggleButton,\n  Masthead,\n  MastheadMain,\n  MastheadToggle,\n  MastheadContent,\n  MastheadBrand,\n  Toolbar,\n  ToolbarItem,\n  ToolbarGroup,\n  ToolbarContent\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\nimport BarsIcon from '@patternfly/react-icons/dist/js/icons/bars-icon';\nimport imgBrand from '@patternfly/react-core/src/components/Brand/examples/pfLogo.svg';\nimport imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nclass BasicNotificationDrawer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.drawerRef = React.createRef();\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0,\n      isDrawerExpanded: false,\n      isUnreadMap: {\n        'notification-1': true,\n        'notification-2': true\n      },\n      showNotifications: true,\n      isActionsMenuOpen: null\n    };\n    this.onDropdownToggle = isDropdownOpen => {\n      this.setState({\n        isDropdownOpen\n      });\n    };\n\n    this.onDropdownSelect = event => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\n      this.setState({\n        isKebabDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownSelect = event => {\n      this.setState({\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n      });\n    };\n\n    this.onNavSelect = result => {\n      this.setState({\n        activeItem: result.itemId\n      });\n    };\n\n    this.onCloseNotificationDrawer = () => {\n      this.setState(prevState => {\n        return {\n          isDrawerExpanded: !prevState.isDrawerExpanded\n        };\n      });\n    };\n\n    this.onToggle = (id, isOpen) => {\n      this.setState({\n        isActionsMenuOpen: { [id]: isOpen }\n      });\n    };\n\n    this.onSelect = event => {\n      this.setState({\n        isActionsMenuOpen: null\n      });\n    };\n\n    this.onListItemClick = id => {\n      this.setState(prevState => {\n        if (!prevState.isUnreadMap) return;\n        prevState.isUnreadMap[id] = false;\n        return {\n          isUnreadMap: prevState.isUnreadMap\n        };\n      });\n    };\n\n    this.getNumberUnread = () => {\n      const { isUnreadMap } = this.state;\n      if (isUnreadMap === null) return 0;\n      return Object.keys(isUnreadMap).reduce((count, id) => {\n        return isUnreadMap[id] ? count + 1 : count;\n      }, 0);\n    };\n\n    this.markAllRead = () => {\n      this.setState({\n        isUnreadMap: null\n      });\n    };\n\n    this.showNotifications = showNotifications => {\n      this.setState({\n        isUnreadMap: null,\n        showNotifications: showNotifications\n      });\n    };\n\n    this.focusDrawer = () => {\n      const firstTabbableItem = this.drawerRef.current.querySelector('a, button');\n      firstTabbableItem.focus();\n    };\n  }\n\n  render() {\n    const {\n      isDropdownOpen,\n      isKebabDropdownOpen,\n      activeItem,\n      res,\n      isDrawerExpanded,\n      isActionsMenuOpen,\n      isUnreadMap,\n      showNotifications\n    } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\">\n        <NavList>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>,\n      <DropdownItem>\n        <HelpIcon /> Help\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownGroup key=\"group 2\">\n        <DropdownItem key=\"group 2 profile\">My profile</DropdownItem>\n        <DropdownItem key=\"group 2 user\" component=\"button\">\n          User management\n        </DropdownItem>\n        <DropdownItem key=\"group 2 logout\">Logout</DropdownItem>\n      </DropdownGroup>\n    ];\n    const headerToolbar = (\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarGroup spaceItems={{ default: 'spacerNone' }} alignment={{ default: 'alignRight' }}>\n            <ToolbarGroup variant=\"icon-button-group\">\n              <ToolbarItem visibility={{ default: 'visible' }} isSelected={isDrawerExpanded}>\n                <NotificationBadge\n                  variant={this.getNumberUnread() === 0 ? 'read' : 'unread'}\n                  onClick={this.onCloseNotificationDrawer}\n                  aria-label=\"Notifications\"\n                >\n                  <BellIcon />\n                </NotificationBadge>\n              </ToolbarItem>\n              <ToolbarGroup\n                variant=\"icon-button-group\"\n                visibility={{\n                  default: 'hidden',\n                  lg: 'visible'\n                }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\n              >\n                <ToolbarItem>\n                  <Button aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n                    <CogIcon />\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button aria-label=\"Help actions\" variant={ButtonVariant.plain}>\n                    <QuestionCircleIcon />\n                  </Button>\n                </ToolbarItem>\n              </ToolbarGroup>\n            </ToolbarGroup>\n            <ToolbarGroup>\n              <ToolbarItem\n                visibility={{\n                  lg: 'hidden'\n                }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\n              >\n                <Dropdown\n                  isPlain\n                  position=\"right\"\n                  onSelect={this.onKebabDropdownSelect}\n                  toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n                  isOpen={isKebabDropdownOpen}\n                  dropdownItems={kebabDropdownItems}\n                />\n              </ToolbarItem>\n              <ToolbarItem\n                visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\n              >\n                <Dropdown\n                  position=\"right\"\n                  onSelect={this.onDropdownSelect}\n                  isOpen={isDropdownOpen}\n                  toggle={\n                    <DropdownToggle icon={<Avatar src={imgAvatar} alt=\"Avatar\" />} onToggle={this.onDropdownToggle}>\n                      John Smith\n                    </DropdownToggle>\n                  }\n                  dropdownItems={userDropdownItems}\n                />\n              </ToolbarItem>\n            </ToolbarGroup>\n          </ToolbarGroup>\n        </ToolbarContent>\n      </Toolbar>\n    );\n\n    const Header = (\n      <Masthead>\n        <MastheadToggle>\n          <PageToggleButton variant=\"plain\" aria-label=\"Global navigation\">\n            <BarsIcon />\n          </PageToggleButton>\n        </MastheadToggle>\n        <MastheadMain>\n          <MastheadBrand>\n            <Brand src={imgBrand} alt=\"Patternfly logo\" />\n          </MastheadBrand>\n        </MastheadMain>\n        <MastheadContent>{headerToolbar}</MastheadContent>\n      </Masthead>\n    );\n    const Sidebar = <PageSidebar nav={PageNav} />;\n    const pageId = 'main-content-page-layout-default-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\n\n    const PageBreadcrumb = (\n      <Breadcrumb>\n        <BreadcrumbItem>Section home</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Section landing\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n\n    const drawerContent = 'Panel content';\n\n    const notificationDrawerActions = [\n      <DropdownItem key=\"markAllRead\" onClick={this.markAllRead} component=\"button\">\n        Mark all read\n      </DropdownItem>,\n      <DropdownItem key=\"clearAll\" onClick={() => this.showNotifications(false)} component=\"button\">\n        Clear all\n      </DropdownItem>,\n      <DropdownItem key=\"unclearLast\" onClick={() => this.showNotifications(true)} component=\"button\">\n        Unclear last\n      </DropdownItem>,\n      <DropdownItem key=\"settings\" component=\"button\">\n        Settings\n      </DropdownItem>\n    ];\n\n    const notificationDrawerDropdownItems = [\n      <DropdownItem key=\"link\">Link</DropdownItem>,\n      <DropdownItem key=\"action\" component=\"button\">\n        Action\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem key=\"disabled link\" isDisabled>\n        Disabled Link\n      </DropdownItem>\n    ];\n\n    const notificationDrawer = (\n      <NotificationDrawer ref={this.drawerRef}>\n        <NotificationDrawerHeader count={this.getNumberUnread()} onClose={this.onCloseNotificationDrawer}>\n          <Dropdown\n            onSelect={this.onSelect}\n            toggle={<KebabToggle onToggle={isOpen => this.onToggle('toggle-id-0', isOpen)} id=\"toggle-id-0\" />}\n            isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-0']}\n            isPlain\n            dropdownItems={notificationDrawerActions}\n            id=\"notification-0\"\n            position={DropdownPosition.right}\n          />\n        </NotificationDrawerHeader>\n        <NotificationDrawerBody>\n          {showNotifications && (\n            <NotificationDrawerList>\n              <NotificationDrawerListItem\n                variant=\"info\"\n                onClick={() => this.onListItemClick('notification-1')}\n                isRead={isUnreadMap === null || !isUnreadMap['notification-1']}\n              >\n                <NotificationDrawerListItemHeader\n                  variant=\"info\"\n                  title=\"Unread info notification title\"\n                  srTitle=\"Info notification:\"\n                >\n                  <Dropdown\n                    position={DropdownPosition.right}\n                    onSelect={this.onSelect}\n                    toggle={<KebabToggle onToggle={isOpen => this.onToggle('toggle-id-1', isOpen)} id=\"toggle-id-1\" />}\n                    isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-1']}\n                    isPlain\n                    dropdownItems={notificationDrawerDropdownItems}\n                    id=\"notification-1\"\n                  />\n                </NotificationDrawerListItemHeader>\n                <NotificationDrawerListItemBody timestamp=\"5 minutes ago\">\n                  This is an info notification description.\n                </NotificationDrawerListItemBody>\n              </NotificationDrawerListItem>\n              <NotificationDrawerListItem\n                variant=\"danger\"\n                onClick={() => this.onListItemClick('notification-2')}\n                isRead={isUnreadMap === null || !isUnreadMap['notification-2']}\n              >\n                <NotificationDrawerListItemHeader\n                  variant=\"danger\"\n                  title=\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\"\n                  srTitle=\"Danger notification:\"\n                >\n                  <Dropdown\n                    position={DropdownPosition.right}\n                    onSelect={this.onSelect}\n                    toggle={<KebabToggle onToggle={isOpen => this.onToggle('toggle-id-2', isOpen)} id=\"toggle-id-2\" />}\n                    isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-2']}\n                    isPlain\n                    dropdownItems={notificationDrawerDropdownItems}\n                    id=\"notification-2\"\n                  />\n                </NotificationDrawerListItemHeader>\n                <NotificationDrawerListItemBody timestamp=\"10 minutes ago\">\n                  This is a danger notification description. This is a long description to show how the title will wrap\n                  if it is long and wraps to multiple lines.\n                </NotificationDrawerListItemBody>\n              </NotificationDrawerListItem>\n              <NotificationDrawerListItem\n                variant=\"warning\"\n                onClick={() => this.onListItemClick('notification-3')}\n                isRead={isUnreadMap === null || !isUnreadMap['notification-3']}\n              >\n                <NotificationDrawerListItemHeader\n                  variant=\"warning\"\n                  title=\"Read warning notification title\"\n                  srTitle=\"Warning notification:\"\n                >\n                  <Dropdown\n                    position={DropdownPosition.right}\n                    onSelect={this.onSelect}\n                    toggle={<KebabToggle onToggle={isOpen => this.onToggle('toggle-id-3', isOpen)} id=\"toggle-id-3\" />}\n                    isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-3']}\n                    isPlain\n                    dropdownItems={notificationDrawerDropdownItems}\n                    id=\"notification-3\"\n                  />\n                </NotificationDrawerListItemHeader>\n                <NotificationDrawerListItemBody timestamp=\"20 minutes ago\">\n                  This is a warning notification description.\n                </NotificationDrawerListItemBody>\n              </NotificationDrawerListItem>\n              <NotificationDrawerListItem\n                variant=\"success\"\n                onClick={() => this.onListItemClick('notification-4')}\n                isRead={isUnreadMap === null || !isUnreadMap['notification-4']}\n              >\n                <NotificationDrawerListItemHeader\n                  variant=\"success\"\n                  title=\"Read success notification title\"\n                  srTitle=\"Success notification:\"\n                >\n                  <Dropdown\n                    position={DropdownPosition.right}\n                    direction={DropdownDirection.up}\n                    onSelect={this.onSelect}\n                    toggle={<KebabToggle onToggle={isOpen => this.onToggle('toggle-id-4', isOpen)} id=\"toggle-id-4\" />}\n                    isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-4']}\n                    isPlain\n                    dropdownItems={notificationDrawerDropdownItems}\n                    id=\"notification-4\"\n                  />\n                </NotificationDrawerListItemHeader>\n                <NotificationDrawerListItemBody timestamp=\"30 minutes ago\">\n                  This is a success notification description.\n                </NotificationDrawerListItemBody>\n              </NotificationDrawerListItem>\n            </NotificationDrawerList>\n          )}\n          {!showNotifications && (\n            <EmptyState variant={EmptyStateVariant.full}>\n              <EmptyStateIcon icon={SearchIcon} />\n              <Title headingLevel=\"h2\" size=\"lg\">\n                No alerts found\n              </Title>\n              <EmptyStateBody>\n                There are currently no alerts. There may be silenced critical alerts however.\n              </EmptyStateBody>\n              <EmptyStatePrimary>\n                <Button variant=\"link\">Action</Button>\n              </EmptyStatePrimary>\n            </EmptyState>\n          )}\n        </NotificationDrawerBody>\n      </NotificationDrawer>\n    );\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          notificationDrawer={notificationDrawer}\n          onNotificationDrawerExpand={this.focusDrawer}\n          isNotificationDrawerExpanded={isDrawerExpanded}\n          skipToContent={PageSkipToContent}\n          breadcrumb={PageBreadcrumb}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of its relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection variant={PageSectionVariants.light} noPadding={true}>\n            Panel section content\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}","title":"Basic","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Grouped': props => 
    <Example {...pageData} {...props} thumbnail={srcImportgrouped} {...{"code":"import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  Dropdown,\n  DropdownGroup,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStatePrimary,\n  Gallery,\n  GalleryItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  NotificationBadge,\n  NotificationDrawer,\n  NotificationDrawerBody,\n  NotificationDrawerGroup,\n  NotificationDrawerGroupList,\n  NotificationDrawerHeader,\n  NotificationDrawerList,\n  NotificationDrawerListItem,\n  NotificationDrawerListItemBody,\n  NotificationDrawerListItemHeader,\n  Page,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  Title,\n  TextContent,\n  Text,\n  PageToggleButton,\n  Masthead,\n  MastheadMain,\n  MastheadToggle,\n  MastheadContent,\n  MastheadBrand,\n  Toolbar,\n  ToolbarItem,\n  ToolbarGroup,\n  ToolbarContent\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BarsIcon from '@patternfly/react-icons/dist/esm/icons/bars-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\nimport imgBrand from '@patternfly/react-core/src/components/Brand/examples/pfLogo.svg';\nimport imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nclass GroupedNotificationDrawer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.drawerRef = React.createRef();\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0,\n      isDrawerExpanded: false,\n      firstDrawerGroupExpanded: false,\n      secondDrawerGroupExpanded: true,\n      thirdDrawerGroupExpanded: false,\n      isActionsMenuOpen: null,\n      showNotifications: true,\n      isUnreadMap: {\n        'group-1': {\n          'notification-5': true,\n          'notification-6': true\n        },\n        'group-2': {\n          'notification-9': true,\n          'notification-10': true\n        },\n        'group-3': null\n      }\n    };\n    this.onDropdownToggle = isDropdownOpen => {\n      this.setState({\n        isDropdownOpen\n      });\n    };\n\n    this.onDropdownSelect = event => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\n      this.setState({\n        isKebabDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownSelect = event => {\n      this.setState({\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n      });\n    };\n\n    this.onNavSelect = result => {\n      this.setState({\n        activeItem: result.itemId\n      });\n    };\n\n    this.onCloseNotificationDrawer = () => {\n      this.setState(prevState => {\n        return {\n          isDrawerExpanded: !prevState.isDrawerExpanded\n        };\n      });\n    };\n\n    this.onToggle = (id, isOpen) => {\n      this.setState({\n        isActionsMenuOpen: { [id]: isOpen }\n      });\n    };\n\n    this.onSelect = event => {\n      this.setState({\n        isActionsMenuOpen: null\n      });\n    };\n\n    this.onListItemClick = (groupId, id) => {\n      this.setState(prevState => {\n        if (!prevState.isUnreadMap || !prevState.isUnreadMap[groupId]) return;\n        console.log(prevState.isUnreadMap);\n        prevState.isUnreadMap[groupId][id] = false;\n        return {\n          isUnreadMap: prevState.isUnreadMap\n        };\n      });\n    };\n\n    this.isUnread = (groupId, id) => {\n      const { isUnreadMap } = this.state;\n      return isUnreadMap && isUnreadMap[groupId] && isUnreadMap[groupId][id];\n    };\n\n    this.getNumberUnread = groupId => {\n      const { isUnreadMap } = this.state;\n      if (isUnreadMap === null) return 0;\n\n      if (groupId) {\n        if (isUnreadMap[groupId] === null) return 0;\n\n        return Object.keys(isUnreadMap[groupId]).reduce((count, id) => {\n          return isUnreadMap[groupId][id] ? count + 1 : count;\n        }, 0);\n      }\n\n      return Object.keys(isUnreadMap).reduce((count, groupId) => {\n        if (isUnreadMap[groupId] === null) return count;\n\n        return Object.keys(isUnreadMap[groupId]).reduce((groupCount, id) => {\n          return isUnreadMap[groupId][id] ? groupCount + 1 : groupCount;\n        }, count);\n      }, 0);\n    };\n\n    this.markAllRead = () => {\n      this.setState({\n        isUnreadMap: null\n      });\n    };\n\n    this.showNotifications = showNotifications => {\n      this.setState({\n        isUnreadMap: null,\n        showNotifications: showNotifications\n      });\n    };\n\n    this.toggleFirstDrawer = (event, value) => {\n      this.setState({\n        firstDrawerGroupExpanded: value\n      });\n    };\n\n    this.toggleSecondDrawer = (event, value) => {\n      this.setState({\n        secondDrawerGroupExpanded: value\n      });\n    };\n\n    this.toggleThirdDrawer = (event, value) => {\n      this.setState({\n        thirdDrawerGroupExpanded: value\n      });\n    };\n\n    this.focusDrawer = () => {\n      // Prevent the NotificationDrawer from receiving focus if a drawer group item is opened\n      if (!document.activeElement.closest(`.${this.drawerRef.current.className}`)) {\n        const firstTabbableItem = this.drawerRef.current.querySelector('a, button');\n        firstTabbableItem.focus();\n      }\n    };\n  }\n\n  render() {\n    const {\n      isDropdownOpen,\n      isKebabDropdownOpen,\n      activeItem,\n      res,\n      isDrawerExpanded,\n      isActionsMenuOpen,\n      isUnreadMap,\n      showNotifications,\n      firstDrawerGroupExpanded,\n      secondDrawerGroupExpanded,\n      thirdDrawerGroupExpanded\n    } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\">\n        <NavList>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>,\n      <DropdownItem>\n        <HelpIcon /> Help\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownGroup key=\"group 2\">\n        <DropdownItem key=\"group 2 profile\">My profile</DropdownItem>\n        <DropdownItem key=\"group 2 user\" component=\"button\">\n          User management\n        </DropdownItem>\n        <DropdownItem key=\"group 2 logout\">Logout</DropdownItem>\n      </DropdownGroup>\n    ];\n    const headerToolbar = (\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarGroup spaceItems={{ default: 'spacerNone' }} alignment={{ default: 'alignRight' }}>\n            <ToolbarGroup variant=\"icon-button-group\">\n              <ToolbarItem visibility={{ default: 'visible' }} isSelected={isDrawerExpanded}>\n                <NotificationBadge\n                  variant={this.getNumberUnread() === 0 ? 'read' : 'unread'}\n                  onClick={this.onCloseNotificationDrawer}\n                  aria-label=\"Notifications\"\n                >\n                  <BellIcon />\n                </NotificationBadge>\n              </ToolbarItem>\n              <ToolbarGroup\n                variant=\"icon-button-group\"\n                visibility={{\n                  default: 'hidden',\n                  lg: 'visible'\n                }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\n              >\n                <ToolbarItem>\n                  <Button aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n                    <CogIcon />\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button aria-label=\"Help actions\" variant={ButtonVariant.plain}>\n                    <QuestionCircleIcon />\n                  </Button>\n                </ToolbarItem>\n              </ToolbarGroup>\n            </ToolbarGroup>\n            <ToolbarGroup>\n              <ToolbarItem\n                visibility={{\n                  lg: 'hidden'\n                }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\n              >\n                <Dropdown\n                  isPlain\n                  position=\"right\"\n                  onSelect={this.onKebabDropdownSelect}\n                  toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n                  isOpen={isKebabDropdownOpen}\n                  dropdownItems={kebabDropdownItems}\n                />\n              </ToolbarItem>\n              <ToolbarItem\n                visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\n              >\n                <Dropdown\n                  position=\"right\"\n                  onSelect={this.onDropdownSelect}\n                  isOpen={isDropdownOpen}\n                  toggle={\n                    <DropdownToggle icon={<Avatar src={imgAvatar} alt=\"Avatar\" />} onToggle={this.onDropdownToggle}>\n                      John Smith\n                    </DropdownToggle>\n                  }\n                  dropdownItems={userDropdownItems}\n                />\n              </ToolbarItem>\n            </ToolbarGroup>\n          </ToolbarGroup>\n        </ToolbarContent>\n      </Toolbar>\n    );\n\n    const Header = (\n      <Masthead>\n        <MastheadToggle>\n          <PageToggleButton variant=\"plain\" aria-label=\"Global navigation\">\n            <BarsIcon />\n          </PageToggleButton>\n        </MastheadToggle>\n        <MastheadMain>\n          <MastheadBrand>\n            <Brand src={imgBrand} alt=\"Patternfly logo\" />\n          </MastheadBrand>\n        </MastheadMain>\n        <MastheadContent>{headerToolbar}</MastheadContent>\n      </Masthead>\n    );\n    const Sidebar = <PageSidebar nav={PageNav} />;\n    const pageId = 'main-content-page-layout-default-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\n\n    const PageBreadcrumb = (\n      <Breadcrumb>\n        <BreadcrumbItem>Section home</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Section landing\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n\n    const drawerContent = 'Panel content';\n\n    const notificationDrawerDropdownItems = [\n      <DropdownItem key=\"link\">Link</DropdownItem>,\n      <DropdownItem key=\"action\" component=\"button\">\n        Action\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem key=\"disabled link\" isDisabled>\n        Disabled Link\n      </DropdownItem>\n    ];\n\n    const notificationDrawerActions = [\n      <DropdownItem key=\"markAllRead\" onClick={this.markAllRead} component=\"button\">\n        Mark all read\n      </DropdownItem>,\n      <DropdownItem key=\"clearAll\" onClick={() => this.showNotifications(false)} component=\"button\">\n        Clear all\n      </DropdownItem>,\n      <DropdownItem key=\"unclearLast\" onClick={() => this.showNotifications(true)} component=\"button\">\n        Unclear last\n      </DropdownItem>,\n      <DropdownItem key=\"settings\" component=\"button\">\n        Settings\n      </DropdownItem>\n    ];\n\n    const notificationDrawer = (\n      <NotificationDrawer ref={this.drawerRef}>\n        <NotificationDrawerHeader count={this.getNumberUnread()} onClose={this.onCloseNotificationDrawer}>\n          <Dropdown\n            onSelect={this.onSelect}\n            toggle={<KebabToggle onToggle={isOpen => this.onToggle('toggle-id-0', isOpen)} id=\"toggle-id-0\" />}\n            isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-0']}\n            isPlain\n            dropdownItems={notificationDrawerActions}\n            id=\"notification-0\"\n            position={DropdownPosition.right}\n          />\n        </NotificationDrawerHeader>\n        <NotificationDrawerBody>\n          {showNotifications && (\n            <NotificationDrawerGroupList>\n              <NotificationDrawerGroup\n                title=\"First notification group\"\n                isExpanded={firstDrawerGroupExpanded}\n                count={this.getNumberUnread('group-1')}\n                onExpand={this.toggleFirstDrawer}\n              >\n                <NotificationDrawerList isHidden={!firstDrawerGroupExpanded}>\n                  <NotificationDrawerListItem\n                    variant=\"info\"\n                    onClick={() => this.onListItemClick('group-1', 'notification-5')}\n                    isRead={!this.isUnread('group-1', 'notification-5')}\n                  >\n                    <NotificationDrawerListItemHeader\n                      variant=\"info\"\n                      title=\"Unread info notification title\"\n                      srTitle=\"Info notification:\"\n                    >\n                      <Dropdown\n                        position={DropdownPosition.right}\n                        onSelect={this.onSelect}\n                        toggle={\n                          <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-5', isOpen)} id=\"toggle-id-5\" />\n                        }\n                        isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-5']}\n                        isPlain\n                        dropdownItems={notificationDrawerDropdownItems}\n                        id=\"notification-5\"\n                      />\n                    </NotificationDrawerListItemHeader>\n                    <NotificationDrawerListItemBody timestamp=\"5 minutes ago\">\n                      This is an info notification description.\n                    </NotificationDrawerListItemBody>\n                  </NotificationDrawerListItem>\n                  <NotificationDrawerListItem\n                    variant=\"danger\"\n                    onClick={() => this.onListItemClick('group-1', 'notification-6')}\n                    isRead={!this.isUnread('group-1', 'notification-6')}\n                  >\n                    <NotificationDrawerListItemHeader\n                      variant=\"danger\"\n                      title=\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\"\n                      srTitle=\"Danger notification:\"\n                    >\n                      <Dropdown\n                        position={DropdownPosition.right}\n                        onSelect={this.onSelect}\n                        toggle={\n                          <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-6', isOpen)} id=\"toggle-id-6\" />\n                        }\n                        isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-6']}\n                        isPlain\n                        dropdownItems={notificationDrawerDropdownItems}\n                        id=\"notification-6\"\n                      />\n                    </NotificationDrawerListItemHeader>\n                    <NotificationDrawerListItemBody timestamp=\"10 minutes ago\">\n                      This is a danger notification description. This is a long description to show how the title will\n                      wrap if it is long and wraps to multiple lines.\n                    </NotificationDrawerListItemBody>\n                  </NotificationDrawerListItem>\n                  <NotificationDrawerListItem\n                    variant=\"warning\"\n                    onClick={() => this.onListItemClick('group-1', 'notification-7')}\n                    isRead={!this.isUnread('group-1', 'notification-7')}\n                  >\n                    <NotificationDrawerListItemHeader\n                      variant=\"warning\"\n                      title=\"Read warning notification title\"\n                      srTitle=\"Warning notification:\"\n                    >\n                      <Dropdown\n                        position={DropdownPosition.right}\n                        onSelect={this.onSelect}\n                        toggle={\n                          <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-7', isOpen)} id=\"toggle-id-7\" />\n                        }\n                        isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-7']}\n                        isPlain\n                        dropdownItems={notificationDrawerDropdownItems}\n                        id=\"notification-7\"\n                      />\n                    </NotificationDrawerListItemHeader>\n                    <NotificationDrawerListItemBody timestamp=\"20 minutes ago\">\n                      This is a warning notification description.\n                    </NotificationDrawerListItemBody>\n                  </NotificationDrawerListItem>\n                  <NotificationDrawerListItem\n                    variant=\"success\"\n                    onClick={() => this.onListItemClick('group-1', 'notification-8')}\n                    isRead={!this.isUnread('group-1', 'notification-8')}\n                  >\n                    <NotificationDrawerListItemHeader\n                      variant=\"success\"\n                      title=\"Read success notification title\"\n                      srTitle=\"Success notification:\"\n                    >\n                      <Dropdown\n                        position={DropdownPosition.right}\n                        direction={DropdownDirection.up}\n                        onSelect={this.onSelect}\n                        toggle={\n                          <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-8', isOpen)} id=\"toggle-id-8\" />\n                        }\n                        isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-8']}\n                        isPlain\n                        dropdownItems={notificationDrawerDropdownItems}\n                        id=\"notification-8\"\n                      />\n                    </NotificationDrawerListItemHeader>\n                    <NotificationDrawerListItemBody timestamp=\"30 minutes ago\">\n                      This is a success notification description.\n                    </NotificationDrawerListItemBody>\n                  </NotificationDrawerListItem>\n                </NotificationDrawerList>\n              </NotificationDrawerGroup>\n              <NotificationDrawerGroup\n                title=\"Second notification group\"\n                isExpanded={secondDrawerGroupExpanded}\n                count={this.getNumberUnread('group-2')}\n                onExpand={this.toggleSecondDrawer}\n              >\n                <NotificationDrawerList isHidden={!secondDrawerGroupExpanded}>\n                  <NotificationDrawerListItem\n                    variant=\"info\"\n                    onClick={() => this.onListItemClick('group-2', 'notification-9')}\n                    isRead={!this.isUnread('group-2', 'notification-9')}\n                  >\n                    <NotificationDrawerListItemHeader\n                      variant=\"info\"\n                      title=\"Unread info notification title\"\n                      srTitle=\"Info notification:\"\n                    >\n                      <Dropdown\n                        position={DropdownPosition.right}\n                        onSelect={this.onSelect}\n                        toggle={\n                          <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-9', isOpen)} id=\"toggle-id-9\" />\n                        }\n                        isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-9']}\n                        isPlain\n                        dropdownItems={notificationDrawerDropdownItems}\n                        id=\"notification-9\"\n                      />\n                    </NotificationDrawerListItemHeader>\n                    <NotificationDrawerListItemBody timestamp=\"5 minutes ago\">\n                      This is an info notification description.\n                    </NotificationDrawerListItemBody>\n                  </NotificationDrawerListItem>\n                  <NotificationDrawerListItem\n                    variant=\"danger\"\n                    onClick={() => this.onListItemClick('group-2', 'notification-10')}\n                    isRead={!this.isUnread('group-2', 'notification-10')}\n                  >\n                    <NotificationDrawerListItemHeader\n                      variant=\"danger\"\n                      title=\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\"\n                      srTitle=\"Danger notification:\"\n                    >\n                      <Dropdown\n                        position={DropdownPosition.right}\n                        onSelect={this.onSelect}\n                        toggle={\n                          <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-10', isOpen)} id=\"toggle-id-10\" />\n                        }\n                        isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-10']}\n                        isPlain\n                        dropdownItems={notificationDrawerDropdownItems}\n                        id=\"notification-10\"\n                      />\n                    </NotificationDrawerListItemHeader>\n                    <NotificationDrawerListItemBody timestamp=\"10 minutes ago\">\n                      This is a danger notification description. This is a long description to show how the title will\n                      wrap if it is long and wraps to multiple lines.\n                    </NotificationDrawerListItemBody>\n                  </NotificationDrawerListItem>\n                  <NotificationDrawerListItem\n                    variant=\"warning\"\n                    onClick={() => this.onListItemClick('group-2', 'notification-11')}\n                    isRead={!this.isUnread('group-2', 'notification-11')}\n                  >\n                    <NotificationDrawerListItemHeader\n                      variant=\"warning\"\n                      title=\"Read warning notification title\"\n                      srTitle=\"Warning notification:\"\n                    >\n                      <Dropdown\n                        position={DropdownPosition.right}\n                        onSelect={this.onSelect}\n                        toggle={\n                          <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-11', isOpen)} id=\"toggle-id-11\" />\n                        }\n                        isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-11']}\n                        isPlain\n                        dropdownItems={notificationDrawerDropdownItems}\n                        id=\"notification-11\"\n                      />\n                    </NotificationDrawerListItemHeader>\n                    <NotificationDrawerListItemBody timestamp=\"20 minutes ago\">\n                      This is a warning notification description.\n                    </NotificationDrawerListItemBody>\n                  </NotificationDrawerListItem>\n                  <NotificationDrawerListItem\n                    variant=\"success\"\n                    onClick={() => this.onListItemClick('group-2', 'notification-12')}\n                    isRead={!this.isUnread('group-2', 'notification-12')}\n                  >\n                    <NotificationDrawerListItemHeader\n                      variant=\"success\"\n                      title=\"Read success notification title\"\n                      srTitle=\"Success notification:\"\n                    >\n                      <Dropdown\n                        position={DropdownPosition.right}\n                        direction={DropdownDirection.up}\n                        onSelect={this.onSelect}\n                        toggle={\n                          <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-12', isOpen)} id=\"toggle-id-12\" />\n                        }\n                        isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-12']}\n                        isPlain\n                        dropdownItems={notificationDrawerDropdownItems}\n                        id=\"notification-12\"\n                      />\n                    </NotificationDrawerListItemHeader>\n                    <NotificationDrawerListItemBody timestamp=\"30 minutes ago\">\n                      This is a success notification description.\n                    </NotificationDrawerListItemBody>\n                  </NotificationDrawerListItem>\n                </NotificationDrawerList>\n              </NotificationDrawerGroup>\n              <NotificationDrawerGroup\n                title=\"Third notification group\"\n                isExpanded={thirdDrawerGroupExpanded}\n                count={this.getNumberUnread('group-3')}\n                onExpand={this.toggleThirdDrawer}\n              >\n                <NotificationDrawerList isHidden={!thirdDrawerGroupExpanded}>\n                  <EmptyState variant={EmptyStateVariant.full}>\n                    <EmptyStateIcon icon={SearchIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      No alerts found\n                    </Title>\n                    <EmptyStateBody>\n                      There are currently no critical alerts firing. There may be firing alerts of other severities or\n                      silenced critical alerts however.\n                    </EmptyStateBody>\n                    <EmptyStatePrimary>\n                      <Button variant=\"link\">Action</Button>\n                    </EmptyStatePrimary>\n                  </EmptyState>\n                </NotificationDrawerList>\n              </NotificationDrawerGroup>\n            </NotificationDrawerGroupList>\n          )}\n          {!showNotifications && (\n            <EmptyState variant={EmptyStateVariant.full}>\n              <EmptyStateIcon icon={SearchIcon} />\n              <Title headingLevel=\"h2\" size=\"lg\">\n                No alerts found\n              </Title>\n              <EmptyStateBody>\n                There are currently no alerts. There may be silenced critical alerts however.\n              </EmptyStateBody>\n              <EmptyStatePrimary>\n                <Button variant=\"link\">Action</Button>\n              </EmptyStatePrimary>\n            </EmptyState>\n          )}\n        </NotificationDrawerBody>\n      </NotificationDrawer>\n    );\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          notificationDrawer={notificationDrawer}\n          isNotificationDrawerExpanded={isDrawerExpanded}\n          onNotificationDrawerExpand={this.focusDrawer}\n          skipToContent={PageSkipToContent}\n          breadcrumb={PageBreadcrumb}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of its relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection variant={PageSectionVariants.light} noPadding={true}>\n            Panel section content\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}","title":"Grouped","lang":"js","isFullscreen":true}}>
      
      <p {...{"className":"ws-p"}}>
        {`When using the NotificationDrawerGroupList and related components, the function that is passed in to the `}
        
        <code {...{"className":"ws-code"}}>
          {`onNotificationDrawerExpand`}
        </code>
        {` prop on the Page component must also ensure the NotificationDrawer component only receives focus when it is initially opened. Otherwise any time a drawer group item is opened the NotificationDrawer component will receive focus, which would be unexpected behavior for users.`}
      </p>
    </Example>
};

const Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"id":"demos","size":"h2","className":"ws-title ws-h2"}}>
      {`Demos`}
    </AutoLinkHeader>
    <ul {...{"className":"ws-ul"}}>
      <li {...{"className":"ws-li"}}>
        <p {...{"className":"ws-p"}}>
          {`Focus must be manually managed when the NotificationDrawer component is opened:`}
        </p>
        <ol {...{"className":"ws-ol"}}>
          <li {...{"className":"ws-li"}}>
            {`Create a React `}
            <code {...{"className":"ws-code"}}>
              {`ref`}
            </code>
            {` and pass it into the NotificationDrawer component's `}
            <code {...{"className":"ws-code"}}>
              {`ref`}
            </code>
            {` attribute`}
          </li>
          <li {...{"className":"ws-li"}}>
            {`Pass in a function to the `}
            <code {...{"className":"ws-code"}}>
              {`onNotificationDrawerExpand`}
            </code>
            {` prop of the Page component that will place focus on the first interact-able element inside the NotificationDrawer component via the previously created `}
            <code {...{"className":"ws-code"}}>
              {`ref`}
            </code>
          </li>
        </ol>
      </li>
    </ul>
    {React.createElement(pageData.examples["Basic"])}
    {React.createElement(pageData.examples["Grouped"])}
  </React.Fragment>
);
Component.displayName = 'ComponentsNotificationDrawerReactDemosDocs';
Component.pageData = pageData;

export default Component;
