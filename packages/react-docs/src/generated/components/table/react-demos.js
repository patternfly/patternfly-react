import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import { Checkbox, PageSection, ToolbarExpandIconWrapper, ToolbarContent } from '@patternfly/react-core';
import CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';
import CloneIcon from '@patternfly/react-icons/dist/esm/icons/clone-icon';
import CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';
import CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';
import CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';
import EditIcon from '@patternfly/react-icons/dist/esm/icons/edit-icon';
import FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';
import SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';
import SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';
import SyncIcon from '@patternfly/react-icons/dist/esm/icons/sync-icon';
import ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';
import CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';
import HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';
import QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';
import globalDangerColor200 from '@patternfly/react-tokens/dist/esm/global_danger_color_200';
import imgBrand from '@patternfly/react-core/src/components/Brand/examples/pfLogo.svg';
import imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';
import AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';
import AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';
import BarsIcon from '@patternfly/react-icons/dist/esm/icons/bars-icon';
import AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';
import DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';
import srcImportbulkselect from './react-demos/bulk-select.png';
import srcImportcompact from './react-demos/compact.png';
import srcImportcompoundexpansion from './react-demos/compound-expansion.png';
import srcImportexpandcollapseall from './react-demos/expandcollapse-all.png';
import srcImportloading from './react-demos/loading.png';
import srcImportsortableresponsive from './react-demos/sortable---responsive.png';
import srcImportstickyheader from './react-demos/sticky-header.png';
const pageData = {
  "id": "Table",
  "section": "components",
  "source": "react-demos",
  "slug": "/components/table/react-demos",
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/main/packages/react-table/src/demos/Table.md",
  "fullscreenExamples": [
    "Bulk select",
    "Expand/collapse all",
    "Compact",
    "Compound expansion",
    "Sortable - responsive",
    "Sticky header",
    "Sticky first column",
    "Empty",
    "Loading",
    "Error"
  ],
  "examples": [
    "Column management",
    "Column management with draggable",
    "Filterable",
    "Automatic pagination",
    "Pagination"
  ]
};
pageData.liveContext = {
  Checkbox,
  PageSection,
  ToolbarExpandIconWrapper,
  ToolbarContent,
  CheckIcon,
  CloneIcon,
  CodeIcon,
  CodeBranchIcon,
  CubeIcon,
  EditIcon,
  FilterIcon,
  SortAmountDownIcon,
  SearchIcon,
  SyncIcon,
  ExclamationCircleIcon,
  CogIcon,
  HelpIcon,
  QuestionCircleIcon,
  globalDangerColor200,
  imgBrand,
  imgAvatar,
  AngleDownIcon,
  AngleRightIcon,
  BarsIcon,
  AttentionBellIcon,
  DashboardWrapper
};
pageData.examples = {
  'Bulk select': props => 
    <Example {...pageData} {...props} thumbnail={srcImportbulkselect} {...{"code":"import React from 'react';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n  PageSection,\n  Pagination,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\n\nclass BulkSelectTableDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      res: [],\n      perPage: 20,\n      page: 1,\n      error: null,\n      loading: true,\n      selectedItems: [],\n      numSelected: 0,\n      isDropDownOpen: false,\n      isKebabOpen: false,\n      searchValue: ''\n    };\n\n    this.onSelect = (event, isSelected, rowId) => {\n      const { selectedItems } = this.state;\n      const rows = [...this.state.res];\n      const id = rows[rowId].id;\n      rows[rowId].selected = isSelected;\n      this.setState((prevState, props) => {\n        return {\n          res: rows,\n          selectedItems: isSelected\n            ? [...prevState.selectedItems, id]\n            : prevState.selectedItems.filter(itemId => itemId !== id)\n        };\n      });\n    };\n\n    this.updateSelected = () => {\n      const { res, selectedItems } = this.state;\n      let rows = res.map(post => {\n        post.selected = selectedItems.includes(post.id);\n        return post;\n      });\n\n      this.setState({\n        res: rows\n      });\n    };\n\n    this.handleSelectClick = newState => {\n      if (newState === 'none') {\n        this.setState(\n          {\n            selectedItems: []\n          },\n          this.updateSelected\n        );\n      } else if (newState === 'page') {\n        let newRows = [];\n        let rows = this.state.res.map(post => {\n          const isSelected = post.selected;\n          newRows = isSelected ? [...newRows] : [...newRows, post.id];\n          post.selected = true;\n          return post;\n        });\n\n        this.setState((prevState, props) => {\n          return {\n            selectedItems: prevState.selectedItems.concat(newRows)\n          };\n        }, this.updateSelected);\n      } else {\n        let newRows = [];\n        for (var i = 1; i <= 100; i++) newRows = [...newRows, i];\n\n        this.setState(\n          {\n            selectedItems: newRows\n          },\n          this.updateSelected\n        );\n      }\n    };\n\n    this.onDropDownToggle = isOpen => {\n      this.setState({\n        isDropDownOpen: isOpen\n      });\n    };\n\n    this.onDropDownSelect = event => {\n      this.setState((prevState, props) => {\n        return { isDropDownOpen: !prevState.isDropDownOpen };\n      });\n    };\n  }\n\n  fetch(page, perPage) {\n    this.setState({ loading: true });\n    fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=${perPage}`)\n      .then(resp => resp.json())\n      .then(resp => this.setState({ res: resp, perPage, page, loading: false }))\n      .then(() => this.updateSelected())\n      .catch(err => this.setState({ error: err, loading: false }));\n  }\n\n  componentDidMount() {\n    this.fetch(this.state.page, this.state.perPage);\n  }\n\n  renderPagination(variant) {\n    const { page, perPage } = this.state;\n    return (\n      <Pagination\n        isCompact\n        itemCount={100}\n        page={page}\n        perPage={perPage}\n        onSetPage={(_evt, value) => {\n          this.fetch(value, perPage);\n        }}\n        onPerPageSelect={(_evt, value) => {\n          this.fetch(1, value);\n        }}\n        variant={variant}\n        titles={{\n          paginationTitle: `${variant} pagination`\n        }}\n      />\n    );\n  }\n\n  buildSelectDropdown() {\n    const { isDropDownOpen, selectedItems } = this.state;\n    const numSelected = selectedItems.length;\n    const allSelected = numSelected === 100;\n    const anySelected = numSelected > 0;\n    const someChecked = anySelected ? null : false;\n    const isChecked = allSelected ? true : someChecked;\n\n    const items = [\n      <DropdownItem key=\"item-1\" onClick={() => this.handleSelectClick('none')}>\n        Select none (0 items)\n      </DropdownItem>,\n      <DropdownItem key=\"item-2\" onClick={() => this.handleSelectClick('page')}>\n        Select page ({this.state.perPage} items)\n      </DropdownItem>,\n      <DropdownItem key=\"item-3\" onClick={() => this.handleSelectClick('all')}>\n        Select all (100 items)\n      </DropdownItem>\n    ];\n\n    return (\n      <Dropdown\n        onSelect={this.onDropDownSelect}\n        position={DropdownPosition.left}\n        toggle={\n          <DropdownToggle\n            splitButtonItems={[\n              <DropdownToggleCheckbox\n                id=\"example-checkbox-2\"\n                key=\"split-checkbox\"\n                aria-label={anySelected ? 'Deselect all' : 'Select all'}\n                isChecked={isChecked}\n                onClick={() => {\n                  anySelected ? this.handleSelectClick('none') : this.handleSelectClick('all');\n                }}\n              ></DropdownToggleCheckbox>\n            ]}\n            onToggle={this.onDropDownToggle}\n          >\n            {numSelected !== 0 && <React.Fragment>{numSelected} selected</React.Fragment>}\n          </DropdownToggle>\n        }\n        isOpen={isDropDownOpen}\n        dropdownItems={items}\n      />\n    );\n  }\n\n  renderToolbar() {\n    return (\n      <React.Fragment>\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarGroup>\n              <ToolbarItem variant=\"bulk-select\">{this.buildSelectDropdown()}</ToolbarItem>\n            </ToolbarGroup>\n            <ToolbarItem variant=\"pagination\">{this.renderPagination('top')}</ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const { loading, res } = this.state;\n    const rows = res.map(post => ({\n      cells: [post.title, post.body],\n      selected: post.selected\n    }));\n\n    return (\n      <DashboardWrapper hasPageTemplateTitle>\n        <PageSection isWidthLimited>\n          {this.renderToolbar()}\n          {!loading && (\n            <Table\n              aria-label=\"Bulk Select Table Demo\"\n              cells={['Title', 'Body']}\n              rows={rows}\n              onSelect={this.onSelect}\n              canSelectAll={false}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          )}\n\n          {loading && (\n            <div className=\"pf-l-bullseye\">\n              <Title headingLevel=\"h2\" size=\"3xl\">\n                Please wait while loading data\n              </Title>\n            </div>\n          )}\n          {this.renderPagination('bottom')}\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Bulk select","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Expand/collapse all': props => 
    <Example {...pageData} {...props} thumbnail={srcImportexpandcollapseall} {...{"code":"import React from 'react';\nimport { Card, PageSection, Table, TableHeader, TableBody, expandable } from '@patternfly/react-table';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ExpandCollapseAllTableDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: false,\n      selectedRows: 0,\n      expandedRows: 0,\n      expandCollapseToggle: 'expand',\n      collapseAllAriaLabel: 'Expand all',\n      columns: [\n        {\n          title: 'Repositories',\n          cellFormatters: [expandable]\n        },\n        'Branches',\n        'Pull requests',\n        'Workspaces',\n        'Last Commit'\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'three', 'four', 'five']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 1', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 1,\n          cells: ['child - 1']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 2', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 3,\n          cells: ['child - 2']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 3', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 5,\n          cells: ['child - 3']\n        }\n      ]\n    };\n    this.onCollapse = this.onCollapse.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n  }\n\n  onCollapse(event, rowIndex, isOpen) {\n    const { rows, expandedRows, expandCollapseToggle } = this.state;\n    const expandableRowLength = this.state.rows.filter(row => row.isOpen !== undefined).length;\n    /**\n     * Please do not use rowKey as row index for more complex tables.\n     * Rather use some kind of identifier like ID passed with each row.\n     */\n    const collapseAll = rowIndex === undefined;\n    let newRows = Array.from(rows);\n    let newExpandedRows = expandedRows;\n    if (collapseAll) {\n      newRows = newRows.map(r => (r.isOpen === undefined ? r : { ...r, isOpen }));\n      newExpandedRows = isOpen ? expandableRowLength : 0;\n    } else {\n      newRows[rowIndex] = { ...newRows[rowIndex], isOpen };\n      newExpandedRows = isOpen ? newExpandedRows + 1 : newExpandedRows - 1;\n    }\n    let toggle = expandCollapseToggle;\n    if (newExpandedRows === expandableRowLength) {\n      toggle = 'collapse';\n    } else if (newExpandedRows === 0) {\n      toggle = 'expand';\n    }\n    this.setState({\n      rows: newRows,\n      expandedRows: newExpandedRows,\n      expandCollapseToggle: toggle,\n      collapseAllAriaLabel: toggle === 'expand' ? 'Expand All' : 'Collapse All'\n    });\n  }\n\n  onSelect(event, isSelected, rowId) {\n    let isChecked = null;\n    let selectedRows = this.state.selectedRows;\n    const selectableRowLength = this.state.rows.filter(row => row.parent === undefined).length;\n    let rows;\n    if (rowId === -1) {\n      rows = this.state.rows.map(row => {\n        row.selected = isSelected;\n        return row;\n      });\n      isChecked = isSelected;\n      selectedRows = isSelected ? selectableRowLength : 0;\n    } else {\n      rows = [...this.state.rows];\n      rows[rowId] = { ...rows[rowId], selected: isSelected };\n      selectedRows = isSelected ? selectedRows + 1 : selectedRows - 1;\n      if (selectedRows === 0) {\n        isChecked = false;\n      } else if (selectedRows === selectableRowLength) {\n        isChecked = true;\n      }\n    }\n    this.setState({\n      rows,\n      isChecked,\n      selectedRows\n    });\n  }\n\n  render() {\n    const { columns, rows, collapseAllAriaLabel } = this.state;\n\n    return (\n      <React.Fragment>\n        <DashboardWrapper hasPageTemplateTitle>\n          <PageSection\n            padding={{\n              default: 'noPadding',\n              xl: 'padding'\n            }}\n          >\n            <Card component=\"div\">\n              <Table\n                aria-label=\"Collapsible table\"\n                onSelect={this.onSelect}\n                onCollapse={this.onCollapse}\n                rows={rows}\n                cells={columns}\n                canSelectAll={false}\n                canCollapseAll={true}\n                collapseAllAriaLabel={collapseAllAriaLabel}\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n            </Card>\n          </PageSection>\n        </DashboardWrapper>\n      </React.Fragment>\n    );\n  }\n}\n","title":"Expand/collapse all","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Compact': props => 
    <Example {...pageData} {...props} thumbnail={srcImportcompact} {...{"code":"import React from 'react';\nimport {\n  Button,\n  Card,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  Pagination,\n  Select,\n  SelectVariant,\n  SelectOption,\n  PageSection\n} from '@patternfly/react-core';\nimport { TableComposable, Thead, Tr, Th, Tbody, Td, ActionsColumn } from '@patternfly/react-table';\n\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\n\nexport const ComposableTable = () => {\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n\n  const columns = ['Contributor', 'Position', 'Location', 'Last seen', 'Numbers', 'Icons'];\n  const rows = [\n    ['Sam Jones', 'CSS guru', 'Not too sure', 'May 9, 2018', '0556'],\n    ['Amy Miller', 'Visual design', 'Raleigh', 'May 9, 2018', '9492'],\n    ['Steve Wilson', 'Visual design lead', 'Westford', 'May 9, 2018', '9929'],\n    ['Emma Jackson', 'Interaction design', 'Westford', 'May 9, 2018', '2217']\n  ];\n\n  const defaultActions = () => [\n    {\n      title: 'Settings',\n      // eslint-disable-next-line no-console\n      onClick: () => console.log(`clicked on Settings`)\n    },\n    {\n      title: 'Help',\n      // eslint-disable-next-line no-console\n      onClick: () => console.log(`clicked on Help`)\n    }\n  ];\n  const renderPagination = (variant, isCompact) => (\n    <Pagination\n      isCompact={isCompact}\n      itemCount={36}\n      page={1}\n      perPage={10}\n      variant={variant}\n      titles={{\n        paginationTitle: `${variant} pagination`\n      }}\n    />\n  );\n\n  const tableToolbar = (\n    <Toolbar usePageInsets id=\"compact-toolbar\">\n      <ToolbarContent>\n        <ToolbarItem>\n          <Select\n            id=\"select-example\"\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            placeholderText={\n              <>\n                <FilterIcon /> Status\n              </>\n            }\n            isOpen={isSelectOpen}\n            onToggle={() => setIsSelectOpen(!isSelectOpen)}\n            onSelect={() => setIsSelectOpen(!isSelectOpen)}\n          >\n            {[\n              <SelectOption key={0} value=\"Debug\" />,\n              <SelectOption key={1} value=\"Info\" />,\n              <SelectOption key={2} value=\"Warn\" />,\n              <SelectOption key={3} value=\"Error\" />\n            ]}\n          </Select>\n        </ToolbarItem>\n        <ToolbarGroup>\n          <ToolbarItem>\n            <Button variant=\"primary\">Action</Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarItem variant=\"pagination\">{renderPagination('top', true)}</ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n\n  return (\n    <React.Fragment>\n      <DashboardWrapper hasPageTemplateTitle>\n        <PageSection isFilled>\n          <Card>\n            {tableToolbar}\n            <TableComposable variant=\"compact\" aria-label=\"Sortable Table\">\n              <Thead>\n                <Tr>\n                  {columns.map((column, columnIndex) => (\n                    <Th key={columnIndex}>{column}</Th>\n                  ))}\n                </Tr>\n              </Thead>\n              <Tbody>\n                {rows.map((row, rowIndex) => (\n                  <Tr key={rowIndex}>\n                    <>\n                      <Td dataLabel={columns[0]}>{row[0]}</Td>\n                      <Td dataLabel={columns[1]}>{row[1]}</Td>\n                      <Td dataLabel={columns[2]}>{row[2]}</Td>\n                      <Td dataLabel={columns[3]}>{row[3]}</Td>\n                      <Td dataLabel={columns[4]}>{row[4]}</Td>\n                      <Td dataLabel={columns[5]}>\n                        <CheckIcon key=\"icon\" />\n                      </Td>\n                      <Td dataLabel={'Action'}>\n                        <a href=\"#\">Action link</a>\n                      </Td>\n                      <Td isActionCell>\n                        <ActionsColumn items={defaultActions()} />\n                      </Td>\n                    </>\n                  </Tr>\n                ))}\n              </Tbody>\n            </TableComposable>\n            {renderPagination('bottom', false)}\n          </Card>\n        </PageSection>\n      </DashboardWrapper>\n    </React.Fragment>\n  );\n};\n","title":"Compact","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Compound expansion': props => 
    <Example {...pageData} {...props} thumbnail={srcImportcompoundexpansion} {...{"code":"import React from 'react';\nimport {\n  ActionsColumn,\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ExpandableRowContent\n} from '@patternfly/react-table';\nimport {\n  Button,\n  Card,\n  Flex,\n  FlexItem,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  Pagination,\n  Select,\n  SelectVariant,\n  SelectOption,\n  PageSection\n} from '@patternfly/react-core';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\n\nexport const CompoundExpandable = () => {\n  // In real usage, this data would come from some external source like an API via props.\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n\n  const NestedItemsTable = () => {\n    // In real usage, this data would come from some external source like an API via props.\n    const items = [\n      { description: 'Item 1', date: 'May 9, 2018', status: 'Active' },\n      { description: 'Item 2', date: 'May 9, 2018', status: 'Warning' },\n      { description: 'Item 3', date: 'May 9, 2018', status: 'Active' },\n      { description: 'Item 4', date: 'May 9, 2018', status: 'Active' },\n      { description: 'Item 5', date: 'May 9, 2018', status: 'Active' }\n    ];\n\n    const columnNames = {\n      description: 'Description',\n      date: 'Date',\n      status: 'Status'\n    };\n\n    return (\n      <TableComposable borders={false} aria-label=\"Nested table\" variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th>{columnNames.description}</Th>\n            <Th>{columnNames.date}</Th>\n            <Th>{columnNames.status}</Th>\n            <Th />\n          </Tr>\n        </Thead>\n        <Tbody>\n          {items.map(item => (\n            <Tr key={item.name}>\n              <Td dataLabel={columnNames.description}>{item.description}</Td>\n              <Td dataLabel={columnNames.date}>{item.date}</Td>\n              <Td dataLabel={columnNames.status}>{item.status}</Td>\n              <Td isActionCell>\n                <ActionsColumn items={defaultActions()} />\n              </Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    );\n  };\n\n  const renderPagination = (variant, isCompact) => (\n    <Pagination\n      isCompact={isCompact}\n      itemCount={36}\n      page={1}\n      perPage={10}\n      variant={variant}\n      titles={{\n        paginationTitle: `${variant} pagination`\n      }}\n    />\n  );\n\n  const tableToolbar = (\n    <Toolbar id=\"compact-toolbar\" usePageInsets>\n      <ToolbarContent>\n        <ToolbarItem>\n          <Select\n            id=\"select-example\"\n            variant={SelectVariant.single}\n            aria-label=\"Select Input\"\n            placeholderText={\n              <>\n                <FilterIcon /> Status\n              </>\n            }\n            isOpen={isSelectOpen}\n            onToggle={() => setIsSelectOpen(!isSelectOpen)}\n            onSelect={() => setIsSelectOpen(!isSelectOpen)}\n          >\n            {[\n              <SelectOption key={0} value=\"Debug\" />,\n              <SelectOption key={1} value=\"Info\" />,\n              <SelectOption key={2} value=\"Warn\" />,\n              <SelectOption key={3} value=\"Error\" />\n            ]}\n          </Select>\n        </ToolbarItem>\n        <ToolbarGroup>\n          <ToolbarItem>\n            <Button variant=\"primary\">Action</Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarItem variant=\"pagination\">{renderPagination('top', true)}</ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n\n  const defaultActions = () => [\n    {\n      title: 'Settings',\n      // eslint-disable-next-line no-console\n      onClick: () => console.log(`clicked on Settings`)\n    },\n    {\n      title: 'Help',\n      // eslint-disable-next-line no-console\n      onClick: () => console.log(`clicked on Help`)\n    }\n  ];\n\n  const repositories = [\n    {\n      name: 'siemur/test-space',\n      branches: 10,\n      prs: 4,\n      workspaces: 4,\n      lastCommit: '20 minutes'\n    },\n    { name: 'siemur/test-space-2', branches: 3, prs: 4, workspaces: 4, lastCommit: '20 minutes' }\n  ];\n\n  const columnNames = {\n    name: 'Repositories',\n    branches: 'Branches',\n    prs: 'Pull requests',\n    workspaces: 'Workspaces',\n    lastCommit: 'Last commit'\n  };\n\n  // In this example, expanded cells are tracked by the repo and property names from each row. This could be any pair of unique identifiers.\n  // This is to prevent state from being based on row and column order index in case we later add sorting and rearranging columns.\n  // Note that this behavior is very similar to selection state.\n  const [expandedCells, setExpandedCells] = React.useState({\n    'siemur/test-space': 'branches' // Default to the first cell of the first row being expanded\n  });\n  const setCellExpanded = (repo, columnKey, isExpanding = true) => {\n    const newExpandedCells = { ...expandedCells };\n    if (isExpanding) {\n      newExpandedCells[repo.name] = columnKey;\n    } else {\n      delete newExpandedCells[repo.name];\n    }\n    setExpandedCells(newExpandedCells);\n  };\n  const compoundExpandParams = (repo, columnKey) => ({\n    isExpanded: expandedCells[repo.name] === columnKey,\n    onToggle: () => setCellExpanded(repo, columnKey, expandedCells[repo.name] !== columnKey)\n  });\n\n  return (\n    <DashboardWrapper hasPageTemplateTitle>\n      <PageSection padding={{ default: 'noPadding', xl: 'padding' }}>\n        <Card>\n          {tableToolbar}\n          <TableComposable aria-label=\"Compound expandable table\">\n            <Thead>\n              <Tr>\n                <Th>{columnNames.name}</Th>\n                <Th>{columnNames.branches}</Th>\n                <Th>{columnNames.prs}</Th>\n                <Th>{columnNames.workspaces}</Th>\n                <Th>{columnNames.lastCommit}</Th>\n                <Th />\n              </Tr>\n            </Thead>\n            {repositories.map(repo => {\n              const expandedCellKey = expandedCells[repo.name];\n              const isRowExpanded = !!expandedCellKey;\n              return (\n                <Tbody key={repo.name} isExpanded={isRowExpanded}>\n                  <Tr>\n                    <Td dataLabel={columnNames.name} component=\"th\">\n                      <a href=\"#\">{repo.name}</a>\n                    </Td>\n                    <Td dataLabel={columnNames.branches} compoundExpand={compoundExpandParams(repo, 'branches')}>\n                      <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                        <FlexItem>\n                          <CodeBranchIcon key=\"icon\" />\n                        </FlexItem>\n                        <FlexItem>{repo.branches}</FlexItem>\n                      </Flex>\n                    </Td>\n                    <Td dataLabel={columnNames.prs} compoundExpand={compoundExpandParams(repo, 'prs')}>\n                      <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                        <FlexItem>\n                          <CodeIcon key=\"icon\" />\n                        </FlexItem>\n                        <FlexItem>{repo.prs}</FlexItem>\n                      </Flex>{' '}\n                    </Td>\n                    <Td dataLabel={columnNames.workspaces} compoundExpand={compoundExpandParams(repo, 'workspaces')}>\n                      <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                        <FlexItem>\n                          <CubeIcon key=\"icon\" />\n                        </FlexItem>\n                        <FlexItem>{repo.workspaces}</FlexItem>\n                      </Flex>\n                    </Td>\n                    <Td dataLabel={columnNames.lastCommit}>{repo.lastCommit}</Td>\n                    <Td>\n                      <a href=\"#\">Open in GitHub</a>\n                    </Td>\n                    <Td isActionCell>\n                      <ActionsColumn items={defaultActions()} />\n                    </Td>\n                  </Tr>\n                  {isRowExpanded ? (\n                    <Tr isExpanded={isRowExpanded}>\n                      <Td dataLabel={columnNames[expandedCellKey]} noPadding colSpan={7}>\n                        {expandedCellKey === 'branches' && repo.name === 'siemur/test-space' ? (\n                          <NestedItemsTable />\n                        ) : (\n                          <ExpandableRowContent>\n                            <div className=\"pf-u-m-md\">\n                              Expanded content for {repo.name}: {expandedCellKey} goes here!\n                            </div>\n                          </ExpandableRowContent>\n                        )}\n                      </Td>\n                    </Tr>\n                  ) : null}\n                </Tbody>\n              );\n            })}\n          </TableComposable>\n          {renderPagination('bottom', false)}\n        </Card>\n      </PageSection>\n    </DashboardWrapper>\n  );\n};\n","title":"Compound expansion","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Column management': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Button,\n  DataList,\n  DataListCheck,\n  DataListItem,\n  DataListItemRow,\n  DataListCell,\n  DataListItemCells,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Modal,\n  OverflowMenu,\n  OverflowMenuGroup,\n  OverflowMenuItem,\n  OptionsMenu,\n  OptionsMenuToggle,\n  Pagination,\n  PaginationVariant,\n  Text,\n  TextContent,\n  Select,\n  SelectVariant\n} from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\n\nclass ColumnManagementAction extends React.Component {\n  constructor(props) {\n    super(props);\n    this.actions = [\n      {\n        title: <a href=\"#\">Link</a>\n      },\n      {\n        title: 'Action'\n      },\n      {\n        isSeparator: true\n      },\n      {\n        title: <a href=\"#\">Separated link</a>\n      }\n    ];\n    this.defaultColumns = ['Repositories', 'Branches', 'Pull requests', 'Workspaces', 'Last commit', ''];\n    this.defaultRows = [\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 1</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 10\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 25\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 5\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '2 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      },\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 2</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 8\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 30\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 2\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '2 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      },\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 3</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 12\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 48\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 13\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '30 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      },\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 4</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 3\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 8\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 20\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '8 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      },\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 5</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 34\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 21\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 26\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '2 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      }\n    ];\n    this.state = {\n      filters: [],\n      filteredColumns: [],\n      filteredRows: [],\n      columns: this.defaultColumns,\n      rows: this.defaultRows,\n      canSelectAll: true,\n      isModalOpen: false,\n      check1: true,\n      check2: true,\n      check3: true,\n      check4: true,\n      check5: true\n    };\n    this.onSelect = this.onSelect.bind(this);\n    this.toggleSelect = this.toggleSelect.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.matchCheckboxNameToColumn = name => {\n      switch (name) {\n        case 'check1':\n          return 'Repositories';\n        case 'check2':\n          return 'Branches';\n        case 'check3':\n          return 'Pull requests';\n        case 'check4':\n          return 'Workspaces';\n        case 'check5':\n          return 'Last commit';\n      }\n    };\n    this.filterData = (checked, name) => {\n      const { rows, columns, filters } = this.state;\n      if (checked) {\n        const updatedFilters = filters.filter(item => item !== name);\n        const filteredColumns = this.defaultColumns.filter(column => !updatedFilters.includes(column));\n        const filteredRows = this.defaultRows.map(({ ...row }) => {\n          row.cells = row.cells.filter(cell => !updatedFilters.includes(cell.props.column));\n          return row;\n        });\n        this.setState({\n          filters: updatedFilters,\n          filteredColumns: filteredColumns,\n          filteredRows: filteredRows\n        });\n      } else {\n        let updatedFilters = filters;\n        updatedFilters.push(name);\n        const filteredColumns = columns.filter(column => !filters.includes(column));\n        const filteredRows = rows.map(({ ...row }) => {\n          row.cells = row.cells.filter(cell => !filters.includes(cell.props.column));\n          return row;\n        });\n        this.setState({\n          filters: updatedFilters,\n          filteredColumns: filteredColumns,\n          filteredRows: filteredRows\n        });\n      }\n    };\n    this.unfilterAllData = () => {\n      this.setState({\n        filters: [],\n        filteredColumns: this.defaultColumns,\n        filteredRows: this.defaultRows\n      });\n    };\n    this.handleChange = (checked, event) => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      this.filterData(checked, this.matchCheckboxNameToColumn(target.name));\n      this.setState({\n        [target.name]: value\n      });\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n    this.onSave = () => {\n      this.setState(({ filteredColumns, filteredRows, isModalOpen }) => ({\n        columns: filteredColumns,\n        rows: filteredRows,\n        isModalOpen: !isModalOpen\n      }));\n    };\n    this.selectAllColumns = () => {\n      this.unfilterAllData();\n      this.setState({\n        check1: true,\n        check2: true,\n        check3: true,\n        check4: true,\n        check5: true\n      });\n    };\n  }\n\n  onSelect(event, isSelected, rowId) {\n    let rows;\n    if (rowId === -1) {\n      rows = this.state.rows.map(oneRow => {\n        oneRow.selected = isSelected;\n        return oneRow;\n      });\n    } else {\n      rows = [...this.state.rows];\n      rows[rowId] = { ...rows[rowId], selected: isSelected };\n    }\n    this.setState({\n      rows\n    });\n  }\n\n  toggleSelect(checked) {\n    this.setState({\n      canSelectAll: checked\n    });\n  }\n\n  renderModal() {\n    const { isModalOpen } = this.state;\n    return (\n      <Modal\n        title=\"Manage columns\"\n        isOpen={isModalOpen}\n        variant=\"small\"\n        description={\n          <TextContent>\n            <Text component={TextVariants.p}>Selected categories will be displayed in the table.</Text>\n            <Button isInline onClick={this.selectAllColumns} variant=\"link\">\n              Select all\n            </Button>\n          </TextContent>\n        }\n        onClose={this.handleModalToggle}\n        actions={[\n          <Button key=\"save\" variant=\"primary\" onClick={this.onSave}>\n            Save\n          </Button>,\n          <Button key=\"cancel\" variant=\"secondary\" onClick={this.handleModalToggle}>\n            Cancel\n          </Button>\n        ]}\n      >\n        <DataList aria-label=\"Table column management\" id=\"table-column-management\" isCompact>\n          <DataListItem aria-labelledby=\"table-column-management-item1\">\n            <DataListItemRow>\n              <DataListCheck\n                aria-labelledby=\"table-column-management-item1\"\n                checked={this.state.check1}\n                name=\"check1\"\n                id=\"check1\"\n                onChange={this.handleChange}\n              />\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item1\" key=\"table-column-management-item1\">\n                    <label htmlFor=\"check1\">Repositories</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-labelledby=\"table-column-management-item2\">\n            <DataListItemRow>\n              <DataListCheck\n                aria-labelledby=\"table-column-management-item2\"\n                checked={this.state.check2}\n                name=\"check2\"\n                id=\"check2\"\n                onChange={this.handleChange}\n              />\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item2\" key=\"table-column-management-item2\">\n                    <label htmlFor=\"check2\">Branches</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-labelledby=\"table-column-management-item3\">\n            <DataListItemRow>\n              <DataListCheck\n                aria-labelledby=\"table-column-management-item3\"\n                checked={this.state.check3}\n                name=\"check3\"\n                id=\"check3\"\n                onChange={this.handleChange}\n              />\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item3\" key=\"table-column-management-item3\">\n                    <label htmlFor=\"check3\">Pull requests</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-labelledby=\"table-column-management-item4\">\n            <DataListItemRow>\n              <DataListCheck\n                aria-labelledby=\"table-column-management-item4\"\n                checked={this.state.check4}\n                name=\"check4\"\n                id=\"check4\"\n                onChange={this.handleChange}\n              />\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item4\" key=\"table-column-management-item4\">\n                    <label htmlFor=\"check4\">Workspaces</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-labelledby=\"table-column-management-item5\">\n            <DataListItemRow>\n              <DataListCheck\n                aria-labelledby=\"table-column-management-item5\"\n                checked={this.state.check5}\n                name=\"check5\"\n                id=\"check5\"\n                onChange={this.handleChange}\n              />\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item5\" key=\"table-column-management-item5\">\n                    <label htmlFor=\"check5\">Last commit</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </Modal>\n    );\n  }\n\n  render() {\n    const { canSelectAll, columns, rows } = this.state;\n\n    const toolbarItems = (\n      <React.Fragment>\n        <span id=\"page-layout-table-column-management-action-toolbar-top-select-checkbox-label\" hidden>\n          Choose one\n        </span>\n        <ToolbarContent>\n          <ToolbarItem variant=\"overflow-menu\">\n            <OverflowMenu breakpoint=\"md\">\n              <OverflowMenuItem isPersistent>\n                <Select\n                  id=\"page-layout-table-column-management-action-toolbar-top-select-checkbox-toggle\"\n                  variant={SelectVariant.single}\n                  aria-label=\"Select Input\"\n                  aria-labelledby=\"page-layout-table-column-management-action-toolbar-top-select-checkbox-label page-layout-table-column-management-action-toolbar-top-select-checkbox-toggle\"\n                  placeholderText={\n                    <>\n                      <FilterIcon /> Name\n                    </>\n                  }\n                />\n              </OverflowMenuItem>\n              <OverflowMenuItem>\n                <OptionsMenu\n                  id=\"page-layout-table-column-management-action-toolbar-top-options-menu-toggle\"\n                  isPlain\n                  menuItems={[]}\n                  toggle={\n                    <OptionsMenuToggle\n                      toggleTemplate={<SortAmountDownIcon aria-hidden=\"true\" />}\n                      aria-label=\"Sort by\"\n                      hideCaret\n                    />\n                  }\n                />\n              </OverflowMenuItem>\n              <OverflowMenuGroup groupType=\"button\" isPersistent>\n                <OverflowMenuItem>\n                  <Button variant=\"primary\">Action</Button>\n                </OverflowMenuItem>\n                <OverflowMenuItem>\n                  <Button variant=\"link\" onClick={this.handleModalToggle}>\n                    Manage columns\n                  </Button>\n                </OverflowMenuItem>\n              </OverflowMenuGroup>\n            </OverflowMenu>\n          </ToolbarItem>\n          <ToolbarItem variant=\"pagination\">\n            <Pagination\n              itemCount={37}\n              widgetId=\"pagination-options-menu-bottom\"\n              page={1}\n              variant={PaginationVariant.top}\n              isCompact\n            />\n          </ToolbarItem>\n        </ToolbarContent>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment>\n        <Table\n          gridBreakPoint=\"grid-xl\"\n          header={\n            <React.Fragment>\n              <Toolbar id=\"page-layout-table-column-management-action-toolbar-top\">{toolbarItems}</Toolbar>\n            </React.Fragment>\n          }\n          aria-label=\"This is a table with checkboxes\"\n          id=\"page-layout-table-column-management-action-table\"\n          onSelect={this.onSelect}\n          cells={columns}\n          rows={rows}\n          actions={this.actions}\n          canSelectAll={canSelectAll}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n        <Pagination\n          isCompact\n          id=\"page-layout-table-column-management-action-toolbar-bottom\"\n          itemCount={37}\n          widgetId=\"pagination-options-menu-bottom\"\n          page={1}\n          variant={PaginationVariant.bottom}\n        />\n        {this.renderModal()}\n      </React.Fragment>\n    );\n  }\n}","title":"Column management","lang":"js"}}>
      
    </Example>,
  'Column management with draggable': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Button,\n  DataList,\n  DataListCheck,\n  DataListControl,\n  DataListDragButton,\n  DataListItem,\n  DataListItemRow,\n  DataListCell,\n  DataListItemCells,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Modal,\n  OverflowMenu,\n  OverflowMenuGroup,\n  OverflowMenuItem,\n  OptionsMenu,\n  OptionsMenuToggle,\n  Pagination,\n  PaginationVariant,\n  Text,\n  TextContent,\n  Select,\n  SelectVariant\n} from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\n\nclass ColumnManagementAction extends React.Component {\n  constructor(props) {\n    super(props);\n    this.actions = [\n      {\n        title: <a href=\"#\">Link</a>\n      },\n      {\n        title: 'Action'\n      },\n      {\n        isSeparator: true\n      },\n      {\n        title: <a href=\"#\">Separated link</a>\n      }\n    ];\n    this.defaultColumns = ['Repositories', 'Branches', 'Pull requests', 'Workspaces', 'Last commit', ''];\n    this.defaultRows = [\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 1</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 10\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 25\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 5\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '2 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      },\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 2</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 8\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 30\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 2\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '2 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      },\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 3</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 12\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 48\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 13\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '30 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      },\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 4</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 3\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 8\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 20\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '8 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      },\n      {\n        cells: [\n          {\n            title: (\n              <React.Fragment>\n                <div>Node 5</div>\n                <a href=\"#\">siemur/test-space</a>\n              </React.Fragment>\n            ),\n            props: { column: 'Repositories' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeBranchIcon key=\"icon\" /> 34\n              </React.Fragment>\n            ),\n            props: { column: 'Branches' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CodeIcon key=\"icon\" /> 21\n              </React.Fragment>\n            ),\n            props: { column: 'Pull requests' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <CubeIcon key=\"icon\" /> 26\n              </React.Fragment>\n            ),\n            props: { column: 'Workspaces' }\n          },\n          {\n            title: '2 days ago',\n            props: { column: 'Last commit' }\n          },\n          {\n            title: (\n              <React.Fragment>\n                <a href=\"#\">Action link</a>\n              </React.Fragment>\n            ),\n            props: { column: '' }\n          }\n        ]\n      }\n    ];\n    this.state = {\n      filters: [],\n      filteredColumns: [],\n      filteredRows: [],\n      columns: this.defaultColumns,\n      rows: this.defaultRows,\n      canSelectAll: true,\n      isModalOpen: false,\n      check1: true,\n      check2: true,\n      check3: true,\n      check4: true,\n      check5: true,\n      liveText: '',\n      id: '',\n      itemOrder: ['data1', 'data2', 'data3', 'data4', 'data5']\n    };\n    this.onSelect = this.onSelect.bind(this);\n    this.toggleSelect = this.toggleSelect.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.matchCheckboxNameToColumn = name => {\n      switch (name) {\n        case 'check1':\n          return 'Repositories';\n        case 'check2':\n          return 'Branches';\n        case 'check3':\n          return 'Pull requests';\n        case 'check4':\n          return 'Workspaces';\n        case 'check5':\n          return 'Last commit';\n      }\n    };\n    this.matchDataListNameToColumn = name => {\n      switch (name) {\n        case 'data1':\n          return 'Repositories';\n        case 'data2':\n          return 'Branches';\n        case 'data3':\n          return 'Pull requests';\n        case 'data4':\n          return 'Workspaces';\n        case 'data5':\n          return 'Last commit';\n      }\n    };\n    this.filterData = (checked, name) => {\n      const { rows, columns, filters } = this.state;\n      if (checked) {\n        const updatedFilters = filters.filter(item => item !== name);\n        const filteredColumns = this.defaultColumns.filter(column => !updatedFilters.includes(column));\n        const filteredRows = this.defaultRows.map(({ ...row }) => {\n          row.cells = row.cells.filter(cell => !updatedFilters.includes(cell.props.column));\n          return row;\n        });\n        this.setState({\n          filters: updatedFilters,\n          filteredColumns: filteredColumns,\n          filteredRows: filteredRows\n        });\n      } else {\n        let updatedFilters = filters;\n        updatedFilters.push(name);\n        const filteredColumns = columns.filter(column => !filters.includes(column));\n        const filteredRows = rows.map(({ ...row }) => {\n          row.cells = row.cells.filter(cell => !filters.includes(cell.props.column));\n          return row;\n        });\n        this.setState({\n          filters: updatedFilters,\n          filteredColumns: filteredColumns,\n          filteredRows: filteredRows\n        });\n      }\n    };\n    this.unfilterAllData = () => {\n      this.setState({\n        filters: [],\n        filteredColumns: this.defaultColumns,\n        filteredRows: this.defaultRows\n      });\n    };\n    this.handleChange = (checked, event) => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      this.filterData(checked, this.matchCheckboxNameToColumn(target.name));\n      this.setState({\n        [target.name]: value\n      });\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n    this.onSave = () => {\n      const orderedColumns = this.state.itemOrder.map(item => this.matchDataListNameToColumn(item));\n      // concat empty string at the end for actions column\n      const filteredOrderedColumns = orderedColumns\n        .filter(col => this.state.filteredColumns.indexOf(col) > -1)\n        .concat(['']);\n      const orderedRows = [];\n      this.state.filteredRows.forEach(row => {\n        const updatedCells = row.cells.sort((cellA, cellB) => {\n          const indexA = filteredOrderedColumns.indexOf(cellA.props.column);\n          const indexB = filteredOrderedColumns.indexOf(cellB.props.column);\n          if (indexA < indexB) {\n            return -1;\n          }\n          if (indexA > indexB) {\n            return 1;\n          }\n          // a must be equal to b\n          return 0;\n        });\n        orderedRows.push({\n          cells: updatedCells\n        });\n      });\n      this.setState(({ filteredColumns, filteredRows, isModalOpen }) => ({\n        columns: filteredOrderedColumns,\n        rows: orderedRows,\n        isModalOpen: !isModalOpen\n      }));\n    };\n    this.selectAllColumns = () => {\n      this.unfilterAllData();\n      this.setState({\n        check1: true,\n        check2: true,\n        check3: true,\n        check4: true,\n        check5: true\n      });\n    };\n\n    this.onDragStart = id => {\n      this.setState({\n        id: id,\n        liveText: `Dragging started for item id: ${id}.`\n      });\n    };\n\n    this.onDragMove = (oldIndex, newIndex) => {\n      const { id } = this.state;\n      this.setState({\n        liveText: `Dragging item ${id}.`\n      });\n    };\n\n    this.onDragCancel = () => {\n      this.setState({\n        liveText: `Dragging cancelled. List is unchanged.`\n      });\n    };\n\n    this.onDragFinish = itemOrder => {\n      this.setState({\n        liveText: `Dragging finished`,\n        itemOrder\n      });\n    };\n  }\n\n  onSelect(event, isSelected, rowId) {\n    let rows;\n    if (rowId === -1) {\n      rows = this.state.rows.map(oneRow => {\n        oneRow.selected = isSelected;\n        return oneRow;\n      });\n    } else {\n      rows = [...this.state.rows];\n      rows[rowId] = { ...rows[rowId], selected: isSelected };\n    }\n    this.setState({\n      rows\n    });\n  }\n\n  toggleSelect(checked) {\n    this.setState({\n      canSelectAll: checked\n    });\n  }\n\n  renderModal() {\n    const { isModalOpen } = this.state;\n    return (\n      <Modal\n        title=\"Manage columns\"\n        isOpen={isModalOpen}\n        variant=\"small\"\n        description={\n          <TextContent>\n            <Text component={TextVariants.p}>Selected categories will be displayed in the table.</Text>\n            <Button isInline onClick={this.selectAllColumns} variant=\"link\">\n              Select all\n            </Button>\n          </TextContent>\n        }\n        onClose={this.handleModalToggle}\n        actions={[\n          <Button key=\"save\" variant=\"primary\" onClick={this.onSave}>\n            Save\n          </Button>,\n          <Button key=\"cancel\" variant=\"secondary\" onClick={this.handleModalToggle}>\n            Cancel\n          </Button>\n        ]}\n      >\n        <DataList\n          aria-label=\"Table column management\"\n          id=\"table-column-management\"\n          isCompact\n          onDragFinish={this.onDragFinish}\n          onDragStart={this.onDragStart}\n          onDragMove={this.onDragMove}\n          onDragCancel={this.onDragCancel}\n          itemOrder={this.state.itemOrder}\n        >\n          <DataListItem aria-labelledby=\"table-column-management-item1\" id=\"data1\">\n            <DataListItemRow>\n              <DataListControl>\n                <DataListDragButton\n                  aria-label=\"Reorder\"\n                  aria-labelledby=\"table-column-management-item1\"\n                  aria-describedby=\"Press space or enter to begin dragging, and use the arrow keys to navigate up or down. Press enter to confirm the drag, or any other key to cancel the drag operation.\"\n                  aria-pressed=\"false\"\n                />\n                <DataListCheck\n                  aria-labelledby=\"table-column-management-item1\"\n                  checked={this.state.check1}\n                  name=\"check1\"\n                  id=\"check1\"\n                  onChange={this.handleChange}\n                  otherControls\n                />\n              </DataListControl>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item1\" key=\"table-column-management-item1\">\n                    <label htmlFor=\"check1\">Repositories</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-labelledby=\"table-column-management-item2\" id=\"data2\">\n            <DataListItemRow>\n              <DataListControl>\n                <DataListDragButton\n                  aria-label=\"Reorder\"\n                  aria-labelledby=\"table-column-management-item2\"\n                  aria-describedby=\"Press space or enter to begin dragging, and use the arrow keys to navigate up or down. Press enter to confirm the drag, or any other key to cancel the drag operation.\"\n                  aria-pressed=\"false\"\n                />\n                <DataListCheck\n                  aria-labelledby=\"table-column-management-item2\"\n                  checked={this.state.check2}\n                  name=\"check2\"\n                  id=\"check2\"\n                  onChange={this.handleChange}\n                  otherControls\n                />\n              </DataListControl>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item2\" key=\"table-column-management-item2\">\n                    <label htmlFor=\"check2\">Branches</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-labelledby=\"table-column-management-item3\" id=\"data3\">\n            <DataListItemRow>\n              <DataListControl>\n                <DataListDragButton\n                  aria-label=\"Reorder\"\n                  aria-labelledby=\"table-column-management-item3\"\n                  aria-describedby=\"Press space or enter to begin dragging, and use the arrow keys to navigate up or down. Press enter to confirm the drag, or any other key to cancel the drag operation.\"\n                  aria-pressed=\"false\"\n                />\n                <DataListCheck\n                  aria-labelledby=\"table-column-management-item3\"\n                  checked={this.state.check3}\n                  name=\"check3\"\n                  id=\"check3\"\n                  onChange={this.handleChange}\n                  otherControls\n                />\n              </DataListControl>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item3\" key=\"table-column-management-item3\">\n                    <label htmlFor=\"check3\">Pull requests</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-labelledby=\"table-column-management-item4\" id=\"data4\">\n            <DataListItemRow>\n              <DataListControl>\n                <DataListDragButton\n                  aria-label=\"Reorder\"\n                  aria-labelledby=\"table-column-management-item4\"\n                  aria-describedby=\"Press space or enter to begin dragging, and use the arrow keys to navigate up or down. Press enter to confirm the drag, or any other key to cancel the drag operation.\"\n                  aria-pressed=\"false\"\n                />\n                <DataListCheck\n                  aria-labelledby=\"table-column-management-item4\"\n                  checked={this.state.check4}\n                  name=\"check4\"\n                  id=\"check4\"\n                  onChange={this.handleChange}\n                  otherControls\n                />\n              </DataListControl>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item4\" key=\"table-column-management-item4\">\n                    <label htmlFor=\"check4\">Workspaces</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-labelledby=\"table-column-management-item5\" id=\"data5\">\n            <DataListItemRow>\n              <DataListControl>\n                <DataListDragButton\n                  aria-label=\"Reorder\"\n                  aria-labelledby=\"table-column-management-item5\"\n                  aria-describedby=\"Press space or enter to begin dragging, and use the arrow keys to navigate up or down. Press enter to confirm the drag, or any other key to cancel the drag operation.\"\n                  aria-pressed=\"false\"\n                />\n                <DataListCheck\n                  aria-labelledby=\"table-column-management-item5\"\n                  checked={this.state.check5}\n                  name=\"check5\"\n                  id=\"check5\"\n                  onChange={this.handleChange}\n                  otherControls\n                />\n              </DataListControl>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell id=\"table-column-management-item5\" key=\"table-column-management-item5\">\n                    <label htmlFor=\"check5\">Last commit</label>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </Modal>\n    );\n  }\n\n  render() {\n    const { canSelectAll, columns, rows } = this.state;\n\n    const toolbarItems = (\n      <React.Fragment>\n        <span id=\"page-layout-table-column-management-action-toolbar-top-select-checkbox-label\" hidden>\n          Choose one\n        </span>\n        <ToolbarContent>\n          <ToolbarItem variant=\"overflow-menu\">\n            <OverflowMenu breakpoint=\"md\">\n              <OverflowMenuItem isPersistent>\n                <Select\n                  id=\"page-layout-table-column-management-action-toolbar-top-select-checkbox-toggle\"\n                  variant={SelectVariant.single}\n                  aria-label=\"Select Input\"\n                  aria-labelledby=\"page-layout-table-column-management-action-toolbar-top-select-checkbox-label page-layout-table-column-management-action-toolbar-top-select-checkbox-toggle\"\n                  placeholderText={\n                    <>\n                      <FilterIcon /> Name\n                    </>\n                  }\n                />\n              </OverflowMenuItem>\n              <OverflowMenuItem>\n                <OptionsMenu\n                  id=\"page-layout-table-column-management-action-toolbar-top-options-menu-toggle\"\n                  isPlain\n                  menuItems={[]}\n                  toggle={\n                    <OptionsMenuToggle\n                      toggleTemplate={<SortAmountDownIcon aria-hidden=\"true\" />}\n                      aria-label=\"Sort by\"\n                      hideCaret\n                    />\n                  }\n                />\n              </OverflowMenuItem>\n              <OverflowMenuGroup groupType=\"button\" isPersistent>\n                <OverflowMenuItem>\n                  <Button variant=\"primary\">Action</Button>\n                </OverflowMenuItem>\n                <OverflowMenuItem>\n                  <Button variant=\"link\" onClick={this.handleModalToggle}>\n                    Manage columns\n                  </Button>\n                </OverflowMenuItem>\n              </OverflowMenuGroup>\n            </OverflowMenu>\n          </ToolbarItem>\n          <ToolbarItem variant=\"pagination\">\n            <Pagination\n              itemCount={37}\n              widgetId=\"pagination-options-menu-bottom\"\n              page={1}\n              variant={PaginationVariant.top}\n              isCompact\n            />\n          </ToolbarItem>\n        </ToolbarContent>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment>\n        <Table\n          gridBreakPoint=\"grid-xl\"\n          header={\n            <React.Fragment>\n              <Toolbar id=\"page-layout-table-column-management-action-toolbar-top\">{toolbarItems}</Toolbar>\n            </React.Fragment>\n          }\n          aria-label=\"This is a table with checkboxes\"\n          id=\"page-layout-table-column-management-action-table\"\n          onSelect={this.onSelect}\n          cells={columns}\n          rows={rows}\n          actions={this.actions}\n          canSelectAll={canSelectAll}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n        <Pagination\n          isCompact\n          id=\"page-layout-table-column-management-action-toolbar-bottom\"\n          itemCount={37}\n          widgetId=\"pagination-options-menu-bottom\"\n          page={1}\n          variant={PaginationVariant.bottom}\n        />\n        {this.renderModal()}\n      </React.Fragment>\n    );\n  }\n}","title":"Column management with draggable","lang":"js"}}>
      
    </Example>,
  'Filterable': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Button,\n  Bullseye,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarToggleGroup,\n  ToolbarGroup,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Title,\n  Select,\n  SelectOption,\n  SelectVariant,\n  SearchInput,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nclass FilterTableDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filters: {\n        location: [],\n        name: [],\n        status: []\n      },\n      currentCategory: 'Status',\n      isFilterDropdownOpen: false,\n      isCategoryDropdownOpen: false,\n      nameInput: '',\n      columns: [\n        { title: 'Servers' },\n        { title: 'Threads' },\n        { title: 'Applications' },\n        { title: 'Workspaces' },\n        { title: 'Status' },\n        { title: 'Location' }\n      ],\n      rows: [\n        { cells: ['US-Node 1', '5', '25', '5', 'Stopped', 'Raleigh'] },\n        { cells: ['US-Node 2', '5', '30', '2', 'Down', 'Westford'] },\n        { cells: ['US-Node 3', '13', '35', '12', 'Degraded', 'Boston'] },\n        { cells: ['US-Node 4', '2', '5', '18', 'Needs Maintainence', 'Raleigh'] },\n        { cells: ['US-Node 5', '7', '30', '5', 'Running', 'Boston'] },\n        { cells: ['US-Node 6', '5', '20', '15', 'Stopped', 'Raleigh'] },\n        { cells: ['CZ-Node 1', '12', '48', '13', 'Down', 'Brno'] },\n        { cells: ['CZ-Node 2', '3', '8', '20', 'Running', 'Brno'] },\n        { cells: ['CZ-Remote-Node 1', '15', '20', '10', 'Down', 'Brno'] },\n        { cells: ['Bangalore-Node 1', '20', '30', '30', 'Running', 'Bangalore'] }\n      ],\n      inputValue: ''\n    };\n\n    this.onDelete = (type = '', id = '') => {\n      if (type) {\n        this.setState(prevState => {\n          prevState.filters[type.toLowerCase()] = prevState.filters[type.toLowerCase()].filter(s => s !== id);\n          return {\n            filters: prevState.filters\n          };\n        });\n      } else {\n        this.setState({\n          filters: {\n            location: [],\n            name: [],\n            status: []\n          }\n        });\n      }\n    };\n\n    this.onCategoryToggle = isOpen => {\n      this.setState({\n        isCategoryDropdownOpen: isOpen\n      });\n    };\n\n    this.onCategorySelect = event => {\n      this.setState({\n        currentCategory: event.target.innerText,\n        isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen\n      });\n    };\n\n    this.onFilterToggle = isOpen => {\n      this.setState({\n        isFilterDropdownOpen: isOpen\n      });\n    };\n\n    this.onFilterSelect = event => {\n      this.setState({\n        isFilterDropdownOpen: !this.state.isFilterDropdownOpen\n      });\n    };\n\n    this.onInputChange = newValue => {\n      this.setState({ inputValue: newValue });\n    };\n\n    this.onRowSelect = (event, isSelected, rowId) => {\n      let rows;\n      if (rowId === -1) {\n        rows = this.state.rows.map(oneRow => {\n          oneRow.selected = isSelected;\n          return oneRow;\n        });\n      } else {\n        rows = [...this.state.rows];\n        rows[rowId].selected = isSelected;\n      }\n      this.setState({\n        rows\n      });\n    };\n\n    this.onStatusSelect = (event, selection) => {\n      const checked = event.target.checked;\n      this.setState(prevState => {\n        const prevSelections = prevState.filters['status'];\n        return {\n          filters: {\n            ...prevState.filters,\n            status: checked ? [...prevSelections, selection] : prevSelections.filter(value => value !== selection)\n          }\n        };\n      });\n    };\n\n    this.onNameInput = event => {\n      if (event.key && event.key !== 'Enter') {\n        return;\n      }\n\n      const { inputValue } = this.state;\n      this.setState(prevState => {\n        const prevFilters = prevState.filters['name'];\n        return {\n          filters: {\n            ...prevState.filters,\n            ['name']: prevFilters.includes(inputValue) ? prevFilters : [...prevFilters, inputValue]\n          },\n          inputValue: ''\n        };\n      });\n    };\n\n    this.onLocationSelect = (event, selection) => {\n      this.setState(prevState => {\n        return {\n          filters: {\n            ...prevState.filters,\n            ['location']: [selection]\n          }\n        };\n      });\n      this.onFilterSelect();\n    };\n  }\n\n  buildCategoryDropdown() {\n    const { isCategoryDropdownOpen, currentCategory } = this.state;\n\n    const categoryMenuItems = [\n      <SelectOption key=\"cat1\" value=\"Location\" />,\n      <SelectOption key=\"cat2\" value=\"Name\" />,\n      <SelectOption key=\"cat3\" value=\"Status\" />,\n    ];\n\n    return (\n      <ToolbarItem>\n        <Select\n          onSelect={this.onCategorySelect}\n          selections={currentCategory}\n          position={DropdownPosition.left}\n          onToggle={this.onCategoryToggle}\n          isOpen={isCategoryDropdownOpen}\n          toggleIcon={<FilterIcon />}\n          style={{ width: '100%' }}\n        >\n          {categoryMenuItems}\n        </Select>\n      </ToolbarItem>\n    );\n  }\n\n  buildFilterDropdown() {\n    const { currentCategory, isFilterDropdownOpen, inputValue, filters } = this.state;\n\n    const locationMenuItems = [\n      <SelectOption key=\"raleigh\" value=\"Raleigh\" />,\n      <SelectOption key=\"westford\" value=\"Westford\" />,\n      <SelectOption key=\"boston\" value=\"Boston\" />,\n      <SelectOption key=\"brno\" value=\"Brno\" />,\n      <SelectOption key=\"bangalore\" value=\"Bangalore\" />\n    ];\n\n    const statusMenuItems = [\n      <SelectOption key=\"statusRunning\" value=\"Running\" />,\n      <SelectOption key=\"statusStopped\" value=\"Stopped\" />,\n      <SelectOption key=\"statusDown\" value=\"Down\" />,\n      <SelectOption key=\"statusDegraded\" value=\"Degraded\" />,\n      <SelectOption key=\"statusMaint\" value=\"Needs Maintainence\" />\n    ];\n\n    return (\n      <React.Fragment>\n        <ToolbarFilter\n          chips={filters.location}\n          deleteChip={this.onDelete}\n          categoryName=\"Location\"\n          showToolbarItem={currentCategory === 'Location'}\n        >\n          <Select\n            aria-label=\"Location\"\n            onToggle={this.onFilterToggle}\n            onSelect={this.onLocationSelect}\n            selections={filters.location[0]}\n            isOpen={isFilterDropdownOpen}\n            placeholderText=\"Any\"\n          >\n            {locationMenuItems}\n          </Select>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.name}\n          deleteChip={this.onDelete}\n          categoryName=\"Name\"\n          showToolbarItem={currentCategory === 'Name'}\n        >\n          <SearchInput\n            aria-label=\"name filter\"\n            placeholder=\"Filter by name...\"\n            onChange={this.onInputChange}\n            value={inputValue}\n            onClear={() => {\n              this.onInputChange('');\n            }}\n            onSearch={this.onNameInput}\n          />\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.status}\n          deleteChip={this.onDelete}\n          categoryName=\"Status\"\n          showToolbarItem={currentCategory === 'Status'}\n        >\n          <Select\n            variant={SelectVariant.checkbox}\n            aria-label=\"Status\"\n            onToggle={this.onFilterToggle}\n            onSelect={this.onStatusSelect}\n            selections={filters.status}\n            isOpen={isFilterDropdownOpen}\n            placeholderText=\"Filter by status\"\n          >\n            {statusMenuItems}\n          </Select>\n        </ToolbarFilter>\n      </React.Fragment>\n    );\n  }\n\n  renderToolbar() {\n    const { filters } = this.state;\n    return (\n      <Toolbar id=\"toolbar-with-chip-groups\" clearAllFilters={this.onDelete} collapseListedFiltersBreakpoint=\"xl\">\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n            <ToolbarGroup variant=\"filter-group\">\n              {this.buildCategoryDropdown()}\n              {this.buildFilterDropdown()}\n            </ToolbarGroup>\n          </ToolbarToggleGroup>\n        </ToolbarContent>\n      </Toolbar>\n    );\n  }\n\n  render() {\n    const { loading, rows, columns, filters } = this.state;\n\n    const filteredRows =\n      filters.name.length > 0 || filters.location.length > 0 || filters.status.length > 0\n        ? rows.filter(row => {\n            return (\n              (filters.name.length === 0 ||\n                filters.name.some(name => row.cells[0].toLowerCase().includes(name.toLowerCase()))) &&\n              (filters.location.length === 0 || filters.location.includes(row.cells[5])) &&\n              (filters.status.length === 0 || filters.status.includes(row.cells[4]))\n            );\n          })\n        : rows;\n\n    let tableRows = filteredRows;\n    if (!loading && filteredRows.length === 0) {\n      tableRows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState>\n                    <EmptyStateIcon icon={SearchIcon} />\n                    <Title headingLevel=\"h5\" size=\"lg\">\n                      Clear all filters and try again.\n                    </Title>\n                    <EmptyStateBody>\n                      No results match this filter criteria. Remove all filters or clear all filters to show results.\n                    </EmptyStateBody>\n                    <EmptyStateSecondaryActions>\n                      <Button\n                        variant=\"link\"\n                        onClick={() => {\n                          this.onDelete(null);\n                        }}\n                      >\n                        Clear all filters\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  </EmptyState>\n                </Bullseye>\n              )\n            }\n          ]\n        }\n      ];\n    } else if (loading) {\n      tableRows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Title headingLevel=\"h2\" size=\"3xl\">\n                  Please wait while loading data\n                </Title>\n              )\n            }\n          ]\n        }\n      ];\n    }\n    const onSelect = loading || filteredRows.length === 0 ? null : this.onRowSelect; // To remove the select box when there are no rows\n    return (\n      <React.Fragment>\n        {this.renderToolbar()}\n        <Table cells={columns} rows={tableRows} onSelect={onSelect} aria-label=\"Filterable Table Demo\">\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </React.Fragment>\n    );\n  }\n}","title":"Filterable","lang":"js"}}>
      
    </Example>,
  'Sortable - responsive': props => 
    <Example {...pageData} {...props} thumbnail={srcImportsortableresponsive} {...{"code":"import React from 'react';\nimport {\n  Button,\n  Card,\n  Flex,\n  FlexItem,\n  InputGroup,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n  OptionsMenu,\n  OptionsMenuToggle,\n  Pagination,\n  Text,\n  TextContent,\n  Select,\n  SelectVariant,\n  SelectOption,\n  Nav,\n  NavList,\n  NavItem,\n  Dropdown,\n  DropdownItem,\n  DropdownGroup,\n  DropdownToggle,\n  Divider,\n  KebabToggle,\n  Avatar,\n  OptionsMenuItem,\n  OptionsMenuSeparator,\n  OptionsMenuItemGroup,\n  OverflowMenu,\n  OverflowMenuContent,\n  OverflowMenuControl,\n  OverflowMenuDropdownItem,\n  OverflowMenuGroup,\n  OverflowMenuItem,\n  PageSection\n} from '@patternfly/react-core';\nimport { ActionsColumn, TableComposable, Thead, Tr, Th, Tbody, Td } from '@patternfly/react-table';\n\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\nimport CloneIcon from '@patternfly/react-icons/dist/esm/icons/clone-icon';\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\nimport EditIcon from '@patternfly/react-icons/dist/esm/icons/edit-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport SyncIcon from '@patternfly/react-icons/dist/esm/icons/sync-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\n\nComposableTableSortable = () => {\n  const [navActiveItem, setNavActiveItem] = React.useState(0);\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n  const [isKebabDropdownOpen, setIsKebabDropdownOpen] = React.useState(false);\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  const [isFullKebabDropdownOpen, setIsFullKebabDropdownOpen] = React.useState(false);\n\n  const columns = ['Repositories', 'Branches', 'Pull requests', 'Workspaces', 'Last commit'];\n\n  const [rows, setRows] = React.useState([\n    ['Node 1', 10, 25, 5, 2],\n    ['Node 2', 8, 30, 2, 2],\n    ['Node 3', 12, 48, 13, 30],\n    ['Node 4', 10, 25, 5, 8],\n    ['Node 5', 34, 21, 26, 2]\n  ]);\n\n  // index of the currently active column\n  const [activeSortIndex, setActiveSortIndex] = React.useState(0);\n  // sort direction of the currently active column\n  const [activeSortDirection, setActiveSortDirection] = React.useState('asc');\n  // sort dropdown expansion\n  const [isSortDropdownOpen, setIsSortDropdownOpen] = React.useState(false);\n\n  const [selectedNodeNames, setSelectedNodeNames] = React.useState([]);\n  const setNodeSelected = (node, isSelecting = true) => {\n    if (!selectedNodeNames.includes(node)) {\n      setSelectedNodeNames([...selectedNodeNames, node]);\n    } else {\n      setSelectedNodeNames(selectedNodeNames.filter(n => n !== node));\n    }\n  };\n\n  const selectAllNodes = (isSelecting = true) => setSelectedNodeNames(isSelecting ? rows.map(r => r[0]) : []);\n  const areAllReposSelected = selectedNodeNames.length === rows.length;\n  const isNodeSelected = node => selectedNodeNames.includes(node[0]);\n\n  // To allow shift+click to select/deselect multiple rows\n  const [recentSelectedRowIndex, setRecentSelectedRowIndex] = React.useState(null);\n  const [shifting, setShifting] = React.useState(false);\n\n  const onSelectNode = (node, rowIndex, isSelecting) => {\n    // If the user is shift + selecting the checkboxes, then all intermediate checkboxes should be selected\n    if (shifting && recentSelectedRowIndex !== null) {\n      const numberSelected = rowIndex - recentSelectedRowIndex;\n      const intermediateIndexes =\n        numberSelected > 0\n          ? Array.from(new Array(numberSelected + 1), (_x, i) => i + recentSelectedRowIndex)\n          : Array.from(new Array(Math.abs(numberSelected) + 1), (_x, i) => i + rowIndex);\n      intermediateIndexes.forEach(index => setNodeSelected(rows[index], isSelecting));\n    } else {\n      setNodeSelected(node[0], isSelecting);\n    }\n    setRecentSelectedRowIndex(rowIndex);\n  };\n\n  const onSort = (event, index, direction) => {\n    setActiveSortIndex(index);\n    setActiveSortDirection(direction);\n    // sorts the rows\n    const updatedRows = rows.sort((a, b) => {\n      if (typeof a[index] === 'number') {\n        // numeric sort\n        if (direction === 'asc') {\n          return a[index] - b[index];\n        }\n        return b[index] - a[index];\n      } else {\n        // string sort\n        if (direction === 'asc') {\n          return a[index].localeCompare(b[index]);\n        }\n        return b[index].localeCompare(a[index]);\n      }\n    });\n    setRows(updatedRows);\n  };\n\n  const PageNav = (\n    <Nav onSelect={result => setNavActiveItem(result.itemId)} aria-label=\"Nav\">\n      <NavList>\n        <NavItem itemId={0} isActive={navActiveItem === 0} to=\"#system-panel\">\n          System Panel\n        </NavItem>\n        <NavItem itemId={1} isActive={navActiveItem === 1} to=\"#policy\">\n          Policy\n        </NavItem>\n        <NavItem itemId={2} isActive={navActiveItem === 2} to=\"#auth\">\n          Authentication\n        </NavItem>\n        <NavItem itemId={3} isActive={navActiveItem === 3} to=\"#network\">\n          Network Services\n        </NavItem>\n        <NavItem itemId={4} isActive={navActiveItem === 4} to=\"#server\">\n          Server\n        </NavItem>\n      </NavList>\n    </Nav>\n  );\n\n  const kebabDropdownItems = [<OverflowMenuDropdownItem key=\"kebab-1\">Some action</OverflowMenuDropdownItem>];\n\n  const defaultActions = () => [\n    {\n      title: 'Settings',\n      onClick: () => console.log(`clicked on Settings`)\n    },\n    {\n      title: 'Help',\n      onClick: () => console.log(`clicked on Help`)\n    }\n  ];\n\n  const renderPagination = (variant, isCompact) => (\n    <Pagination\n      isCompact={isCompact}\n      itemCount={36}\n      page={1}\n      perPage={10}\n      variant={variant}\n      titles={{\n        paginationTitle: `${variant} pagination`\n      }}\n    />\n  );\n\n  const userDropdownItems = [\n    <DropdownGroup key=\"group 2\">\n      <DropdownItem key=\"group 2 profile\">My profile</DropdownItem>\n      <DropdownItem key=\"group 2 user\" component=\"button\">\n        User management\n      </DropdownItem>\n      <DropdownItem key=\"group 2 logout\">Logout</DropdownItem>\n    </DropdownGroup>\n  ];\n\n  const fullKebabItems = [\n    <DropdownGroup key=\"group 2\">\n      <DropdownItem key=\"group 2 profile\">My profile</DropdownItem>\n      <DropdownItem key=\"group 2 user\" component=\"button\">\n        User management\n      </DropdownItem>\n      <DropdownItem key=\"group 2 logout\">Logout</DropdownItem>\n    </DropdownGroup>,\n    <Divider key=\"divider\" />,\n    <DropdownItem key=\"kebab-1\">\n      <CogIcon /> Settings\n    </DropdownItem>,\n    <DropdownItem key=\"kebab-2\">\n      <HelpIcon /> Help\n    </DropdownItem>\n  ];\n\n  const tableToolbar = (\n    <Toolbar id=\"sortable-toolbar\">\n      <ToolbarContent>\n        <ToolbarItem visibility={{ md: 'hidden' }}>\n          <OptionsMenu\n            id=\"options-menu-multiple-options-example\"\n            menuItems={[\n              <OptionsMenuItemGroup key=\"first group\" aria-label=\"Sort column\">\n                {columns.map((column, columnIndex) => (\n                  <OptionsMenuItem\n                    key={column}\n                    isSelected={activeSortIndex === columnIndex}\n                    onSelect={evt =>\n                      onSort(evt, columnIndex, activeSortDirection !== 'none' ? activeSortDirection : 'asc')\n                    }\n                  >\n                    {column}\n                  </OptionsMenuItem>\n                ))}\n              </OptionsMenuItemGroup>,\n              <OptionsMenuSeparator key=\"separator\" />,\n              <OptionsMenuItemGroup key=\"second group\" aria-label=\"Sort direction\">\n                <OptionsMenuItem\n                  onSelect={evt => onSort(evt, activeSortIndex, 'asc')}\n                  isSelected={activeSortDirection === 'asc'}\n                  id=\"ascending\"\n                  key=\"ascending\"\n                >\n                  Ascending\n                </OptionsMenuItem>\n                <OptionsMenuItem\n                  onSelect={evt => onSort(evt, activeSortIndex, 'desc')}\n                  isSelected={activeSortDirection === 'desc'}\n                  id=\"descending\"\n                  key=\"descending\"\n                >\n                  Descending\n                </OptionsMenuItem>\n              </OptionsMenuItemGroup>\n            ]}\n            isOpen={isSortDropdownOpen}\n            toggle={\n              <OptionsMenuToggle\n                hideCaret\n                onToggle={() => setIsSortDropdownOpen(!isSortDropdownOpen)}\n                toggleTemplate={<SortAmountDownIcon />}\n              />\n            }\n            isPlain\n            isGrouped\n            menuAppendTo='parent'\n            isFlipEnabled\n          />\n        </ToolbarItem>\n        <OverflowMenu breakpoint=\"lg\">\n          <OverflowMenuContent isPersistent>\n            <OverflowMenuGroup isPersistent groupType=\"button\">\n              <OverflowMenuItem>\n                <Button variant=\"primary\">Create instance</Button>\n              </OverflowMenuItem>\n              <OverflowMenuItem>\n                <Button variant=\"secondary\">Action</Button>\n              </OverflowMenuItem>\n            </OverflowMenuGroup>\n          </OverflowMenuContent>\n          <OverflowMenuControl hasAdditionalOptions>\n            <Dropdown\n              isPlain\n              onSelect={() => setIsKebabDropdownOpen(!isKebabDropdownOpen)}\n              toggle={<KebabToggle onToggle={() => setIsKebabDropdownOpen(!isKebabDropdownOpen)} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n              isFlipEnabled\n              menuAppendTo=\"parent\"\n            />\n          </OverflowMenuControl>\n        </OverflowMenu>\n        <ToolbarGroup variant=\"icon-button-group\">\n          <ToolbarItem>\n            <Button aria-label=\"Edit\" variant=\"plain\" icon={<EditIcon />} />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button aria-label=\"Clone\" variant=\"plain\" icon={<CloneIcon />} />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button aria-label=\"Sync\" variant=\"plain\" icon={<SyncIcon />} />\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarItem variant=\"pagination\">{renderPagination('top', true)}</ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n\n  return (\n    <React.Fragment>\n      <DashboardWrapper>\n        <PageSection isWidthLimited variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Table demos</Text>\n            <Text component=\"p\">\n              Below is an example of a responsive sortable table. When the screen size shrinks the table into a compact\n              form, the toolbar will display a dropdown menu containing sorting options.\n            </Text>\n          </TextContent>\n        </PageSection>\n        <PageSection\n          padding={{\n            default: 'noPadding',\n            xl: 'padding'\n          }}\n        >\n          <Card component=\"div\">\n            {tableToolbar}\n            <TableComposable aria-label=\"Sortable Table\">\n              <Thead>\n                <Tr>\n                  <Th />\n                  {columns.map((column, columnIndex) => {\n                    const sortParams = {\n                      sort: {\n                        sortBy: {\n                          index: activeSortIndex,\n                          direction: activeSortDirection\n                        },\n                        onSort,\n                        columnIndex\n                      }\n                    };\n                    return (\n                      <Th key={columnIndex} {...sortParams}>\n                        {column}\n                      </Th>\n                    );\n                  })}\n                </Tr>\n              </Thead>\n              <Tbody>\n                {rows.map((row, rowIndex) => (\n                  <Tr key={rowIndex}>\n                    <>\n                      <Td\n                        select={{\n                          rowIndex,\n                          onSelect: (_event, isSelecting) => onSelectNode(row, rowIndex, isSelecting),\n                          isSelected: isNodeSelected(row)\n                        }}\n                      />\n                      <Td dataLabel={columns[0]}>\n                        <div>{row[0]}</div>\n                        <a href=\"#\">siemur/test-space</a>\n                      </Td>\n                      <Td dataLabel={columns[1]}>\n                        <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                          <FlexItem>\n                            <CodeBranchIcon key=\"icon\" />\n                          </FlexItem>\n                          <FlexItem>{row[1]}</FlexItem>\n                        </Flex>\n                      </Td>\n                      <Td dataLabel={columns[2]}>\n                        <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                          <FlexItem>\n                            <CodeIcon key=\"icon\" />\n                          </FlexItem>\n                          <FlexItem>{row[2]}</FlexItem>\n                        </Flex>\n                      </Td>\n                      <Td dataLabel={columns[3]}>\n                        <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                          <FlexItem>\n                            <CubeIcon key=\"icon\" />\n                          </FlexItem>\n                          <FlexItem>{row[3]}</FlexItem>\n                        </Flex>\n                      </Td>\n                      <Td dataLabel={columns[4]}>{row[4]} days ago</Td>\n                      <Td dataLabel={'Action'}>\n                        <a href=\"#\">Action link</a>\n                      </Td>\n                      <Td isActionCell>\n                        <ActionsColumn items={defaultActions()} />\n                      </Td>\n                    </>\n                  </Tr>\n                ))}\n              </Tbody>\n            </TableComposable>\n            {renderPagination('bottom', false)}\n          </Card>\n        </PageSection>\n      </DashboardWrapper>\n    </React.Fragment>\n  );\n};","title":"Sortable - responsive","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Automatic pagination': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { Pagination } from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nclass ComplexPaginationTableDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [{ title: 'First column' }, { title: 'Second column' }, { title: 'Third column' }];\n    this.defaultRows = [\n      { cells: [{ title: 'Row 1 column 1' }, { title: 'Row 1 column 2' }, { title: 'Row 1 column 3' }] },\n      { cells: [{ title: 'Row 2 column 1' }, { title: 'Row 2 column 2' }, { title: 'Row 2 column 3' }] },\n      { cells: [{ title: 'Row 3 column 1' }, { title: 'Row 3 column 2' }, { title: 'Row 3 column 3' }] },\n      { cells: [{ title: 'Row 4 column 1' }, { title: 'Row 4 column 2' }, { title: 'Row 4 column 3' }] },\n      { cells: [{ title: 'Row 5 column 1' }, { title: 'Row 5 column 2' }, { title: 'Row 5 column 3' }] },\n      { cells: [{ title: 'Row 6 column 1' }, { title: 'Row 6 column 2' }, { title: 'Row 6 column 3' }] },\n      { cells: [{ title: 'Row 7 column 1' }, { title: 'Row 7 column 2' }, { title: 'Row 7 column 3' }] },\n      { cells: [{ title: 'Row 8 column 1' }, { title: 'Row 8 column 2' }, { title: 'Row 8 column 3' }] },\n      { cells: [{ title: 'Row 9 column 1' }, { title: 'Row 9 column 2' }, { title: 'Row 9 column 3' }] },\n      { cells: [{ title: 'Row 10 column 1' }, { title: 'Row 10 column 2' }, { title: 'Row 10 column 3' }] },\n      { cells: [{ title: 'Row 11 column 1' }, { title: 'Row 11 column 2' }, { title: 'Row 11 column 3' }] },\n      { cells: [{ title: 'Row 12 column 1' }, { title: 'Row 12 column 2' }, { title: 'Row 12 column 3' }] }\n    ];\n    this.defaultPerPage = 10;\n    this.state = {\n      perPage: this.defaultPerPage,\n      page: 1,\n      rows: this.defaultRows.slice(0, this.defaultPerPage)\n    };\n    this.handleSetPage = this.handleSetPage.bind(this);\n    this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n  }\n\n  handleSetPage(_evt, newPage, perPage, startIdx, endIdx) {\n    this.setState({\n      page: newPage,\n      rows: this.defaultRows.slice(startIdx, endIdx)\n    });\n  }\n\n  handlePerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx) {\n    this.setState({\n      perPage: newPerPage,\n      page: newPage,\n      rows: this.defaultRows.slice(startIdx, endIdx)\n    });\n  }\n\n  renderPagination(variant = 'top') {\n    const { page, perPage } = this.state;\n    return (\n      <Pagination\n        isCompact\n        itemCount={this.defaultRows.length}\n        page={page}\n        perPage={perPage}\n        defaultToFullPage\n        onSetPage={this.handleSetPage}\n        onPerPageSelect={this.handlePerPageSelect}\n        perPageOptions={[\n          { title: '3', value: 3 },\n          { title: '5', value: 5 },\n          { title: '12', value: 12 },\n          { title: '20', value: 20 }\n        ]}\n        titles={{\n          paginationTitle: `${variant} pagination`\n        }}\n      />\n    );\n  }\n\n  render() {\n    const rows = this.state.rows.map(row => ({ cells: row.cells }));\n    return (\n      <React.Fragment>\n        {this.renderPagination()}\n        <Table aria-label=\"Automated pagination table\" cells={this.columns} rows={rows}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </React.Fragment>\n    );\n  }\n}","title":"Automatic pagination","lang":"js"}}>
      
      <p {...{"className":"ws-p"}}>
        {`The below example illustrates the `}
        
        <code {...{"className":"ws-code"}}>
          {`defaultToFullPage`}
        </code>
        {` prop, which makes the following changes when the user sets the number of items to display per page to an amount that exceeds the remaining amount of data:`}
      </p>
      
      <ul {...{"className":"ws-ul"}}>
        

        
        <li {...{"className":"ws-li"}}>
          {`The component automatically changes the page back to the last full page of results, rather than defaulting to the final page of results.`}
        </li>
        

      </ul>
      
      <p {...{"className":"ws-p"}}>
        {`To demonstrate this, navigate to the last page of data below using the `}
        
        <code {...{"className":"ws-code"}}>
          {`>>`}
        </code>
        {` navigation arrows, then use the dropdown selector to change the view to 5 per page.`}
      </p>
      
      <ul {...{"className":"ws-ul"}}>
        

        
        <li {...{"className":"ws-li"}}>
          {`The default behavior would show the last page of results, which would only contain the last two rows (rows 11 - 12).`}
        </li>
        

        
        <li {...{"className":"ws-li"}}>
          {`The `}
          
          <code {...{"className":"ws-code"}}>
            {`defaultToFullPage`}
          </code>
          {` prop navigates you back to the previous page which does contain a full page of 5 rows (rows 6 - 10).`}
        </li>
        

      </ul>
    </Example>,
  'Pagination': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Checkbox,\n  Pagination,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Bullseye\n} from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport globalDangerColor200 from '@patternfly/react-tokens/dist/esm/global_danger_color_200';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport { Spinner } from '@patternfly/react-core';\n\nclass ComplexPaginationTableDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      res: [],\n      perPage: 0,\n      total: 0,\n      page: 0,\n      error: null,\n      loading: true,\n      forceLoadingState: false\n    };\n\n    this.handleCheckboxChange = checked => {\n      console.log(checked);\n      this.setState({ forceLoadingState: checked });\n    };\n  }\n\n  fetch(page, perPage) {\n    this.setState({ loading: true });\n    fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=${perPage}`)\n      .then(resp => resp.json())\n      .then(resp => this.setState({ res: resp, perPage, page, loading: false, total: 100 }))\n      .catch(err => this.setState({ error: err, loading: false, perPage: 0, page: 0, total: 0 }));\n  }\n\n  componentDidMount() {\n    this.fetch(this.state.page || 1, this.state.perPage || 20);\n  }\n\n  renderPagination(variant = 'top') {\n    const { page, perPage, total } = this.state;\n    return (\n      <Pagination\n        isCompact\n        itemCount={total}\n        page={page}\n        perPage={perPage}\n        onSetPage={(_evt, value) => this.fetch(value, perPage)}\n        onPerPageSelect={(_evt, value) => this.fetch(1, value)}\n        variant={variant}\n        titles={{\n          paginationTitle: `${variant} pagination`\n        }}\n      />\n    );\n  }\n\n  render() {\n    const { loading, res, error, forceLoadingState } = this.state;\n\n    const toolbarItems = (\n      <React.Fragment>\n        <ToolbarContent>\n          <ToolbarItem>\n            <Checkbox\n              label=\"View loading state\"\n              isChecked={this.state.forceLoadingState}\n              onChange={this.handleCheckboxChange}\n              aria-label=\"view loading state checkbox\"\n              id=\"check\"\n              name=\"check\"\n            />\n          </ToolbarItem>\n          <ToolbarItem variant=\"pagination\">{this.renderPagination()}</ToolbarItem>\n        </ToolbarContent>\n      </React.Fragment>\n    );\n\n    if (error) {\n      const noResultsRows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant={EmptyStateVariant.small}>\n                    <EmptyStateIcon icon={ExclamationCircleIcon} color={globalDangerColor200.value} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      Check your connection and reload the page.\n                    </Title>\n                    <EmptyStateBody>\n                      There was an error retrieving data. Check your connection and try again.\n                    </EmptyStateBody>\n                  </EmptyState>\n                </Bullseye>\n              )\n            }\n          ]\n        }\n      ];\n\n      return (\n        <React.Fragment>\n          <Table cells={['Title', 'Body']} rows={noResultsRows} aria-label=\"Pagination Table Demo\">\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </React.Fragment>\n      );\n    }\n\n    const loadingRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: 8 },\n            title: (\n              <Bullseye>\n                <center>\n                  <Spinner size=\"xl\" />\n                </center>\n              </Bullseye>\n            )\n          }\n        ]\n      }\n    ];\n\n    return (\n      <React.Fragment>\n        <Toolbar>{toolbarItems}</Toolbar>\n        {!(loading || forceLoadingState) && (\n          <Table\n            cells={['Title', 'Body']}\n            rows={res.map(post => [post.title, post.body])}\n            aria-label=\"Pagination Table Demo\"\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        )}\n        {(loading || forceLoadingState) && (\n          <Table cells={['Title', 'Body']} rows={loadingRows} aria-label=\"Pagination Table Demo\">\n            <TableHeader />\n            <TableBody />\n          </Table>\n        )}\n      </React.Fragment>\n    );\n  }\n}","title":"Pagination","lang":"js"}}>
      
    </Example>,
  'Sticky header': props => 
    <Example {...pageData} {...props} thumbnail={srcImportstickyheader} {...{"code":"import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownGroup,\n  DropdownToggle,\n  DropdownItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  PageHeaderTools,\n  PageHeaderToolsGroup,\n  PageHeaderToolsItem\n} from '@patternfly/react-core';\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\nimport imgBrand from '@patternfly/react-core/src/components/Brand/examples/pfLogo.svg';\nimport imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nclass PageLayoutDefaultNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0,\n      res: []\n    };\n    this.onDropdownToggle = isDropdownOpen => {\n      this.setState({\n        isDropdownOpen\n      });\n    };\n\n    this.onDropdownSelect = event => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\n      this.setState({\n        isKebabDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownSelect = event => {\n      this.setState({\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n      });\n    };\n\n    this.onNavSelect = result => {\n      this.setState({\n        activeItem: result.itemId\n      });\n    };\n  }\n\n  fetch(page, perPage) {\n    this.setState({ loading: true });\n    fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=${perPage}`)\n      .then(resp => resp.json())\n      .then(resp => this.setState({ res: resp, perPage, page, total: 100 }))\n      .catch(err => this.setState({ error: err, perPage: 0, page: 0, total: 0 }));\n  }\n\n  componentDidMount() {\n    this.fetch(this.state.page || 1, this.state.perPage || 20);\n  }\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem, res } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\">\n        <NavList>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>,\n      <DropdownItem>\n        <HelpIcon /> Help\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownGroup key=\"group 2\">\n        <DropdownItem key=\"group 2 profile\">My profile</DropdownItem>\n        <DropdownItem key=\"group 2 user\" component=\"button\">\n          User management\n        </DropdownItem>\n        <DropdownItem key=\"group 2 logout\">Logout</DropdownItem>\n      </DropdownGroup>\n    ];\n    const headerTools = (\n      <PageHeaderTools>\n        <PageHeaderToolsGroup\n          visibility={{\n            default: 'hidden',\n            lg: 'visible'\n          }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\n        >\n          <PageHeaderToolsItem>\n            <Button aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </PageHeaderToolsItem>\n          <PageHeaderToolsItem>\n            <Button aria-label=\"Help actions\" variant={ButtonVariant.plain}>\n              <QuestionCircleIcon />\n            </Button>\n          </PageHeaderToolsItem>\n        </PageHeaderToolsGroup>\n        <PageHeaderToolsGroup>\n          <PageHeaderToolsItem\n            visibility={{\n              lg: 'hidden'\n            }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </PageHeaderToolsItem>\n          <PageHeaderToolsItem\n            visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>John Smith</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </PageHeaderToolsItem>\n        </PageHeaderToolsGroup>\n        <Avatar src={imgAvatar} alt=\"Avatar image\" />\n      </PageHeaderTools>\n    );\n\n    const Header = (\n      <PageHeader logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />} headerTools={headerTools} showNavToggle />\n    );\n    const Sidebar = <PageSidebar nav={PageNav} />;\n    const pageId = 'main-content-page-layout-default-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\n\n    const PageBreadcrumb = (\n      <Breadcrumb>\n        <BreadcrumbItem>Section home</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Section landing\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          skipToContent={PageSkipToContent}\n          breadcrumb={PageBreadcrumb}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of its relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection>\n            <Table\n              cells={['Title', 'Body']}\n              rows={res.map(post => [post.title, post.body])}\n              aria-label=\"Sticky Header Table Demo\"\n              isStickyHeader\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}","title":"Sticky header","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Sticky first column': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { TableComposable, Thead, Tr, Th, Tbody, Td, InnerScrollContainer } from '@patternfly/react-table';\nimport { Card, PageSection } from '@patternfly/react-core';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\n\nexport const StickyFirstColumn = () => {\n  const facts = Array.from(\n    {\n      length: 9\n    },\n    (_, index) => ({\n      name: `Fact ${index + 1}`,\n      state: `State ${index + 1}`,\n      detail1: `Test cell ${index + 1}-3`,\n      detail2: `Test cell ${index + 1}-4`,\n      detail3: `Test cell ${index + 1}-5`,\n      detail4: `Test cell ${index + 1}-6`,\n      detail5: `Test cell ${index + 1}-7`,\n      detail6: `Test cell ${index + 1}-8`,\n      detail7: `Test cell ${index + 1}-9`,\n      detail8: `Test cell ${index + 1}-10`,\n      detail9: `Test cell ${index + 1}-11`,\n      detail10: `Test cell ${index + 1}-12`,\n      detail11: `Test cell ${index + 1}-13`,\n      detail12: `Test cell ${index + 1}-14`,\n      detail13: `Test cell ${index + 1}-15`,\n      detail14: `Test cell ${index + 1}-16`\n    })\n  );\n  const columnNames = {\n    name: 'Fact',\n    state: 'State',\n    header3: 'Header 3',\n    header4: 'Header 4',\n    header5: 'Header 5',\n    header6: 'Header 6',\n    header7: 'Header 7',\n    header8: 'Header 8',\n    header9: 'Header 9',\n    header10: 'Header 10',\n    header11: 'Header 11',\n    header12: 'Header 12',\n    header13: 'Header 13',\n    header14: 'Header 14',\n    header15: 'Header 15',\n    header16: 'Header 16'\n  };\n  const [activeSortIndex, setActiveSortIndex] = React.useState(null);\n  const [activeSortDirection, setActiveSortDirection] = React.useState(null);\n  const getSortableRowValues = fact => {\n    const {\n      name,\n      state,\n      detail1,\n      detail2,\n      detail3,\n      detail4,\n      detail5,\n      detail6,\n      detail7,\n      detail8,\n      detail9,\n      detail10,\n      detail11,\n      detail12,\n      detail13,\n      detail14\n    } = fact;\n    return [\n      name,\n      state,\n      detail1,\n      detail2,\n      detail3,\n      detail4,\n      detail5,\n      detail6,\n      detail7,\n      detail8,\n      detail9,\n      detail10,\n      detail11,\n      detail12,\n      detail13,\n      detail14\n    ];\n  };\n  let sortedFacts = facts;\n  if (activeSortIndex !== null) {\n    sortedFacts = facts.sort((a, b) => {\n      const aValue = getSortableRowValues(a)[activeSortIndex];\n      const bValue = getSortableRowValues(b)[activeSortIndex];\n      if (aValue === bValue) {\n        return 0;\n      }\n      if (activeSortDirection === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return bValue > aValue ? 1 : -1;\n      }\n    });\n  }\n  const getSortParams = columnIndex => ({\n    sortBy: {\n      index: activeSortIndex,\n      direction: activeSortDirection\n    },\n    onSort: (_event, index, direction) => {\n      setActiveSortIndex(index);\n      setActiveSortDirection(direction);\n    },\n    columnIndex\n  });\n  return (\n    <DashboardWrapper hasPageTemplateTitle>\n      <PageSection isWidthLimited padding={{ default: 'noPadding', xl: 'padding' }}>\n        <Card component=\"div\">\n          <InnerScrollContainer>\n            <TableComposable aria-label=\"Sticky column table\" gridBreakPoint=\"\">\n              <Thead>\n                <Tr>\n                  <Th\n                    isStickyColumn\n                    stickyMinWidth=\"100px\"\n                    hasRightBorder\n                    modifier=\"fitContent\"\n                    sort={getSortParams(0)}\n                  >\n                    {columnNames.name}\n                  </Th>\n                  <Th modifier=\"fitContent\" sort={getSortParams(1)}>\n                    {columnNames.state}\n                  </Th>\n                  <Th>{columnNames.header3}</Th>\n                  <Th>{columnNames.header4}</Th>\n                  <Th>{columnNames.header5}</Th>\n                  <Th>{columnNames.header6}</Th>\n                  <Th>{columnNames.header7}</Th>\n                  <Th>{columnNames.header8}</Th>\n                  <Th>{columnNames.header9}</Th>\n                  <Th>{columnNames.header10}</Th>\n                  <Th>{columnNames.header11}</Th>\n                  <Th>{columnNames.header12}</Th>\n                  <Th>{columnNames.header13}</Th>\n                  <Th>{columnNames.header14}</Th>\n                  <Th>{columnNames.header15}</Th>\n                  <Th>{columnNames.header16}</Th>\n                </Tr>\n              </Thead>\n              <Tbody>\n                {sortedFacts.map(fact => (\n                  <Tr key={fact.name}>\n                    <Th isStickyColumn stickyMinWidth=\"100px\" hasRightBorder modifier=\"truncate\">\n                      {fact.name}\n                    </Th>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.state}>\n                      {fact.state}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header3}>\n                      {fact.detail1}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header4}>\n                      {fact.detail2}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header5}>\n                      {fact.detail3}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header6}>\n                      {fact.detail4}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header7}>\n                      {fact.detail5}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header8}>\n                      {fact.detail6}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header9}>\n                      {fact.detail7}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header10}>\n                      {fact.detail8}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header11}>\n                      {fact.detail9}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header12}>\n                      {fact.detail10}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header13}>\n                      {fact.detail11}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header14}>\n                      {fact.detail12}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header15}>\n                      {fact.detail13}\n                    </Td>\n                    <Td modifier=\"nowrap\" dataLabel={columnNames.header16}>\n                      {fact.detail14}\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </TableComposable>\n          </InnerScrollContainer>\n        </Card>\n      </PageSection>\n    </DashboardWrapper>\n  );\n};\n","title":"Sticky first column","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Empty': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Button,\n  Card,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  PageSection,\n  Title\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\n\nclass EmptyStateDemo extends React.Component {\n  render() {\n    const columns = [\n      { title: 'Repositories' },\n      { title: 'Branches' },\n      { title: 'Pull requests' },\n      { title: 'Workspaces' },\n      { title: 'Last commit' }\n    ];\n\n    const rows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: 8 },\n            title: (\n              <EmptyState>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                  No results found\n                </Title>\n                <EmptyStateBody>No results match this filter criteria. Clear all filters and try again.</EmptyStateBody>\n                <EmptyStateSecondaryActions>\n                  <Button variant=\"link\" onClick={() => {}}>\n                    Clear all filters\n                  </Button>\n                </EmptyStateSecondaryActions>\n              </EmptyState>\n            )\n          }\n        ]\n      }\n    ];\n\n    return (\n      <DashboardWrapper hasPageTemplateTitle>\n        <PageSection padding={{ default: 'noPadding', xl: 'padding' }}>\n          <Card component=\"div\">\n            <Table cells={columns} rows={rows} aria-label=\"Empty state demo\">\n              <TableHeader />\n              <TableBody />\n            </Table>\n          </Card>\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Empty","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Loading': props => 
    <Example {...pageData} {...props} thumbnail={srcImportloading} {...{"code":"import React from 'react';\nimport { Bullseye, Card, EmptyState, EmptyStateIcon, Spinner, Title } from '@patternfly/react-core';\nimport { PageSection, Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\n\nclass LoadingStateDemo extends React.Component {\n  render() {\n    const columns = [\n      { title: 'Repositories' },\n      { title: 'Branches' },\n      { title: 'Pull requests' },\n      { title: 'Workspaces' },\n      { title: 'Last commit' }\n    ];\n    const rows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: 8 },\n            title: (\n              <Bullseye>\n                <EmptyState>\n                  <EmptyStateIcon variant=\"container\" component={Spinner} />\n                  <Title size=\"lg\" headingLevel=\"h2\">\n                    Loading\n                  </Title>\n                </EmptyState>\n              </Bullseye>\n            )\n          }\n        ]\n      }\n    ];\n\n    return (\n      <DashboardWrapper hasPageTemplateTitle>\n        <PageSection padding={{ default: 'noPadding', xl: 'padding' }}>\n          <Card component=\"div\">\n            <Table cells={columns} rows={rows} aria-label=\"Loading table demo\">\n              <TableHeader />\n              <TableBody />\n            </Table>\n          </Card>\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Loading","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Error': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateVariant,\n  PageSection,\n  Title\n} from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport DashboardWrapper from '@patternfly/react-core/src/demos/examples/DashboardWrapper';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nclass ErrorStateDemo extends React.Component {\n  render() {\n    const columns = [\n      { title: 'Repositories' },\n      { title: 'Branches' },\n      { title: 'Pull requests' },\n      { title: 'Workspaces' },\n      { title: 'Last commit' }\n    ];\n    const rows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: 8 },\n            title: (\n              <EmptyState variant={EmptyStateVariant.small}>\n                <EmptyStateIcon icon={ExclamationCircleIcon} color={globalDangerColor200.value} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                  Unable to connect\n                </Title>\n                <EmptyStateBody>\n                  There was an error retrieving data. Check your connection and reload the page.\n                </EmptyStateBody>\n              </EmptyState>\n            )\n          }\n        ]\n      }\n    ];\n\n    return (\n      <DashboardWrapper hasPageTemplateTitle>\n        <PageSection padding={{ default: 'noPadding', xl: 'padding' }}>\n          <Card component=\"div\">\n            <Table cells={columns} rows={rows} aria-label=\"Error table demo\">\n              <TableHeader />\n              <TableBody />\n            </Table>\n          </Card>\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Error","lang":"js","isFullscreen":true}}>
      
    </Example>
};

const Component = () => (
  <React.Fragment>
    {React.createElement(pageData.examples["Bulk select"])}
    {React.createElement(pageData.examples["Expand/collapse all"])}
    {React.createElement(pageData.examples["Compact"])}
    {React.createElement(pageData.examples["Compound expansion"])}
    {React.createElement(pageData.examples["Column management"])}
    {React.createElement(pageData.examples["Column management with draggable"])}
    {React.createElement(pageData.examples["Filterable"])}
    {React.createElement(pageData.examples["Sortable - responsive"])}
    {React.createElement(pageData.examples["Automatic pagination"])}
    {React.createElement(pageData.examples["Pagination"])}
    {React.createElement(pageData.examples["Sticky header"])}
    {React.createElement(pageData.examples["Sticky first column"])}
    <AutoLinkHeader {...{"id":"empty-states","size":"h2","className":"ws-title ws-h2"}}>
      {`Empty states`}
    </AutoLinkHeader>
    <p {...{"className":"ws-p"}}>
      {`These examples demonstrate the use of an `}
      <PatternflyThemeLink {...{"to":"/components/empty-state"}}>
        {`Empty State component`}
      </PatternflyThemeLink>
      {` inside of a `}
      <PatternflyThemeLink {...{"to":"/components/table"}}>
        {`Table`}
      </PatternflyThemeLink>
      {`. Empty states are useful in a table when a filter returns no results, while data is loading, or when any type of error or exception condition occurs.`}
    </p>
    {React.createElement(pageData.examples["Empty"])}
    {React.createElement(pageData.examples["Loading"])}
    {React.createElement(pageData.examples["Error"])}
  </React.Fragment>
);
Component.displayName = 'ComponentsTableReactDemosDocs';
Component.pageData = pageData;

export default Component;
