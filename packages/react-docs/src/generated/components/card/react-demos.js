import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';
import ArrowRightIcon from '@patternfly/react-icons/dist/js/icons/arrow-right-icon';
import ExternalLinkAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';
import { CheckCircleIcon, ExclamationCircleIcon, ExclamationTriangleIcon, TimesCircleIcon, BellIcon } from '@patternfly/react-icons';
import { TableComposable, Thead, Tbody, Tr, Th, Td, ExpandableRowContent } from '@patternfly/react-table';
import { Chart, ChartAxis, ChartGroup, ChartVoronoiContainer, ChartStack, ChartBar, ChartTooltip, ChartDonutThreshold, ChartDonutUtilization, ChartArea, ChartContainer, ChartLabel } from '@patternfly/react-charts';
import chart_color_gold_100 from '@patternfly/react-tokens/dist/esm/chart_color_gold_100';
import chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';
import chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';
import chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';
import srcImportcardview from './react-demos/card-view.png';
const pageData = {
  "id": "Card",
  "section": "components",
  "source": "react-demos",
  "slug": "/components/card/react-demos",
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/demos/CardDemos.md",
  "examples": [
    "Horizontal card grid",
    "Horizontal split",
    "Details card",
    "Aggregate status card",
    "Status",
    "Status Tabbed",
    "Utilization card 1",
    "Utilization card 2",
    "Utilization card 3",
    "Utilization card 4",
    "Nested cards",
    "With accordion",
    "Trend card 1",
    "Trend card 2",
    "Log view",
    "Events view"
  ]
};
pageData.liveContext = {
  InfoCircleIcon,
  ArrowRightIcon,
  ExternalLinkAltIcon,
  CheckCircleIcon,
  ExclamationCircleIcon,
  ExclamationTriangleIcon,
  TimesCircleIcon,
  BellIcon,
  TableComposable,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  ExpandableRowContent,
  Chart,
  ChartAxis,
  ChartGroup,
  ChartVoronoiContainer,
  ChartStack,
  ChartBar,
  ChartTooltip,
  ChartDonutThreshold,
  ChartDonutUtilization,
  ChartArea,
  ChartContainer,
  ChartLabel,
  chart_color_gold_100,
  chart_color_gold_300,
  chart_color_orange_300,
  chart_color_red_100
};
pageData.examples = {
  'Horizontal card grid': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  CardBody,\n  CardExpandableContent,\n  Level,\n  LabelGroup,\n  Label,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Grid,\n  Flex,\n  List,\n  ListItem,\n  Button\n} from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\n\nclass CardGridDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isCardExpanded: false, isDropdownOpen: false };\n\n    this.onCardExpand = () => {\n      this.setState({\n        isCardExpanded: !this.state.isCardExpanded\n      });\n    };\n\n    this.onActionToggle = isDropdownOpen => {\n      this.setState({\n        isDropdownOpen\n      });\n    };\n\n    this.onActionSelect = event => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen\n      });\n    };\n  }\n\n  render() {\n    const { isCardExpanded, isDropdownOpen } = this.state;\n    const dropdownItems = [\n      <DropdownItem key=\"action1\" component=\"button\">\n        Action 1\n      </DropdownItem>,\n      <DropdownItem key=\"action2\" component=\"button\">\n        Action 2\n      </DropdownItem>,\n      <DropdownItem key=\"disabled action3\" isDisabled component=\"button\">\n        Disabled Action 3\n      </DropdownItem>,\n      <DropdownItem key=\"action4\" component=\"button\">\n        Action 4\n      </DropdownItem>\n    ];\n    return (\n      <Card id=\"horizontal card\" isExpanded={isCardExpanded}>\n        <CardHeader\n          onExpand={this.onCardExpand}\n          toggleButtonProps={{\n            id: 'toggle-button',\n            'aria-label': 'Actions',\n            'aria-labelledby': 'titleId toggle-button',\n            'aria-expanded': isCardExpanded\n          }}\n        >\n          <CardActions>\n            <Dropdown\n              onSelect={this.onActionSelect}\n              toggle={<KebabToggle onToggle={this.onActionToggle} />}\n              isOpen={isDropdownOpen}\n              isPlain\n              dropdownItems={dropdownItems}\n              position=\"right\"\n            />\n          </CardActions>\n          {isCardExpanded && <CardTitle id=\"titleId\">Getting Started</CardTitle>}\n          {!isCardExpanded && (\n            <Level hasGutter>\n              <CardTitle id=\"titleId\">Getting Started</CardTitle>\n              <LabelGroup isCompact>\n                <Label isCompact icon={<InfoCircleIcon />} color=\"blue\">\n                  Set up your cluster\n                </Label>\n                <Label isCompact icon={<InfoCircleIcon />} color=\"purple\">\n                  Guided tours\n                </Label>\n                <Label isCompact icon={<InfoCircleIcon />} color=\"green\">\n                  Quick starts\n                </Label>\n                <Label isCompact icon={<InfoCircleIcon />} color=\"orange\">\n                  Learning resources\n                </Label>\n              </LabelGroup>\n            </Level>\n          )}\n        </CardHeader>\n        <CardExpandableContent>\n          <CardBody>\n            <Grid md={6} lg={3} hasGutter>\n              <Flex\n                spaceItems={{ default: 'spaceItemsLg' }}\n                alignItems={{ default: 'alignItemsFlexStart' }}\n                direction={{ default: 'column' }}\n              >\n                <Flex\n                  spaceItems={{ default: 'spaceItemsSm' }}\n                  alignItems={{ default: 'alignItemsFlexStart' }}\n                  direction={{ default: 'column' }}\n                  grow={{ default: 'grow' }}\n                >\n                  <Label icon={<InfoCircleIcon />} color=\"blue\">\n                    Set up your cluster\n                  </Label>\n                  <p>Continue setting up your cluster to access all you cain in the Console</p>\n                  <List isPlain>\n                    <ListItem>\n                      <a href=\"#\">Add identity provider</a>\n                    </ListItem>\n                    <ListItem>\n                      <a href=\"#\">Configure alert receivers</a>\n                    </ListItem>\n                    <ListItem>\n                      <a href=\"#\">Configure default ingress certificate</a>\n                    </ListItem>\n                  </List>\n                </Flex>\n                <Button href=\"#\" component=\"a\" variant=\"link\" isInline icon={<ArrowRightIcon />} iconPosition=\"right\">\n                  View all set up cluster steps\n                </Button>\n              </Flex>\n              <Flex\n                spaceItems={{ default: 'spaceItemsLg' }}\n                alignItems={{ default: 'alignItemsFlexStart' }}\n                direction={{ default: 'column' }}\n              >\n                <Flex\n                  spaceItems={{ default: 'spaceItemsSm' }}\n                  alignItems={{ default: 'alignItemsFlexStart' }}\n                  direction={{ default: 'column' }}\n                  grow={{ default: 'grow' }}\n                >\n                  <Label icon={<InfoCircleIcon />} color=\"purple\">\n                    Guided tours\n                  </Label>\n                  <p>Tour some of the key features around the console</p>\n                  <List isPlain>\n                    <ListItem>\n                      <a href=\"#\">Tour the console</a>\n                    </ListItem>\n                    <ListItem>\n                      <a href=\"#\">Getting started with Serverless</a>\n                    </ListItem>\n                  </List>\n                </Flex>\n                <Button href=\"#\" component=\"a\" variant=\"link\" isInline icon={<ArrowRightIcon />} iconPosition=\"right\">\n                  View all guided tours\n                </Button>\n              </Flex>\n              <Flex\n                spaceItems={{ default: 'spaceItemsLg' }}\n                alignItems={{ default: 'alignItemsFlexStart' }}\n                direction={{ default: 'column' }}\n              >\n                <Flex\n                  spaceItems={{ default: 'spaceItemsSm' }}\n                  alignItems={{ default: 'alignItemsFlexStart' }}\n                  direction={{ default: 'column' }}\n                  grow={{ default: 'grow' }}\n                >\n                  <Label icon={<InfoCircleIcon />} color=\"green\">\n                    Quick starts\n                  </Label>\n                  <p>Get started with features using our step-by-step documentation</p>\n                  <List isPlain>\n                    <ListItem>\n                      <a href=\"#\">Getting started with Serverless</a>\n                    </ListItem>\n                    <ListItem>\n                      <a href=\"#\">Explore virtualization</a>\n                    </ListItem>\n                    <ListItem>\n                      <a href=\"#\">Build pipelines</a>\n                    </ListItem>\n                  </List>\n                </Flex>\n                <Button href=\"#\" component=\"a\" variant=\"link\" isInline icon={<ArrowRightIcon />} iconPosition=\"right\">\n                  View all quick starts\n                </Button>\n              </Flex>\n              <Flex\n                spaceItems={{ default: 'spaceItemsLg' }}\n                alignItems={{ default: 'alignItemsFlexStart' }}\n                direction={{ default: 'column' }}\n              >\n                <Flex\n                  spaceItems={{ default: 'spaceItemsSm' }}\n                  alignItems={{ default: 'alignItemsFlexStart' }}\n                  direction={{ default: 'column' }}\n                  grow={{ default: 'grow' }}\n                >\n                  <Label icon={<InfoCircleIcon />} color=\"orange\">\n                    Learning resources\n                  </Label>\n                  <p>Learn about new features within the Console and get started with demo apps</p>\n                  <List isPlain>\n                    <ListItem>\n                      <a href=\"#\">See what's possible with the Explore page</a>\n                    </ListItem>\n                    <ListItem>\n                      <a href=\"#\">\n                        OpenShift 4.5: Top Tasks\n                        <ExternalLinkAltIcon />\n                      </a>\n                    </ListItem>\n                    <ListItem>\n                      <a href=\"#\">Try a demo app</a>\n                    </ListItem>\n                  </List>\n                </Flex>\n                <Button href=\"#\" component=\"a\" variant=\"link\" isInline icon={<ArrowRightIcon />} iconPosition=\"right\">\n                  View all learning resources\n                </Button>\n              </Flex>\n            </Grid>\n          </CardBody>\n        </CardExpandableContent>\n      </Card>\n    );\n  }\n}","title":"Horizontal card grid","lang":"js"}}>
      
    </Example>,
  'Horizontal split': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { Card, CardTitle, CardBody, CardFooter, Grid, GridItem, Button } from '@patternfly/react-core';\n\nCardHorizontalSplitDemo = () => {\n  return (\n    <Card id=\"card-demo-horizontal-split-example\" isFlat>\n      <Grid md={6}>\n        <GridItem\n          style={{\n            minHeight: '200px',\n            backgroundPosition: 'center',\n            backgroundSize: 'cover',\n            backgroundImage: 'url(/assets/images/pfbg_992@2x.jpg)'\n          }}\n        />\n        <GridItem>\n          <CardTitle>Headline</CardTitle>\n          <CardBody>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse arcu purus, lobortis nec euismod eu,\n            tristique ut sapien. Nullam turpis lectus, aliquet sit amet volutpat eu, semper eget quam. Maecenas in\n            tempus diam. Aenean interdum velit sed massa aliquet, sit amet malesuada nulla hendrerit. Aenean non\n            faucibus odio. Etiam non metus turpis. Praesent sollicitudin elit neque, id ullamcorper nibh faucibus eget.\n          </CardBody>\n          <CardFooter>\n            <Button variant=\"tertiary\">Call to action</Button>\n          </CardFooter>\n        </GridItem>\n      </Grid>\n    </Card>\n  );\n};","title":"Horizontal split","lang":"js"}}>
      
    </Example>,
  'Details card': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardFooter,\n  Gallery,\n  Title,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Divider\n} from '@patternfly/react-core';\n\nCardDetailsDemo = () => {\n  return (\n    <Gallery hasGutter style={{ '--pf-l-gallery--GridTemplateColumns--min': '260px' }}>\n      <Card>\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"xl\">\n            Details\n          </Title>\n        </CardTitle>\n        <CardBody>\n          <DescriptionList>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Cluster API Address</DescriptionListTerm>\n              <DescriptionListDescription>\n                <a href=\"#\">https://api1.devcluster.openshift.com</a>\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Cluster ID</DescriptionListTerm>\n              <DescriptionListDescription>63b97ac1-b850-41d9-8820-239becde9e86</DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Provide</DescriptionListTerm>\n              <DescriptionListDescription>AWS</DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>OpenShift Version</DescriptionListTerm>\n              <DescriptionListDescription>4.5.0.ci-2020-06-16-015028</DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Update Channel</DescriptionListTerm>\n              <DescriptionListDescription>stable-4.5</DescriptionListDescription>\n            </DescriptionListGroup>\n          </DescriptionList>\n        </CardBody>\n        <Divider />\n        <CardFooter>\n          <a href=\"#\">View Settings</a>\n        </CardFooter>\n      </Card>\n      <Card>\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"xl\">\n            Details\n          </Title>\n        </CardTitle>\n        <CardBody>\n          <DescriptionList>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Cluster API Address</DescriptionListTerm>\n              <DescriptionListDescription>\n                <a href=\"#\">https://api2.devcluster.openshift.com</a>\n              </DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Cluster ID</DescriptionListTerm>\n              <DescriptionListDescription>08908908-b850-41d9-8820-239becde9e86</DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Provider</DescriptionListTerm>\n              <DescriptionListDescription>Azure</DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>OpenShift Version</DescriptionListTerm>\n              <DescriptionListDescription>4.5.0.ci-2020-06-16-015026</DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>Update Channel</DescriptionListTerm>\n              <DescriptionListDescription>stable-4.4</DescriptionListDescription>\n            </DescriptionListGroup>\n          </DescriptionList>\n        </CardBody>\n        <Divider />\n        <CardFooter>\n          <a href=\"#\">View Settings</a>\n        </CardFooter>\n      </Card>\n    </Gallery>\n  );\n};","title":"Details card","lang":"js"}}>
      
    </Example>,
  'Aggregate status card': props => 
    <Example {...pageData} {...props} {...{"code":"import * as React from 'react';\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Divider,\n  Flex,\n  FlexItem,\n  Gallery,\n  Grid,\n  GridItem,\n  Stack\n} from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\n\nconst cardData = {\n  iconOnly: [\n    {\n      title: '5 Clusters',\n      content: [\n        {\n          icon: <CheckCircleIcon color=\"var(--pf-global--success-color--100)\" />\n        }\n      ],\n      layout: 'icon'\n    },\n    {\n      title: '15 Clusters',\n      content: [\n        {\n          icon: <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n        }\n      ],\n      layout: 'icon'\n    },\n    {\n      title: '3 Clusters',\n      content: [\n        {\n          icon: <TimesCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n        }\n      ],\n      layout: 'icon'\n    }\n  ],\n  iconWithCount: [\n    {\n      title: '10 Hosts',\n      content: [\n        {\n          icon: <ExclamationCircleIcon color=\"var(--pf-global--success-color--100)\" />,\n          count: 2\n        },\n        {\n          icon: <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />,\n          count: 1\n        }\n      ],\n      layout: 'multiIcon'\n    },\n    {\n      title: '50 Hosts',\n      content: [\n        {\n          icon: <CheckCircleIcon color=\"var(--pf-global--success-color--100)\" />,\n          count: 5\n        },\n        {\n          icon: <TimesCircleIcon color=\"var(--pf-global--danger-color--100)\" />,\n          count: 12\n        }\n      ],\n      layout: 'multiIcon'\n    },\n    {\n      title: '12 Hosts',\n      content: [\n        {\n          icon: <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />,\n          count: 3\n        },\n        {\n          icon: <TimesCircleIcon color=\"var(--pf-global--danger-color--100)\" />,\n          count: 7\n        }\n      ],\n      layout: 'multiIcon'\n    }\n  ],\n  withSubtitle: [\n    {\n      title: '13 Hosts',\n      content: [\n        {\n          icon: <TimesCircleIcon color=\"var(--pf-global--danger-color--100)\" />,\n          status: '2 errors',\n          subtitle: 'subtitle'\n        },\n        {\n          icon: <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />,\n          status: '1 warning',\n          subtitle: 'subtitle'\n        }\n      ],\n      layout: 'withSubtitle'\n    },\n    {\n      title: '3 Hosts',\n      content: [\n        {\n          icon: <CheckCircleIcon color=\"var(--pf-global--success-color--100)\" />,\n          status: '2 successes',\n          subtitle: 'subtitle'\n        },\n        {\n          icon: <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />,\n          status: '3 warnings',\n          subtitle: 'subtitle'\n        }\n      ],\n      layout: 'withSubtitle'\n    },\n    {\n      title: '50 Hosts',\n      content: [\n        {\n          icon: <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />,\n          status: '7 warnings',\n          subtitle: 'subtitle'\n        },\n        {\n          icon: <TimesCircleIcon color=\"var(--pf-global--danger-color--100)\" />,\n          status: '1 error',\n          subtitle: 'subtitle'\n        }\n      ],\n      layout: 'withSubtitle'\n    }\n  ]\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst AggregateStatusCards: React.FunctionComponent = () => {\n  const renderContent = (content, layout) => {\n    if (layout === 'icon') {\n      return content[0].icon;\n    }\n    if (layout === 'multiIcon') {\n      return (\n        <Flex display={{ default: 'inlineFlex' }}>\n          {content.map(({ icon, count }, index: number) => (\n            <React.Fragment key={index}>\n              <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                <FlexItem>{icon}</FlexItem>\n                <FlexItem>\n                  <a href=\"#\">{count}</a>\n                </FlexItem>\n              </Flex>\n              {content.length > 1 && index === 0 && (\n                <Divider\n                  key={`${index}_d`}\n                  orientation={{\n                    default: 'vertical'\n                  }}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </Flex>\n      );\n    }\n    if (layout === 'withSubtitle') {\n      return (\n        <Flex justifyContent={{ default: 'justifyContentSpaceAround' }}>\n          {content.map(({ icon, status, subtitle }, index) => (\n            <Flex key={index}>\n              <FlexItem>{icon}</FlexItem>\n              <Stack>\n                <a href=\"#\">{status}</a>\n                <span>{subtitle}</span>\n              </Stack>\n            </Flex>\n          ))}\n        </Flex>\n      );\n    }\n  };\n  return (\n    <Grid hasGutter>\n      {Object.keys(cardData).map((cardGroup, groupIndex) => {\n        let galleryWidth;\n        let cardAlign;\n        let titleAlign;\n        if (cardGroup === 'withSubtitle') {\n          galleryWidth = '260px';\n          cardAlign = '';\n          titleAlign = 'center';\n        } else {\n          cardAlign = 'center';\n        }\n        return (\n          <GridItem key={groupIndex}>\n            <Gallery hasGutter style={{ '--pf-l-gallery--GridTemplateColumns--min': galleryWidth } as any}>\n              {cardData[cardGroup].map(({ title, content, layout }, cardIndex) => (\n                <Card style={{ textAlign: cardAlign }} key={`${groupIndex}${cardIndex}`} component=\"div\">\n                  <CardTitle style={{ textAlign: titleAlign }}>{title}</CardTitle>\n                  <CardBody>{renderContent(content, layout)}</CardBody>\n                </Card>\n              ))}\n            </Gallery>\n          </GridItem>\n        );\n      })}\n    </Grid>\n  );\n};","title":"Aggregate status card","lang":"ts"}}>
      
    </Example>,
  'Status': props => 
    <Example {...pageData} {...props} {...{"code":"import * as React from 'react';\nimport {\n  Alert,\n  Card,\n  CardBody,\n  CardHeader,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Label,\n  NotificationDrawer,\n  NotificationDrawerBody,\n  NotificationDrawerGroup,\n  NotificationDrawerList,\n  NotificationDrawerListItem,\n  NotificationDrawerListItemBody,\n  NotificationDrawerListItemHeader,\n  Popover,\n  Title\n} from '@patternfly/react-core';\nimport { TableComposable, Thead, Tbody, Tr, Th, Td, ExpandableRowContent } from '@patternfly/react-table';\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst StatusPlain: React.FunctionComponent = () => {\n  const [drawerExpanded, setDrawerExpanded] = React.useState(false);\n  const handleDrawerToggleClick = () => {\n    setDrawerExpanded(!drawerExpanded);\n  };\n\n  const [rowsExpanded, setRowsExpanded] = React.useState([false, false, false]);\n  const handleToggleExpand = (_: any, rowIndex: number) => {\n    const newRowsExpanded = [...rowsExpanded];\n    newRowsExpanded[rowIndex] = !rowsExpanded[rowIndex];\n    setRowsExpanded(newRowsExpanded);\n  };\n\n  const header = (\n    <CardHeader>\n      <Title headingLevel=\"h2\" size=\"lg\">\n        Status\n      </Title>\n    </CardHeader>\n  );\n\n  const columns = ['Components', 'Response Rate'];\n\n  const rows = [\n    {\n      content: ['API Servers', '20%'],\n      child: (\n        <Alert\n          title=\"This is a critical alert that can be associated with the control panel.\"\n          variant=\"danger\"\n          isInline\n        ></Alert>\n      )\n    },\n    {\n      content: ['Controller Managers', '100%'],\n      child: (\n        <Alert\n          title=\"This is a critical alert that can be associated with the control panel.\"\n          variant=\"danger\"\n          isInline\n        ></Alert>\n      )\n    },\n    {\n      content: ['etcd', '91%'],\n      child: (\n        <Alert\n          title=\"This is a critical alert that can be associated with the control panel.\"\n          variant=\"danger\"\n          isInline\n        ></Alert>\n      )\n    }\n  ];\n\n  const popoverBodyContent = (\n    <>\n      <div>\n        Components of the Control Panel are responsible for maintaining and reconciling the state of the cluster.\n      </div>\n      <TableComposable variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th />\n            {columns.map((column, columnIndex) => (\n              <Th key={columnIndex} modifier=\"fitContent\">\n                {column}\n              </Th>\n            ))}\n          </Tr>\n        </Thead>\n        {rows.map((row, rowIndex) => {\n          const parentRow = (\n            <Tr key={rowIndex}>\n              <Td\n                key={`${rowIndex}_0`}\n                expand={row.child && { isExpanded: rowsExpanded[rowIndex], rowIndex, onToggle: handleToggleExpand }}\n              />\n              {row.content.map((cell, cellIndex) => (\n                <Td key={`${rowIndex}_${cellIndex}`} dataLabel={columns[cellIndex]} modifier=\"fitContent\">\n                  {cell}\n                </Td>\n              ))}\n            </Tr>\n          );\n          const childRow = row.child ? (\n            <Tr key={`${rowIndex}_child`} isExpanded={rowsExpanded[rowIndex]}>\n              <Td key={`${rowIndex}_1`} colSpan={3} dataLabel={`${rowIndex}_child`}>\n                <ExpandableRowContent>{row.child}</ExpandableRowContent>\n              </Td>\n            </Tr>\n          ) : null;\n          return (\n            <Tbody key={rowIndex} isExpanded={rowsExpanded[rowIndex]}>\n              {parentRow}\n              {childRow}\n            </Tbody>\n          );\n        })}\n      </TableComposable>\n    </>\n  );\n\n  const body = (\n    <CardBody>\n      <Grid hasGutter sm={6} lg={3}>\n        <GridItem>\n          <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n            <FlexItem>\n              <CheckCircleIcon color=\"var(--pf-global--success-color--100)\" />\n            </FlexItem>\n            <FlexItem>\n              <span>Cluster</span>\n            </FlexItem>\n          </Flex>\n        </GridItem>\n        <GridItem>\n          <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n            <FlexItem>\n              <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n            </FlexItem>\n            <FlexItem>\n              <Popover headerContent=\"Control Panel Status\" bodyContent={popoverBodyContent} minWidth=\"400px\">\n                <a href=\"#\" onClick={e => e.preventDefault()}>\n                  Control Panel\n                </a>\n              </Popover>\n            </FlexItem>\n          </Flex>\n        </GridItem>\n        <GridItem>\n          <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n            <FlexItem>\n              <ExclamationCircleIcon color=\"var(--pf-global--danger-color--100)\" />\n            </FlexItem>\n            <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsNone' }}>\n              <FlexItem>\n                <a href=\"#\">Operators</a>\n              </FlexItem>\n              <FlexItem>\n                <span style={{ color: 'var(--pf-global--Color--400)' }}>1 degraded</span>\n              </FlexItem>\n            </Flex>\n          </Flex>\n        </GridItem>\n        <GridItem>\n          <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n            <FlexItem>\n              <CheckCircleIcon color=\"var(--pf-global--success-color--100)\" />\n            </FlexItem>\n            <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsNone' }}>\n              <FlexItem>\n                <a href=\"#\">Image Vulnerabilities</a>\n              </FlexItem>\n              <FlexItem>\n                <span style={{ color: '#8a8d90' }}>0 vulnerabilities</span>\n              </FlexItem>\n            </Flex>\n          </Flex>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  );\n\n  const drawerTitle = (\n    <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n      <FlexItem spacer={{ default: 'spacerMd' }}>\n        <span>Notifications</span>\n      </FlexItem>\n      <Label color=\"red\" icon={<ExclamationCircleIcon />}>\n        1\n      </Label>\n      <Label color=\"orange\" icon={<ExclamationTriangleIcon />}>\n        3\n      </Label>\n      <Label color=\"green\" icon={<CheckCircleIcon />}>\n        3\n      </Label>\n      <Label color=\"blue\" icon={<ExclamationCircleIcon />}>\n        3\n      </Label>\n      <Label color=\"green\" icon={<BellIcon />}>\n        3\n      </Label>\n    </Flex>\n  );\n\n  const drawer = (\n    <NotificationDrawer>\n      <NotificationDrawerBody>\n        <NotificationDrawerGroup\n          count={0}\n          onExpand={handleDrawerToggleClick}\n          isExpanded={drawerExpanded}\n          title={drawerTitle}\n        >\n          <NotificationDrawerList isHidden={!drawerExpanded}>\n            <NotificationDrawerListItem variant=\"danger\">\n              <NotificationDrawerListItemHeader variant=\"danger\" title=\"Critical alert regarding control plane\" />\n              <NotificationDrawerListItemBody>\n                This is a long description to show how the title will wrap if it is long and wraps to multiple lines.\n              </NotificationDrawerListItemBody>\n            </NotificationDrawerListItem>\n            <NotificationDrawerListItem variant=\"warning\">\n              <NotificationDrawerListItemHeader variant=\"warning\" title=\"Warning alert\" />\n              <NotificationDrawerListItemBody>\n                This is a warning notification description.\n              </NotificationDrawerListItemBody>\n            </NotificationDrawerListItem>\n          </NotificationDrawerList>\n        </NotificationDrawerGroup>\n      </NotificationDrawerBody>\n    </NotificationDrawer>\n  );\n\n  return (\n    <Card>\n      {header}\n      {body}\n      <Divider />\n      {drawer}\n    </Card>\n  );\n};","title":"Status","lang":"ts"}}>
      
    </Example>,
  'Status Tabbed': props => 
    <Example {...pageData} {...props} {...{"code":"import * as React from 'react';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Spinner,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Title\n} from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nconst descriptionListData = [\n  {\n    status: 'Running',\n    resourceName: 'Resource name that is long and can wrap',\n    detail: '121 Systems',\n    icon: <CheckCircleIcon />\n  },\n  {\n    status: 'Ready',\n    resourceName: 'Resource name that is long and can wrap',\n    detail: '123 Systems',\n    icon: <ExclamationCircleIcon />\n  },\n  {\n    status: 'Running',\n    resourceName: 'Resource name that is long and can wrap',\n    detail: '122 Systems',\n    icon: <CheckCircleIcon />\n  },\n  {\n    status: 'Ready',\n    resourceName: 'Resource name that is long and can wrap',\n    detail: '124 Systems',\n    icon: <ExclamationCircleIcon />\n  }\n];\n\nconst Status: React.FunctionComponent = () => {\n  const [activeTabKey, setActiveTabKey] = React.useState(0);\n  const handleTabClick = (event: React.MouseEvent, tabIndex: number) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const tabContent = (\n    <DescriptionList isHorizontal columnModifier={{ lg: '2Col' }}>\n      {descriptionListData.map(({ status, resourceName, detail, icon }, index) => (\n        <DescriptionListGroup key={index}>\n          <DescriptionListTerm>\n            <Flex>\n              <FlexItem>{icon}</FlexItem>\n              <FlexItem>\n                <Title headingLevel=\"h3\" size=\"md\">\n                  {status}\n                </Title>\n              </FlexItem>\n            </Flex>\n          </DescriptionListTerm>\n          <DescriptionListDescription>\n            <a href=\"#\">{resourceName}</a>\n            <div>{detail}</div>\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      ))}\n    </DescriptionList>\n  );\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            Status\n          </Title>\n        </CardHeader>\n        <CardBody>\n          <Tabs isFilled id=\"status-tabs\" activeKey={activeTabKey} onSelect={handleTabClick}>\n            {[1, 2, 3].map((tab, tabIndex) => (\n              <Tab\n                key={tabIndex}\n                eventKey={tabIndex}\n                title={<TabTitleText>{`Object ${tabIndex + 1}`}</TabTitleText>}\n                tabContentId={`tabContent${tabIndex}`}\n              />\n            ))}\n          </Tabs>\n        </CardBody>\n        <CardBody>\n          {[1, 2, 3].map((tab, tabIndex) => (\n            <TabContent\n              key={tabIndex}\n              eventKey={tabIndex}\n              id={`tabContent${tabIndex}`}\n              activeKey={activeTabKey}\n              hidden={tabIndex !== activeTabKey}\n            >\n              {tabContent}\n            </TabContent>\n          ))}\n        </CardBody>\n      </Card>\n    </>\n  );\n};","title":"Status Tabbed","lang":"ts"}}>
      
    </Example>,
  'Utilization card 1': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardFooter,\n  Title,\n  Gallery,\n  GalleryItem,\n  Flex,\n  FlexItem,\n  Stack,\n  StackItem,\n  Divider\n} from '@patternfly/react-core';\nimport { ChartArea, ChartContainer, ChartGroup, ChartLabel, ChartVoronoiContainer } from '@patternfly/react-charts';\n\nconst UtilizationCard1 = () => (\n  <Gallery hasGutter minWidths={{ default: '360px' }}>\n    <GalleryItem>\n      <Card id=\"utilization-card-1\" component=\"div\">\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            Top Utilized Clusters\n          </Title>\n        </CardTitle>\n        <CardBody>\n          <Flex direction={{ default: 'column' }}>\n            <FlexItem>\n              <Stack>\n                <b>Cluster-1204</b>\n                <span>27.3 cores available</span>\n              </Stack>\n            </FlexItem>\n            <FlexItem>\n              <ChartGroup\n                ariaDesc=\"Mock average cluster utilization\"\n                ariaTitle=\"Mock cluster sparkline chart\"\n                containerComponent={\n                  <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\n                }\n                height={100}\n                maxDomain={{ y: 9 }}\n                padding={0}\n                width={400}\n              >\n                <ChartArea\n                  data={[\n                    { name: 'Cluster', x: '2015', y: 7 },\n                    { name: 'Cluster', x: '2016', y: 6 },\n                    { name: 'Cluster', x: '2017', y: 8 },\n                    { name: 'Cluster', x: '2018', y: 3 },\n                    { name: 'Cluster', x: '2019', y: 4 },\n                    { name: 'Cluster', x: '2020', y: 1 },\n                    { name: 'Cluster', x: '2021', y: 0 }\n                  ]}\n                />\n              </ChartGroup>\n            </FlexItem>\n            <FlexItem>\n              <a href=\"#\">View details</a>\n            </FlexItem>\n          </Flex>\n        </CardBody>\n        <CardBody>\n          <Flex direction={{ default: 'column' }}>\n            <FlexItem>\n              <Stack>\n                <b>Abcdef-1204</b>\n                <span>50.6 cores available</span>\n              </Stack>\n            </FlexItem>\n            <FlexItem>\n              <ChartGroup\n                ariaDesc=\"Mock average cluster utilization\"\n                ariaTitle=\"Mock cluster sparkline chart\"\n                containerComponent={\n                  <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\n                }\n                height={100}\n                maxDomain={{ y: 9 }}\n                padding={0}\n                width={400}\n              >\n                <ChartArea\n                  data={[\n                    { name: 'Cluster', x: '2015', y: 7 },\n                    { name: 'Cluster', x: '2016', y: 6 },\n                    { name: 'Cluster', x: '2017', y: 8 },\n                    { name: 'Cluster', x: '2018', y: 3 },\n                    { name: 'Cluster', x: '2019', y: 4 },\n                    { name: 'Cluster', x: '2020', y: 1 },\n                    { name: 'Cluster', x: '2021', y: 0 }\n                  ]}\n                />\n              </ChartGroup>\n            </FlexItem>\n            <FlexItem>\n              <a href=\"#\">View details</a>\n            </FlexItem>\n          </Flex>\n        </CardBody>\n        <Divider />\n        <CardFooter>\n          <a href=\"#\">View all clusters</a>\n        </CardFooter>\n      </Card>\n    </GalleryItem>\n  </Gallery>\n)","title":"Utilization card 1","lang":"ts"}}>
      
    </Example>,
  'Utilization card 2': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardFooter,\n  Title,\n  Gallery,\n  GalleryItem,\n  Flex,\n  FlexItem,\n  Stack,\n  StackItem,\n  Divider\n} from '@patternfly/react-core';\nimport { ChartArea, ChartContainer, ChartGroup, ChartLabel, ChartVoronoiContainer } from '@patternfly/react-charts';\n\nconst UtilizationCard2 = () => (\n  <Gallery hasGutter minWidths={{ default: '360px' }}>\n    <GalleryItem>\n      <Card id=\"utilization-card-2\" component=\"div\">\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            Top Utilized Clusters\n          </Title>\n        </CardTitle>\n        <CardBody>\n          <Flex direction={{ default: 'column' }}>\n            <FlexItem>\n              <Stack>\n                <a href=\"#\">Cluster-1204</a>\n                <span>27.3 cores available</span>\n              </Stack>\n            </FlexItem>\n            <FlexItem>\n              <ChartGroup\n                ariaDesc=\"Mock average cluster utilization\"\n                ariaTitle=\"Mock cluster sparkline chart\"\n                containerComponent={\n                  <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\n                }\n                height={100}\n                maxDomain={{ y: 9 }}\n                padding={0}\n                width={400}\n              >\n                <ChartArea\n                  data={[\n                    { name: 'Cluster', x: '2015', y: 7 },\n                    { name: 'Cluster', x: '2016', y: 6 },\n                    { name: 'Cluster', x: '2017', y: 8 },\n                    { name: 'Cluster', x: '2018', y: 3 },\n                    { name: 'Cluster', x: '2019', y: 4 },\n                    { name: 'Cluster', x: '2020', y: 1 },\n                    { name: 'Cluster', x: '2021', y: 0 }\n                  ]}\n                />\n              </ChartGroup>\n            </FlexItem>\n          </Flex>\n        </CardBody>\n        <CardBody>\n          <Flex direction={{ default: 'column' }}>\n            <FlexItem>\n              <Stack>\n                <a href=\"#\">Abcdef-1204</a>\n                <span>50.6 cores available</span>\n              </Stack>\n            </FlexItem>\n            <FlexItem>\n              <ChartGroup\n                ariaDesc=\"Mock average cluster utilization\"\n                ariaTitle=\"Mock cluster sparkline chart\"\n                containerComponent={\n                  <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\n                }\n                height={100}\n                maxDomain={{ y: 9 }}\n                padding={0}\n                width={400}\n              >\n                <ChartArea\n                  data={[\n                    { name: 'Cluster', x: '2015', y: 7 },\n                    { name: 'Cluster', x: '2016', y: 6 },\n                    { name: 'Cluster', x: '2017', y: 8 },\n                    { name: 'Cluster', x: '2018', y: 3 },\n                    { name: 'Cluster', x: '2019', y: 4 },\n                    { name: 'Cluster', x: '2020', y: 1 },\n                    { name: 'Cluster', x: '2021', y: 0 }\n                  ]}\n                />\n              </ChartGroup>\n            </FlexItem>\n          </Flex>\n        </CardBody>\n        <Divider />\n        <CardFooter>\n          <a href=\"#\">View all clusters</a>\n        </CardFooter>\n      </Card>\n    </GalleryItem>\n  </Gallery>\n)","title":"Utilization card 2","lang":"ts"}}>
      
    </Example>,
  'Utilization card 3': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardHeader,\n  CardActions,\n  CardBody,\n  CardFooter,\n  Title,\n  Gallery,\n  GalleryItem,\n  Flex,\n  FlexItem,\n  Stack,\n  StackItem,\n  Divider,\n  Select,\n  SelectOption\n} from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { Chart, ChartStack, ChartBar, ChartTooltip } from '@patternfly/react-charts';\nimport chart_color_gold_100 from '@patternfly/react-tokens/dist/esm/chart_color_gold_100';\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\n\nconst UtilizationCard3: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const selectItems = [\n    <SelectOption value=\"Last hour\" key=\"option1\" />,\n    <SelectOption value=\"Last 6 hours\" key=\"option2\" />,\n    <SelectOption value=\"Last 24 hours\" key=\"option3\" />,\n    <SelectOption value=\"Last 7 days\" key=\"option4\" />\n  ];\n\n  return (\n    <React.Fragment>\n      <b>Note:</b> Custom CSS is used in this demo to align the card title and select toggle text to{' '}\n      <code>baseline</code> alignment.\n      <br />\n      <br />\n      <Gallery hasGutter minWidths={{ default: '360px' }}>\n        <GalleryItem>\n          <Card id=\"utilization-card-1\" component=\"div\">\n            <CardHeader className=\"pf-u-align-items-flex-start\">\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\" style={{ paddingTop: '3px' }}>\n                  Recommendations\n                </Title>\n              </CardTitle>\n              <CardActions hasNoOffset>\n                <Select\n                  onSelect={() => setIsOpen(!isOpen)}\n                  onToggle={() => setIsOpen(!isOpen)}\n                  isOpen={isOpen}\n                  placeholderText=\"Filter\"\n                  position=\"right\"\n                  isPlain\n                >\n                  {selectItems}\n                </Select>\n              </CardActions>\n            </CardHeader>\n            <CardBody>\n              <Flex direction={{ default: 'column' }}>\n                <FlexItem>\n                  <span>System</span>\n                </FlexItem>\n                <Flex>\n                  <ExclamationCircleIcon className=\"pf-u-danger-color-100\" aria-hidden />\n                  <a href=\"#\">25 incidents detected</a>\n                </Flex>\n                <FlexItem>\n                  <Chart\n                    ariaDesc=\"Mock incidents chart\"\n                    ariaTitle=\"Mock stack chart\"\n                    domainPadding={{ x: [30, 25] }}\n                    legendData={[\n                      { name: 'Low', symbol: { fill: chart_color_gold_100.value } },\n                      { name: 'Important', symbol: { fill: chart_color_gold_300.value } },\n                      { name: 'Moderate', symbol: { fill: chart_color_orange_300.value } },\n                      { name: 'Critical', symbol: { fill: chart_color_red_100.value } }\n                    ]}\n                    legendPosition=\"bottom-left\"\n                    height={50}\n                    padding={{\n                      bottom: 40,\n                      left: 0,\n                      right: 0,\n                      top: 0\n                    }}\n                    width={350}\n                    showAxis={false}\n                  >\n                    <ChartStack\n                      horizontal\n                      colorScale={[\n                        chart_color_gold_100.value,\n                        chart_color_gold_300.value,\n                        chart_color_orange_300.value,\n                        chart_color_red_100.value\n                      ]}\n                    >\n                      <ChartBar\n                        data={[\n                          {\n                            name: 'Low',\n                            x: 'Cluster A',\n                            y: 6,\n                            label: 'Low: 6'\n                          }\n                        ]}\n                        labelComponent={<ChartTooltip constrainToVisibleArea />}\n                      />\n                      <ChartBar\n                        data={[\n                          {\n                            name: 'Important',\n                            x: 'Cluster A',\n                            y: 2,\n                            label: 'Important: 2'\n                          }\n                        ]}\n                        labelComponent={<ChartTooltip constrainToVisibleArea />}\n                      />\n                      <ChartBar\n                        data={[\n                          {\n                            name: 'Moderate',\n                            x: 'Cluster A',\n                            y: 4,\n                            label: 'Moderate: 4'\n                          }\n                        ]}\n                        labelComponent={<ChartTooltip constrainToVisibleArea />}\n                      />\n                      <ChartBar\n                        data={[\n                          {\n                            name: 'Critical',\n                            x: 'Cluster A',\n                            y: 2,\n                            label: 'Critical: 2'\n                          }\n                        ]}\n                        labelComponent={<ChartTooltip constrainToVisibleArea />}\n                      />\n                    </ChartStack>\n                  </Chart>\n                </FlexItem>\n              </Flex>\n            </CardBody>\n            <CardFooter>\n              <a href=\"#\">See details</a>\n            </CardFooter>\n          </Card>\n        </GalleryItem>\n      </Gallery>\n    </React.Fragment>\n  );\n};","title":"Utilization card 3","lang":"ts"}}>
      
    </Example>,
  'Utilization card 4': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { Card, CardTitle, CardBody, CardFooter, Title, Gallery, GalleryItem } from '@patternfly/react-core';\nimport { ChartDonutThreshold, ChartDonutUtilization } from '@patternfly/react-charts';\n\nconst UtilizationCard4 = () => (\n  <Gallery hasGutter minWidths={{ default: '360px' }}>\n    <GalleryItem>\n      <Card id=\"utilization-card-1\" component=\"div\">\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            CPU Usage\n          </Title>\n        </CardTitle>\n        <CardBody>\n          <ChartDonutThreshold\n            ariaDesc=\"Mock storage capacity\"\n            ariaTitle=\"Mock donut utilization chart\"\n            constrainToVisibleArea={true}\n            data={[\n              { x: 'Warning at 60%', y: 60 },\n              { x: 'Danger at 90%', y: 90 }\n            ]}\n            height={200}\n            labels={({ datum }) => (datum.x ? datum.x : null)}\n            padding={{\n              bottom: 0,\n              left: 10,\n              right: 150,\n              top: 0\n            }}\n            width={350}\n          >\n            <ChartDonutUtilization\n              data={{ x: 'Storage capacity', y: 80 }}\n              labels={({ datum }) => (datum.x ? `${datum.x}: ${datum.y}%` : null)}\n              legendData={[{ name: `Capacity: 80%` }, { name: 'Warning at 60%' }, { name: 'Danger at 90%' }]}\n              legendOrientation=\"vertical\"\n              title=\"80%\"\n              subTitle=\"of 100 GBps\"\n              thresholds={[{ value: 60 }, { value: 90 }]}\n            />\n          </ChartDonutThreshold>{' '}\n        </CardBody>\n        <CardFooter>\n          <a href=\"#\">See details</a>\n        </CardFooter>\n      </Card>\n    </GalleryItem>\n  </Gallery>\n)","title":"Utilization card 4","lang":"ts"}}>
      
    </Example>,
  'Nested cards': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  CardExpandableContent,\n  Checkbox,\n  Title,\n  Divider,\n  Grid,\n  GridItem,\n  Flex,\n  FlexItem\n} from '@patternfly/react-core';\nimport { ChartArea, ChartGroup, ChartVoronoiContainer } from '@patternfly/react-charts';\n\nCardNestedDemo = () => {\n  const [isCardExpanded1, onCardExpand1] = React.useState(true);\n  const [isCardExpanded2, onCardExpand2] = React.useState(false);\n  const [isCardExpanded3, onCardExpand3] = React.useState(false);\n  const [isToggleOnRight, onCheckClick] = React.useState(false);\n\n  return (\n    <>\n      <div style={{ marginBottom: '12px' }}>\n        <Checkbox\n          id=\"isToggleRightAligned\"\n          key=\"isToggleRightAligned\"\n          label=\"Align expand toggle on right\"\n          isChecked={isToggleOnRight}\n          onChange={checked => onCheckClick(!isToggleOnRight)}\n        />\n      </div>\n      <Card id=\"nested-cards\">\n        <CardHeader>\n          <CardTitle id=\"nested-cards-toggle-title\">\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {' '}\n              Hardware Monitor{' '}\n            </Title>\n          </CardTitle>\n        </CardHeader>\n        <Card id=\"nested-cards-toggle-group-1\" isPlain isExpanded={isCardExpanded1}>\n          <CardHeader\n            onExpand={() => onCardExpand1(!isCardExpanded1)}\n            isToggleRightAligned={isToggleOnRight}\n            toggleButtonProps={{\n              id: 'toggle-button-1',\n              'aria-label': 'Details',\n              'aria-labelledby': 'nested-cards-toggle-group-1-title toggle-button-1',\n              'aria-expanded': isCardExpanded1\n            }}\n          >\n            <CardTitle id=\"nested-cards-toggle-group-1-title\">\n              <span className=\"pf-u-font-weight-light\">CPU 1</span>\n            </CardTitle>\n          </CardHeader>\n          <CardExpandableContent>\n            <CardBody>\n              <Grid hasGutter>\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Temperature</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>64C</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">100C</div>\n                          <div className=\"pf-l-flex__item\">50C</div>\n                          <div className=\"pf-l-flex__item\">0C</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU temperature\"\n                          ariaTitle=\"Mock CPU temperature sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 100 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 25 },\n                              { name: 'Temp', x: '2', y: 40 },\n                              { name: 'Temp', x: '3', y: 20 },\n                              { name: 'Temp', x: '4', y: 60 },\n                              { name: 'Temp', x: '5', y: 20 },\n                              { name: 'Temp', x: '6', y: 41 },\n                              { name: 'Temp', x: '7', y: 45 },\n                              { name: 'Temp', x: '8', y: 41 },\n                              { name: 'Temp', x: '9', y: 62 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n                <Divider className=\"pf-u-hidden-on-md\" />\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Speed</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>2.3Ghz</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">3.6Ghz</div>\n                          <div className=\"pf-l-flex__item\">1.5Ghz</div>\n                          <div className=\"pf-l-flex__item\">0GHZ</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU speed\"\n                          ariaTitle=\"Mock CPU speed sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 3.6 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 0.9 },\n                              { name: 'Temp', x: '2', y: 1.44 },\n                              { name: 'Temp', x: '3', y: 0.72 },\n                              { name: 'Temp', x: '4', y: 2.16 },\n                              { name: 'Temp', x: '5', y: 0.72 },\n                              { name: 'Temp', x: '6', y: 1.48 },\n                              { name: 'Temp', x: '7', y: 1.62 },\n                              { name: 'Temp', x: '8', y: 1.48 },\n                              { name: 'Temp', x: '9', y: 2.23 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n              </Grid>\n            </CardBody>\n          </CardExpandableContent>\n        </Card>\n        <Card id=\"nested-cards-toggle-group-2\" isPlain isExpanded={isCardExpanded3}>\n          <CardHeader\n            onExpand={() => onCardExpand3(!isCardExpanded3)}\n            isToggleRightAligned={isToggleOnRight}\n            toggleButtonProps={{\n              id: 'toggle-button-2',\n              'aria-label': 'Details',\n              'aria-labelledby': 'nested-cards-toggle-group-2-title toggle-button-2',\n              'aria-expanded': isCardExpanded3\n            }}\n          >\n            <CardTitle id=\"nested-cards-toggle-group-2-title\">\n              <span className=\"pf-u-font-weight-light\">CPU 2</span>\n            </CardTitle>\n          </CardHeader>\n          <CardExpandableContent>\n            <CardBody>\n              <Grid hasGutter>\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Temperature</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>64C</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">100C</div>\n                          <div className=\"pf-l-flex__item\">50C</div>\n                          <div className=\"pf-l-flex__item\">0C</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU temperature\"\n                          ariaTitle=\"Mock CPU temperature sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 100 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 25 },\n                              { name: 'Temp', x: '2', y: 40 },\n                              { name: 'Temp', x: '3', y: 20 },\n                              { name: 'Temp', x: '4', y: 60 },\n                              { name: 'Temp', x: '5', y: 20 },\n                              { name: 'Temp', x: '6', y: 41 },\n                              { name: 'Temp', x: '7', y: 45 },\n                              { name: 'Temp', x: '8', y: 41 },\n                              { name: 'Temp', x: '9', y: 62 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n                <Divider className=\"pf-u-hidden-on-md\" />\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Speed</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>2.3Ghz</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">3.6Ghz</div>\n                          <div className=\"pf-l-flex__item\">1.5Ghz</div>\n                          <div className=\"pf-l-flex__item\">0GHZ</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU speed\"\n                          ariaTitle=\"Mock CPU speed sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 3.6 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 0.9 },\n                              { name: 'Temp', x: '2', y: 1.44 },\n                              { name: 'Temp', x: '3', y: 0.72 },\n                              { name: 'Temp', x: '4', y: 2.16 },\n                              { name: 'Temp', x: '5', y: 0.72 },\n                              { name: 'Temp', x: '6', y: 1.48 },\n                              { name: 'Temp', x: '7', y: 1.62 },\n                              { name: 'Temp', x: '8', y: 1.48 },\n                              { name: 'Temp', x: '9', y: 2.23 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n              </Grid>\n            </CardBody>\n          </CardExpandableContent>\n        </Card>\n        <Card id=\"nested-cards-toggle-group-3\" isPlain isExpanded={isCardExpanded2}>\n          <CardHeader\n            onExpand={() => onCardExpand2(!isCardExpanded2)}\n            isToggleRightAligned={isToggleOnRight}\n            toggleButtonProps={{\n              id: 'toggle-button-3',\n              'aria-label': 'Details',\n              'aria-labelledby': 'nested-cards-toggle-group-3-title toggle-button-3',\n              'aria-expanded': isCardExpanded2\n            }}\n          >\n            <CardTitle id=\"nested-cards-toggle-group-3-title\">\n              <span className=\"pf-u-font-weight-light\">CPU 3</span>\n            </CardTitle>\n          </CardHeader>\n          <CardExpandableContent>\n            <CardBody>\n              <Grid hasGutter>\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Temperature</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>64C</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">100C</div>\n                          <div className=\"pf-l-flex__item\">50C</div>\n                          <div className=\"pf-l-flex__item\">0C</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU temperature\"\n                          ariaTitle=\"Mock CPU temperature sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 100 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 25 },\n                              { name: 'Temp', x: '2', y: 40 },\n                              { name: 'Temp', x: '3', y: 20 },\n                              { name: 'Temp', x: '4', y: 60 },\n                              { name: 'Temp', x: '5', y: 20 },\n                              { name: 'Temp', x: '6', y: 41 },\n                              { name: 'Temp', x: '7', y: 45 },\n                              { name: 'Temp', x: '8', y: 41 },\n                              { name: 'Temp', x: '9', y: 62 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n                <Divider className=\"pf-u-hidden-on-md\" />\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Speed</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>2.3Ghz</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">3.6Ghz</div>\n                          <div className=\"pf-l-flex__item\">1.5Ghz</div>\n                          <div className=\"pf-l-flex__item\">0GHZ</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU speed\"\n                          ariaTitle=\"Mock CPU speed sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 3.6 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 0.9 },\n                              { name: 'Temp', x: '2', y: 1.44 },\n                              { name: 'Temp', x: '3', y: 0.72 },\n                              { name: 'Temp', x: '4', y: 2.16 },\n                              { name: 'Temp', x: '5', y: 0.72 },\n                              { name: 'Temp', x: '6', y: 1.48 },\n                              { name: 'Temp', x: '7', y: 1.62 },\n                              { name: 'Temp', x: '8', y: 1.48 },\n                              { name: 'Temp', x: '9', y: 2.23 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n              </Grid>\n            </CardBody>\n          </CardExpandableContent>\n        </Card>\n      </Card>\n    </>\n  );\n};","title":"Nested cards","lang":"js"}}>
      
    </Example>,
  'With accordion': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardHeader,\n  Title,\n  Accordion,\n  AccordionItem,\n  AccordionToggle,\n  AccordionContent,\n  Divider,\n  Grid,\n  GridItem,\n  Flex,\n  FlexItem\n} from '@patternfly/react-core';\nimport { ChartArea, ChartContainer, ChartGroup, ChartLabel, ChartVoronoiContainer } from '@patternfly/react-charts';\n\nconst AccordionCard: React.FunctionComponent = () => {\n  const [openCPU, setOpenCPU] = React.useState('cpu1');\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            Hardware Monitor\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Accordion>\n          <AccordionItem>\n            <AccordionToggle\n              id=\"cpu1-toggle\"\n              onClick={() => {\n                if (openCPU === 'cpu1') {\n                  setOpenCPU(null);\n                } else {\n                  setOpenCPU('cpu1');\n                }\n              }}\n              isExpanded={openCPU === 'cpu1'}\n            >\n              CPU 1\n            </AccordionToggle>\n            <AccordionContent isHidden={openCPU !== 'cpu1'}>\n              <Grid hasGutter>\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Temperature</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>64C</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">100C</div>\n                          <div className=\"pf-l-flex__item\">50C</div>\n                          <div className=\"pf-l-flex__item\">0C</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU temperature\"\n                          ariaTitle=\"Mock CPU temperature sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 100 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 25 },\n                              { name: 'Temp', x: '2', y: 40 },\n                              { name: 'Temp', x: '3', y: 20 },\n                              { name: 'Temp', x: '4', y: 60 },\n                              { name: 'Temp', x: '5', y: 20 },\n                              { name: 'Temp', x: '6', y: 41 },\n                              { name: 'Temp', x: '7', y: 45 },\n                              { name: 'Temp', x: '8', y: 41 },\n                              { name: 'Temp', x: '9', y: 62 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n                <Divider className=\"pf-u-hidden-on-md\" />\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Speed</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>2.3Ghz</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">3.6Ghz</div>\n                          <div className=\"pf-l-flex__item\">1.5Ghz</div>\n                          <div className=\"pf-l-flex__item\">0GHZ</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU speed\"\n                          ariaTitle=\"Mock CPU speed sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 3.6 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 0.9 },\n                              { name: 'Temp', x: '2', y: 1.44 },\n                              { name: 'Temp', x: '3', y: 0.72 },\n                              { name: 'Temp', x: '4', y: 2.16 },\n                              { name: 'Temp', x: '5', y: 0.72 },\n                              { name: 'Temp', x: '6', y: 1.48 },\n                              { name: 'Temp', x: '7', y: 1.62 },\n                              { name: 'Temp', x: '8', y: 1.48 },\n                              { name: 'Temp', x: '9', y: 2.23 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n              </Grid>\n            </AccordionContent>\n          </AccordionItem>\n          <AccordionItem>\n            <AccordionToggle\n              id=\"cpu2-toggle\"\n              onClick={() => {\n                if (openCPU === 'cpu2') {\n                  setOpenCPU(null);\n                } else {\n                  setOpenCPU('cpu2');\n                }\n              }}\n              isExpanded={openCPU === 'cpu2'}\n            >\n              CPU 2\n            </AccordionToggle>\n            <AccordionContent isHidden={openCPU !== 'cpu2'}>\n              <Grid hasGutter>\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Temperature</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>64C</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">100C</div>\n                          <div className=\"pf-l-flex__item\">50C</div>\n                          <div className=\"pf-l-flex__item\">0C</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU temperature\"\n                          ariaTitle=\"Mock CPU temperature sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 100 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 25 },\n                              { name: 'Temp', x: '2', y: 40 },\n                              { name: 'Temp', x: '3', y: 20 },\n                              { name: 'Temp', x: '4', y: 60 },\n                              { name: 'Temp', x: '5', y: 20 },\n                              { name: 'Temp', x: '6', y: 41 },\n                              { name: 'Temp', x: '7', y: 45 },\n                              { name: 'Temp', x: '8', y: 41 },\n                              { name: 'Temp', x: '9', y: 62 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n                <Divider className=\"pf-u-hidden-on-md\" />\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Speed</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>2.3Ghz</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">3.6Ghz</div>\n                          <div className=\"pf-l-flex__item\">1.5Ghz</div>\n                          <div className=\"pf-l-flex__item\">0GHZ</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU speed\"\n                          ariaTitle=\"Mock CPU speed sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 3.6 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 0.9 },\n                              { name: 'Temp', x: '2', y: 1.44 },\n                              { name: 'Temp', x: '3', y: 0.72 },\n                              { name: 'Temp', x: '4', y: 2.16 },\n                              { name: 'Temp', x: '5', y: 0.72 },\n                              { name: 'Temp', x: '6', y: 1.48 },\n                              { name: 'Temp', x: '7', y: 1.62 },\n                              { name: 'Temp', x: '8', y: 1.48 },\n                              { name: 'Temp', x: '9', y: 2.23 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n              </Grid>\n            </AccordionContent>\n          </AccordionItem>\n          <AccordionItem>\n            <AccordionToggle\n              id=\"cpu3-toggle\"\n              onClick={() => {\n                if (openCPU === 'cpu3') {\n                  setOpenCPU(null);\n                } else {\n                  setOpenCPU('cpu3');\n                }\n              }}\n              isExpanded={openCPU === 'cpu3'}\n            >\n              CPU 3\n            </AccordionToggle>\n            <AccordionContent isHidden={openCPU !== 'cpu3'}>\n              <Grid hasGutter>\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Temperature</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>64C</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">100C</div>\n                          <div className=\"pf-l-flex__item\">50C</div>\n                          <div className=\"pf-l-flex__item\">0C</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU temperature\"\n                          ariaTitle=\"Mock CPU temperature sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 100 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 25 },\n                              { name: 'Temp', x: '2', y: 40 },\n                              { name: 'Temp', x: '3', y: 20 },\n                              { name: 'Temp', x: '4', y: 60 },\n                              { name: 'Temp', x: '5', y: 20 },\n                              { name: 'Temp', x: '6', y: 41 },\n                              { name: 'Temp', x: '7', y: 45 },\n                              { name: 'Temp', x: '8', y: 41 },\n                              { name: 'Temp', x: '9', y: 62 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n                <Divider className=\"pf-u-hidden-on-md\" />\n                <Grid hasGutter>\n                  <GridItem md={4}>\n                    <Flex\n                      className=\"pf-u-h-100-on-md\"\n                      direction={{ md: 'column' }}\n                      spaceItems={{ md: 'spaceItemsNone' }}\n                      justifyContent={{ md: 'justifyContentCenter' }}\n                    >\n                      <FlexItem>\n                        <b>Speed</b>\n                      </FlexItem>\n                      <Divider\n                        className=\"pf-u-hidden-on-md\"\n                        orientation={{\n                          default: 'vertical'\n                        }}\n                        inset={{ default: 'insetSm' }}\n                      />\n                      <FlexItem>\n                        <span>2.3Ghz</span>\n                      </FlexItem>\n                    </Flex>\n                  </GridItem>\n                  <GridItem md={8}>\n                    <Grid hasGutter>\n                      <GridItem span={2}>\n                        <Flex\n                          direction={{ default: 'column' }}\n                          spaceItems={{ default: 'spaceItemsNone' }}\n                          alignItems={{ md: 'alignItemsFlexEnd' }}\n                        >\n                          <div className=\"pf-l-flex__item\">3.6Ghz</div>\n                          <div className=\"pf-l-flex__item\">1.5Ghz</div>\n                          <div className=\"pf-l-flex__item\">0GHZ</div>\n                        </Flex>\n                      </GridItem>\n                      <GridItem span={10}>\n                        <ChartGroup\n                          ariaDesc=\"Mock CPU speed\"\n                          ariaTitle=\"Mock CPU speed sparkline chart\"\n                          containerComponent={\n                            <ChartVoronoiContainer\n                              labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                              constrainToVisibleArea\n                            />\n                          }\n                          height={60}\n                          maxDomain={{ y: 3.6 }}\n                          padding={0}\n                          width={400}\n                        >\n                          <ChartArea\n                            data={[\n                              { name: 'Temp', x: '1', y: 0.9 },\n                              { name: 'Temp', x: '2', y: 1.44 },\n                              { name: 'Temp', x: '3', y: 0.72 },\n                              { name: 'Temp', x: '4', y: 2.16 },\n                              { name: 'Temp', x: '5', y: 0.72 },\n                              { name: 'Temp', x: '6', y: 1.48 },\n                              { name: 'Temp', x: '7', y: 1.62 },\n                              { name: 'Temp', x: '8', y: 1.48 },\n                              { name: 'Temp', x: '9', y: 2.23 }\n                            ]}\n                          />\n                        </ChartGroup>\n                      </GridItem>\n                    </Grid>\n                  </GridItem>\n                </Grid>\n              </Grid>\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      </CardBody>\n    </Card>\n  );\n};","title":"With accordion","lang":"ts"}}>
      
    </Example>,
  'Trend card 1': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardHeader,\n  CardActions,\n  Title,\n  Gallery,\n  GalleryItem,\n  Flex,\n  FlexItem,\n  Divider,\n  Select,\n  SelectOption\n} from '@patternfly/react-core';\nimport { ChartArea, ChartContainer, ChartGroup, ChartLabel, ChartVoronoiContainer } from '@patternfly/react-charts';\n\nconst TrendCard1: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const selectItems = [\n    <SelectOption value=\"Last hour\" key=\"option1\" />,\n    <SelectOption value=\"Last 6 hours\" key=\"option2\" />,\n    <SelectOption value=\"Last 24 hours\" key=\"option3\" />,\n    <SelectOption value=\"Last 7 days\" key=\"option4\" />\n  ];\n  return (\n    <React.Fragment>\n      <b>Note:</b> Custom CSS is used in this demo to align the card title and select toggle text to{' '}\n      <code>baseline</code> alignment.\n      <br />\n      <br />\n      <Gallery hasGutter minWidths={{ default: '360px' }}>\n        <GalleryItem>\n          <Card id=\"trend-card-1\" component=\"div\">\n            <CardHeader>\n              <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsNone' }}>\n                <FlexItem>\n                  <CardTitle>\n                    <Title headingLevel=\"h1\">1,050,765 IOPS</Title>\n                  </CardTitle>\n                </FlexItem>\n                <FlexItem>\n                  <span className=\"pf-u-color-200\">Workload</span>\n                </FlexItem>\n              </Flex>\n              <CardActions hasNoOffset style={{ paddingTop: '1px' }}>\n                <Select\n                  onSelect={() => setIsOpen(!isOpen)}\n                  onToggle={() => setIsOpen(!isOpen)}\n                  placeholderText=\"Filter\"\n                  isOpen={isOpen}\n                  position=\"right\"\n                  isPlain\n                >\n                  {selectItems}\n                </Select>\n              </CardActions>\n            </CardHeader>\n            <CardBody>\n              <ChartGroup\n                ariaDesc=\"Mock average cluster utilization\"\n                ariaTitle=\"Mock cluster sparkline chart\"\n                containerComponent={\n                  <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\n                }\n                height={100}\n                maxDomain={{ y: 9 }}\n                padding={0}\n                width={400}\n              >\n                <ChartArea\n                  data={[\n                    { name: 'Cluster', x: '2015', y: 7 },\n                    { name: 'Cluster', x: '2016', y: 6 },\n                    { name: 'Cluster', x: '2017', y: 8 },\n                    { name: 'Cluster', x: '2018', y: 3 },\n                    { name: 'Cluster', x: '2019', y: 4 },\n                    { name: 'Cluster', x: '2020', y: 1 },\n                    { name: 'Cluster', x: '2021', y: 0 }\n                  ]}\n                />\n              </ChartGroup>\n            </CardBody>\n          </Card>\n        </GalleryItem>\n      </Gallery>\n    </React.Fragment>\n  );\n};","title":"Trend card 1","lang":"ts"}}>
      
    </Example>,
  'Trend card 2': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardFooter,\n  CardHeader,\n  Title,\n  Gallery,\n  GalleryItem,\n  Flex,\n  FlexItem\n} from '@patternfly/react-core';\nimport { ChartArea, ChartContainer, ChartGroup, ChartLabel, ChartVoronoiContainer } from '@patternfly/react-charts';\n\nconst TrendCard2 = () => (\n  <Gallery hasGutter minWidths={{ default: '360px' }}>\n    <GalleryItem>\n      <Card id=\"trend-card-2\" component=\"div\">\n        <CardHeader>\n          <Flex alignItems={{ default: 'alignItemsCenter' }}>\n            <FlexItem flex={{ default: 'flexNone' }}>\n              <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsNone' }}>\n                <FlexItem>\n                  <CardTitle>\n                    <Title headingLevel=\"h1\" size=\"2xl\">\n                      842 TB\n                    </Title>\n                  </CardTitle>\n                </FlexItem>\n                <FlexItem>\n                  <span className=\"pf-u-color-200\">Storage capacity</span>\n                </FlexItem>\n              </Flex>\n            </FlexItem>\n            <FlexItem flex={{ default: 'flex_1' }}>\n              <ChartGroup\n                ariaDesc=\"Mock average cluster utilization\"\n                ariaTitle=\"Mock cluster sparkline chart\"\n                containerComponent={\n                  <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\n                }\n                height={100}\n                maxDomain={{ y: 9 }}\n                padding={0}\n                width={400}\n              >\n                <ChartArea\n                  data={[\n                    { name: 'Cluster', x: '2015', y: 7 },\n                    { name: 'Cluster', x: '2016', y: 6 },\n                    { name: 'Cluster', x: '2017', y: 8 },\n                    { name: 'Cluster', x: '2018', y: 3 },\n                    { name: 'Cluster', x: '2019', y: 4 },\n                    { name: 'Cluster', x: '2020', y: 1 },\n                    { name: 'Cluster', x: '2021', y: 0 }\n                  ]}\n                />\n              </ChartGroup>\n            </FlexItem>\n          </Flex>\n        </CardHeader>\n        <CardFooter>\n          <Flex>\n            <FlexItem>\n              <a href=\"#\">Action 1</a>\n            </FlexItem>\n            <FlexItem>\n              <a href=\"#\">Action 2</a>\n            </FlexItem>\n          </Flex>\n        </CardFooter>\n      </Card>\n    </GalleryItem>\n  </Gallery>\n)","title":"Trend card 2","lang":"ts"}}>
      
    </Example>,
  'Log view': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  CardBody,\n  CardFooter,\n  Gallery,\n  Title,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Select,\n  SelectOption,\n  Divider\n} from '@patternfly/react-core';\n\nCardLogViewDemo = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const onActionSelect = event => {\n    setIsOpen(!isOpen);\n  };\n\n  const onActionToggle = isOpen => {\n    setIsOpen(isOpen);\n  };\n\n  const selectItems = [\n    <SelectOption value=\"Most recent\" key=\"option1\" />,\n    <SelectOption value=\"Last 6 hours\" key=\"option2\" />,\n    <SelectOption value=\"Last 24 hours\" key=\"option3\" />,\n    <SelectOption value=\"Last 7 days\" key=\"option4\" />\n  ];\n\n  return (\n    <React.Fragment>\n      <b>Note:</b> Custom CSS is used in this demo to align the card title and select toggle text to{' '}\n      <code>baseline</code> alignment.\n      <br />\n      <br />\n      <Gallery hasGutter style={{ '--pf-l-gallery--GridTemplateColumns--min': '360px' }}>\n        <Card id=\"card-log-view-example\">\n          <CardHeader className=\"pf-u-align-items-flex-start\">\n            <CardActions hasNoOffset>\n              <Select\n                onSelect={onActionSelect}\n                onToggle={onActionToggle}\n                placeholderText=\"Most recent\"\n                isOpen={isOpen}\n                position=\"right\"\n                isPlain\n              >\n                {selectItems}\n              </Select>\n            </CardActions>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\" style={{ paddingTop: '3px' }}>\n                Activity\n              </Title>\n            </CardTitle>\n          </CardHeader>\n          <CardBody>\n            <DescriptionList>\n              <DescriptionListGroup>\n                <DescriptionListTerm>Readiness probe failed</DescriptionListTerm>\n                <DescriptionListDescription>\n                  Readiness probe failed: Get https://10.131.0.7:5000/healthz: dial tcp 10.131.0.7:5000: connect:\n                  connection refused\n                </DescriptionListDescription>\n                <DescriptionListDescription>\n                  <time className=\"pf-u-color-200 pf-u-font-size-sm\">Jun 17, 11:02 am</time>\n                </DescriptionListDescription>\n              </DescriptionListGroup>\n              <DescriptionListGroup>\n                <DescriptionListTerm>Successful assignment</DescriptionListTerm>\n                <DescriptionListDescription>\n                  Successfully assigned default/example to ip-10-0-130-149.ec2.internal\n                </DescriptionListDescription>\n                <DescriptionListDescription>\n                  <time className=\"pf-u-color-200 pf-u-font-size-sm\">Jun 17, 11:13 am</time>\n                </DescriptionListDescription>\n              </DescriptionListGroup>\n              <DescriptionListGroup>\n                <DescriptionListTerm>Pulling image</DescriptionListTerm>\n                <DescriptionListDescription>Pulling image \"openshift/hello-openshift\"</DescriptionListDescription>\n                <DescriptionListDescription>\n                  <time className=\"pf-u-color-200 pf-u-font-size-sm\">Jun 17, 10:59 am</time>\n                </DescriptionListDescription>\n              </DescriptionListGroup>\n              <DescriptionListGroup>\n                <DescriptionListTerm>Created container</DescriptionListTerm>\n                <DescriptionListDescription>Created container hello-openshift</DescriptionListDescription>\n                <DescriptionListDescription>\n                  <time className=\"pf-u-color-200 pf-u-font-size-sm\">Jun 17, 10:45 am</time>\n                </DescriptionListDescription>\n              </DescriptionListGroup>\n            </DescriptionList>\n          </CardBody>\n          <Divider />\n          <CardFooter>\n            <a href=\"#\">View all activity</a>\n          </CardFooter>\n        </Card>\n      </Gallery>\n    </React.Fragment>\n  );\n};","title":"Log view","lang":"js"}}>
      
    </Example>,
  'Events view': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  CardBody,\n  CardFooter,\n  Gallery,\n  Flex,\n  FlexItem,\n  Title,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Spinner,\n  Select,\n  SelectOption,\n  Divider\n} from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\n\nCardEventViewDemo = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const onActionSelect = event => {\n    setIsOpen(!isOpen);\n  };\n\n  const onActionToggle = isOpen => {\n    setIsOpen(isOpen);\n  };\n\n  const selectItems = [\n    <SelectOption value=\"Success\" key=\"option1\" />,\n    <SelectOption value=\"Error\" key=\"option2\" />,\n    <SelectOption value=\"Warning\" key=\"option3\" />\n  ];\n\n  return (\n    <React.Fragment>\n      <b>Note:</b> Custom CSS is used in this demo to align the card title and select toggle text to{' '}\n      <code>baseline</code> alignment.\n      <br />\n      <br />\n      <Gallery hasGutter style={{ '--pf-l-gallery--GridTemplateColumns--min': '360px' }}>\n        <Card id=\"card-events-view-example\">\n          <CardHeader className=\"pf-u-align-items-flex-start\">\n            <CardActions hasNoOffset>\n              <Select\n                onSelect={onActionSelect}\n                onToggle={onActionToggle}\n                placeholderText=\"Status\"\n                isOpen={isOpen}\n                position=\"right\"\n                isPlain\n              >\n                {selectItems}\n              </Select>\n            </CardActions>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\" style={{ paddingTop: '3px' }}>\n                Events\n              </Title>\n            </CardTitle>\n          </CardHeader>\n          <CardBody>\n            <DescriptionList>\n              <DescriptionListGroup>\n                <DescriptionListTerm>\n                  <Flex flexWrap={{ default: 'nowrap' }}>\n                    <FlexItem>\n                      <ExclamationCircleIcon className=\"pf-u-danger-color-100\" aria-hidden=\"true\" />\n                    </FlexItem>\n                    <FlexItem>\n                      <span>Readiness probe failed</span>\n                    </FlexItem>\n                  </Flex>\n                </DescriptionListTerm>\n                <DescriptionListDescription>\n                  Readiness probe failed: Get https://10.131.0.7:5000/healthz: dial tcp 10.131.0.7:5000: connect:\n                  connection refused\n                </DescriptionListDescription>\n                <DescriptionListDescription>\n                  <time className=\"pf-u-color-200 pf-u-font-size-sm\">Jun 17, 11:02 am</time>\n                </DescriptionListDescription>\n              </DescriptionListGroup>\n              <DescriptionListGroup>\n                <DescriptionListTerm>\n                  <Flex flexWrap={{ default: 'nowrap' }}>\n                    <FlexItem>\n                      <CheckCircleIcon className=\"pf-u-success-color-100\" aria-hidden=\"true\" />\n                    </FlexItem>\n                    <FlexItem>\n                      <span>Successful assignment</span>\n                    </FlexItem>\n                  </Flex>\n                </DescriptionListTerm>\n                <DescriptionListDescription>\n                  Successfully assigned default/example to ip-10-0-130-149.ec2.internal\n                </DescriptionListDescription>\n                <DescriptionListDescription>\n                  <time className=\"pf-u-color-200 pf-u-font-size-sm\">Jun 17, 11:13 am</time>\n                </DescriptionListDescription>\n              </DescriptionListGroup>\n              <DescriptionListGroup>\n                <DescriptionListTerm>\n                  <Flex flexWrap={{ default: 'nowrap' }}>\n                    <FlexItem>\n                      <Spinner size=\"md\" aria-label=\"loading spinner\" />\n                    </FlexItem>\n                    <FlexItem>\n                      <span>Pulling image</span>\n                    </FlexItem>\n                  </Flex>\n                </DescriptionListTerm>\n                <DescriptionListDescription>Pulling image \"openshift/hello-openshift\"</DescriptionListDescription>\n                <DescriptionListDescription>\n                  <time className=\"pf-u-color-200 pf-u-font-size-sm\">Jun 17, 10:59 am</time>\n                </DescriptionListDescription>\n              </DescriptionListGroup>\n              <DescriptionListGroup>\n                <DescriptionListTerm>\n                  <Flex flexWrap={{ default: 'nowrap' }}>\n                    <FlexItem>\n                      <CheckCircleIcon className=\"pf-u-success-color-100\" aria-hidden=\"true\" />\n                    </FlexItem>\n                    <FlexItem>\n                      <span>Created container</span>\n                    </FlexItem>\n                  </Flex>\n                </DescriptionListTerm>\n                <DescriptionListDescription>Created container hello-openshift</DescriptionListDescription>\n                <DescriptionListDescription>\n                  <time className=\"pf-u-color-200 pf-u-font-size-sm\">Jun 17, 10:45 am</time>\n                </DescriptionListDescription>\n              </DescriptionListGroup>\n            </DescriptionList>\n          </CardBody>\n          <Divider />\n          <CardFooter>\n            <a href=\"#\">View all events</a>\n          </CardFooter>\n        </Card>\n      </Gallery>\n    </React.Fragment>\n  );\n};","title":"Events view","lang":"js"}}>
      
    </Example>
};

const Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"id":"demos","size":"h2","className":"ws-title ws-h2"}}>
      {`Demos`}
    </AutoLinkHeader>
    {React.createElement(pageData.examples["Horizontal card grid"])}
    {React.createElement(pageData.examples["Horizontal split"])}
    {React.createElement(pageData.examples["Details card"])}
    {React.createElement(pageData.examples["Aggregate status card"])}
    {React.createElement(pageData.examples["Status"])}
    {React.createElement(pageData.examples["Status Tabbed"])}
    {React.createElement(pageData.examples["Utilization card 1"])}
    {React.createElement(pageData.examples["Utilization card 2"])}
    {React.createElement(pageData.examples["Utilization card 3"])}
    {React.createElement(pageData.examples["Utilization card 4"])}
    {React.createElement(pageData.examples["Nested cards"])}
    {React.createElement(pageData.examples["With accordion"])}
    {React.createElement(pageData.examples["Trend card 1"])}
    {React.createElement(pageData.examples["Trend card 2"])}
    {React.createElement(pageData.examples["Log view"])}
    {React.createElement(pageData.examples["Events view"])}
  </React.Fragment>
);
Component.displayName = 'ComponentsCardReactDemosDocs';
Component.pageData = pageData;

export default Component;
