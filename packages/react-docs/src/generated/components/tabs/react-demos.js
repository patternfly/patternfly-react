import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import DashboardWrapper from '../../../../../react-core/src/demos/./examples/DashboardWrapper';
import CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';
import InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';
import CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';
import CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';
import CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';
import FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';
import SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';
import srcImportgraytabs from './react-demos/gray-tabs.png';
import srcImportmodaltabs from './react-demos/modal-tabs.png';
import srcImportnestedtabs from './react-demos/nested-tabs.png';
import srcImportnestedunindentedtabs from './react-demos/nested-unindented-tabs.png';
import srcImportopentabswithsecondarytabs from './react-demos/open-tabs-with-secondary-tabs.png';
import srcImportopentabs from './react-demos/open-tabs.png';
import srcImporttablesandtabsautowidthtabs from './react-demos/tables-and-tabs-auto-width-tabs.png';
import srcImporttablesandtabs from './react-demos/tables-and-tabs.png';
const pageData = {
  "id": "Tabs",
  "section": "components",
  "source": "react-demos",
  "slug": "/components/tabs/react-demos",
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/demos/Tabs.md",
  "fullscreenExamples": [
    "Open tabs",
    "Open tabs with secondary tabs",
    "Nested tabs",
    "Nested, unindented tabs",
    "Tables and tabs",
    "Tables and tabs, auto width tabs",
    "Modal tabs",
    "Gray tabs"
  ]
};
pageData.liveContext = {
  DashboardWrapper,
  CheckCircleIcon,
  InfoCircleIcon,
  CodeIcon,
  CodeBranchIcon,
  CubeIcon,
  FilterIcon,
  SortAmountDownIcon
};
pageData.examples = {
  'Open tabs': props => 
    <Example {...pageData} {...props} thumbnail={srcImportopentabs} {...{"code":"import React from 'react';\nimport {\n  PageSection,\n  PageSectionVariants,\n  PageBreadcrumb,\n  Breadcrumb,\n  BreadcrumbItem,\n  Tabs,\n  Tab,\n  TabContent,\n  TabContentBody,\n  TabTitleText,\n  Title,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Label,\n  LabelGroup,\n  Flex,\n  FlexItem\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\n\nTabsOpenDemo = () => {\n  const [activeTabKey, setActiveTabKey] = React.useState(0);\n\n  // Toggle currently active tab\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const tabsBreadcrumb = (\n    <PageBreadcrumb isWidthLimited>\n      <Breadcrumb>\n        <BreadcrumbItem to=\"#\">Overview</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Pods</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Pod details{' '}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </PageBreadcrumb>\n  );\n\n  const tabContent = (\n    <Flex direction={{ default: 'column' }}>\n      <FlexItem spacer={{ default: 'spacerLg' }}>\n        <Title headingLevel=\"h2\" size=\"lg\" className=\"pf-u-mt-sm\" id=\"open-tabs-example-tabs-list-details-title\">\n          Pod details\n        </Title>\n      </FlexItem>\n      <FlexItem>\n        <DescriptionList columnModifier={{ lg: '2Col' }} aria-labelledby=\"open-tabs-example-tabs-list-details-title\">\n          <DescriptionListGroup>\n            <DescriptionListTerm>Name</DescriptionListTerm>\n            <DescriptionListDescription>3scale-control-fccb6ddb9-phyqv9</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Status</DescriptionListTerm>\n            <DescriptionListDescription>\n              <Flex spacer={{ default: 'spacerLg' }}>\n                <FlexItem>\n                  <CheckCircleIcon />\n                </FlexItem>\n                <FlexItem>Running</FlexItem>\n              </Flex>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Namespace</DescriptionListTerm>\n            <DescriptionListDescription>\n              <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                <FlexItem>\n                  <Label color=\"cyan\">NS</Label>\n                </FlexItem>\n                <FlexItem>\n                  <a href=\"#\">knative-serving-ingress</a>\n                </FlexItem>\n              </Flex>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Restart policy</DescriptionListTerm>\n            <DescriptionListDescription>Always restart</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Labels</DescriptionListTerm>\n            <DescriptionListDescription>\n              <LabelGroup>\n                <Label>app=3scale-gateway</Label>\n                <Label>pod-template-has=6747686899</Label>\n              </LabelGroup>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Active deadline seconds</DescriptionListTerm>\n            <DescriptionListDescription>Not configured</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Tolerations</DescriptionListTerm>\n            <DescriptionListDescription>stuff</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Pod IP</DescriptionListTerm>\n            <DescriptionListDescription>10..345.2.197</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Annotations</DescriptionListTerm>\n            <DescriptionListDescription>stuff</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Node</DescriptionListTerm>\n            <DescriptionListDescription>\n              <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                <FlexItem>\n                  <Label color=\"purple\">N</Label>\n                </FlexItem>\n                <FlexItem>ip-10-0-233-118.us-east-2.computer.external</FlexItem>\n              </Flex>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Created at</DescriptionListTerm>\n            <DescriptionListDescription>\n              <time>Oct 15, 1:51 pm</time>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </FlexItem>\n    </Flex>\n  );\n\n  return (\n    <DashboardWrapper hasNoBreadcrumb>\n      {tabsBreadcrumb}\n      <PageSection isWidthLimited variant={PageSectionVariants.light}>\n        <Flex\n          spaceItems={{ default: 'spaceItemsMd' }}\n          alignItems={{ default: 'alignItemsFlexStart' }}\n          flexWrap={{ default: 'noWrap' }}\n        >\n          <FlexItem>\n            <Label color=\"blue\">N</Label>\n          </FlexItem>\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              3scale-control-fccb6ddb9-phyqv9\n            </Title>\n          </FlexItem>\n          <FlexItem flex={{ default: 'flexNone' }}>\n            <Label icon={<InfoCircleIcon />}>Running</Label>\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <PageSection type=\"tabs\" variant={PageSectionVariants.light} isWidthLimited>\n        <Tabs activeKey={activeTabKey} onSelect={handleTabClick} usePageInsets id=\"open-tabs-example-tabs-list\">\n          <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>} tabContentId={`tabContent${0}`} />\n          <Tab eventKey={1} title={<TabTitleText>YAML</TabTitleText>} tabContentId={`tabContent${1}`} />\n          <Tab eventKey={2} title={<TabTitleText>Environment</TabTitleText>} tabContentId={`tabContent${2}`} />\n          <Tab eventKey={3} title={<TabTitleText>Events</TabTitleText>} tabContentId={`tabContent${3}`} />\n          <Tab eventKey={4} title={<TabTitleText>Terminal</TabTitleText>} tabContentId={`tabContent${4}`} />\n        </Tabs>\n      </PageSection>\n      <PageSection isWidthLimited variant={PageSectionVariants.light}>\n        <TabContent key={0} eventKey={0} id={`tabContent${0}`} activeKey={activeTabKey} hidden={0 !== activeTabKey}>\n          <TabContentBody>{tabContent}</TabContentBody>\n        </TabContent>\n        <TabContent key={1} eventKey={1} id={`tabContent${1}`} activeKey={activeTabKey} hidden={1 !== activeTabKey}>\n          <TabContentBody>YAML panel</TabContentBody>\n        </TabContent>\n        <TabContent key={2} eventKey={2} id={`tabContent${2}`} activeKey={activeTabKey} hidden={2 !== activeTabKey}>\n          <TabContentBody>Environment panel</TabContentBody>\n        </TabContent>\n        <TabContent key={3} eventKey={3} id={`tabContent${3}`} activeKey={activeTabKey} hidden={3 !== activeTabKey}>\n          <TabContentBody>Events panel</TabContentBody>\n        </TabContent>\n        <TabContent key={4} eventKey={4} id={`tabContent${4}`} activeKey={activeTabKey} hidden={4 !== activeTabKey}>\n          <TabContentBody>Terminal panel</TabContentBody>\n        </TabContent>\n      </PageSection>\n    </DashboardWrapper>\n  );\n};","title":"Open tabs","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Open tabs with secondary tabs': props => 
    <Example {...pageData} {...props} thumbnail={srcImportopentabswithsecondarytabs} {...{"code":"import React from 'react';\nimport {\n  PageSection,\n  PageSectionVariants,\n  PageBreadcrumb,\n  Breadcrumb,\n  BreadcrumbItem,\n  Tabs,\n  Tab,\n  TabContent,\n  TabContentBody,\n  TabTitleText,\n  Title,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Label,\n  LabelGroup,\n  Flex,\n  FlexItem\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\n\nTabsOpenWithSecondaryTabsDemo = () => {\n  const [activeTabKey, setActiveTabKey] = React.useState(0);\n  const [activeTabKeySecondary, setActiveTabKeySecondary] = React.useState(10);\n\n  // Toggle currently active tab\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // Toggle currently active secondary tab\n  const handleTabClickSecondary = (event, tabIndex) => {\n    setActiveTabKeySecondary(tabIndex);\n  };\n\n  const tabsBreadcrumb = (\n    <PageBreadcrumb isWidthLimited>\n      <Breadcrumb>\n        <BreadcrumbItem to=\"#\">Overview</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Pods</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Pod details{' '}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    </PageBreadcrumb>\n  );\n\n  const tabContent = (\n    <Flex direction={{ default: 'column' }}>\n      <FlexItem spacer={{ default: 'spacerLg' }}>\n        <Title headingLevel=\"h2\" size=\"lg\" className=\"pf-u-mt-sm\" id=\"open-tabs-example-tabs-list-details-title\">\n          Pod details\n        </Title>\n      </FlexItem>\n      <FlexItem>\n        <DescriptionList columnModifier={{ lg: '2Col' }} aria-labelledby=\"open-tabs-example-tabs-list-details-title\">\n          <DescriptionListGroup>\n            <DescriptionListTerm>Name</DescriptionListTerm>\n            <DescriptionListDescription>3scale-control-fccb6ddb9-phyqv9</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Status</DescriptionListTerm>\n            <DescriptionListDescription>\n              <Flex spacer={{ default: 'spacerLg' }}>\n                <FlexItem>\n                  <CheckCircleIcon />\n                </FlexItem>\n                <FlexItem>Running</FlexItem>\n              </Flex>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Namespace</DescriptionListTerm>\n            <DescriptionListDescription>\n              <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                <FlexItem>\n                  <Label color=\"cyan\">NS</Label>\n                </FlexItem>\n                <FlexItem>\n                  <a href=\"#\">knative-serving-ingress</a>\n                </FlexItem>\n              </Flex>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Restart policy</DescriptionListTerm>\n            <DescriptionListDescription>Always restart</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Labels</DescriptionListTerm>\n            <DescriptionListDescription>\n              <LabelGroup>\n                <Label>app=3scale-gateway</Label>\n                <Label>pod-template-has=6747686899</Label>\n              </LabelGroup>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Active deadline seconds</DescriptionListTerm>\n            <DescriptionListDescription>Not configured</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Tolerations</DescriptionListTerm>\n            <DescriptionListDescription>stuff</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Pod IP</DescriptionListTerm>\n            <DescriptionListDescription>10..345.2.197</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Annotations</DescriptionListTerm>\n            <DescriptionListDescription>stuff</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Node</DescriptionListTerm>\n            <DescriptionListDescription>\n              <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n                <FlexItem>\n                  <Label color=\"purple\">N</Label>\n                </FlexItem>\n                <FlexItem>ip-10-0-233-118.us-east-2.computer.external</FlexItem>\n              </Flex>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>Created at</DescriptionListTerm>\n            <DescriptionListDescription>\n              <time>Oct 15, 1:51 pm</time>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </FlexItem>\n    </Flex>\n  );\n\n  return (\n    <DashboardWrapper hasNoBreadcrumb>\n      {tabsBreadcrumb}\n      <PageSection isWidthLimited variant={PageSectionVariants.light}>\n        <Flex\n          spaceItems={{ default: 'spaceItemsMd' }}\n          alignItems={{ default: 'alignItemsFlexStart' }}\n          flexWrap={{ default: 'noWrap' }}\n        >\n          <FlexItem>\n            <Label color=\"blue\">N</Label>\n          </FlexItem>\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              3scale-control-fccb6ddb9-phyqv9\n            </Title>\n          </FlexItem>\n          <FlexItem flex={{ default: 'flexNone' }}>\n            <Label icon={<InfoCircleIcon />}>Running</Label>\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <PageSection type=\"tabs\" variant={PageSectionVariants.light} isWidthLimited>\n        <Tabs activeKey={activeTabKey} onSelect={handleTabClick} usePageInsets id=\"open-tabs-example-tabs-list\">\n          <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>} tabContentId={`tabContent${0}`} />\n          <Tab eventKey={1} title={<TabTitleText>YAML</TabTitleText>} tabContentId={`tabContent${1}`} />\n          <Tab eventKey={2} title={<TabTitleText>Environment</TabTitleText>} tabContentId={`tabContent${2}`} />\n          <Tab eventKey={3} title={<TabTitleText>Events</TabTitleText>} tabContentId={`tabContent${3}`} />\n          <Tab eventKey={4} title={<TabTitleText>Terminal</TabTitleText>} tabContentId={`tabContent${4}`} />\n        </Tabs>\n      </PageSection>\n      <PageSection isWidthLimited variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n        <TabContent key={0} eventKey={0} id={`tabContent${0}`} activeKey={activeTabKey} hidden={0 !== activeTabKey}>\n          <TabContentBody>\n            <Tabs\n              isSecondary\n              hasSecondaryBorderBottom\n              activeKey={activeTabKeySecondary}\n              onSelect={handleTabClickSecondary}\n              usePageInsets\n              id=\"open-with-secondary-tabs-example-tabs-list-secondary\"\n            >\n              <Tab\n                eventKey={10}\n                title={<TabTitleText>Pod information</TabTitleText>}\n                tabContentId={`tabContent${10}`}\n              />\n              <Tab\n                eventKey={11}\n                title={<TabTitleText>Editable aspects</TabTitleText>}\n                tabContentId={`tabContent${11}`}\n              />\n            </Tabs>\n            <TabContent\n              key={10}\n              eventKey={10}\n              id={`tabContent${10}`}\n              activeKey={activeTabKeySecondary}\n              hidden={10 !== activeTabKeySecondary}\n            >\n              <TabContentBody hasPadding>{tabContent}</TabContentBody>\n            </TabContent>\n            <TabContent\n              key={11}\n              eventKey={11}\n              id={`tabContent${11}`}\n              activeKey={activeTabKeySecondary}\n              hidden={11 !== activeTabKeySecondary}\n            >\n              <TabContentBody>Editable aspects</TabContentBody>\n            </TabContent>\n          </TabContentBody>\n        </TabContent>\n        <TabContent key={1} eventKey={1} id={`tabContent${1}`} activeKey={activeTabKey} hidden={1 !== activeTabKey}>\n          <TabContentBody>YAML panel</TabContentBody>\n        </TabContent>\n        <TabContent key={2} eventKey={2} id={`tabContent${2}`} activeKey={activeTabKey} hidden={2 !== activeTabKey}>\n          <TabContentBody>Environment panel</TabContentBody>\n        </TabContent>\n        <TabContent key={3} eventKey={3} id={`tabContent${3}`} activeKey={activeTabKey} hidden={3 !== activeTabKey}>\n          <TabContentBody>Events panel</TabContentBody>\n        </TabContent>\n        <TabContent key={4} eventKey={4} id={`tabContent${4}`} activeKey={activeTabKey} hidden={4 !== activeTabKey}>\n          <TabContentBody>Terminal panel</TabContentBody>\n        </TabContent>\n      </PageSection>\n    </DashboardWrapper>\n  );\n};","title":"Open tabs with secondary tabs","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Nested tabs': props => 
    <Example {...pageData} {...props} thumbnail={srcImportnestedtabs} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Grid,\n  GridItem,\n  PageSection,\n  Tabs,\n  Tab,\n  TabContent,\n  TabContentBody,\n  TabTitleText,\n  Title,\n  Flex,\n  FlexItem\n} from '@patternfly/react-core';\nimport DashboardWrapper from '../DashboardWrapper';\n\nexport const NestedTabs: React.FunctionComponent = () => {\n  const [activeTabKey, setActiveTabKey] = React.useState(0);\n  const [activeNestedTabKey, setActiveNestedTabKey] = React.useState(10);\n\n  // Toggle currently active tab\n  const handleTabClick = (tabIndex: number) => setActiveTabKey(tabIndex);\n\n  // Toggle currently active nested tab\n  const handleNestedTabClick = (tabIndex: number) => setActiveNestedTabKey(tabIndex);\n\n  const tabContent = (\n    <Grid hasGutter>\n      <GridItem xl={8} md={6}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h2\">Status</Title>\n          </CardHeader>\n          <CardBody>\n            <Flex direction={{ default: 'column' }}>\n              <FlexItem>\n                <Tabs\n                  activeKey={activeNestedTabKey}\n                  isSecondary\n                  onSelect={(_event, tabIndex) => handleNestedTabClick(Number(tabIndex))}\n                  id=\"nested-tabs-example-nested-tabs-list\"\n                >\n                  <Tab eventKey={10} title={<TabTitleText>Cluster</TabTitleText>} tabContentId={`tabContent${10}`} />\n                  <Tab\n                    eventKey={11}\n                    title={<TabTitleText>Control plane</TabTitleText>}\n                    tabContentId={`tabContent${11}`}\n                  />\n                  <Tab eventKey={12} title={<TabTitleText>Operators</TabTitleText>} tabContentId={`tabContent${12}`} />\n                  <Tab\n                    eventKey={13}\n                    title={<TabTitleText>Virtualization</TabTitleText>}\n                    tabContentId={`tabContent${13}`}\n                  />\n                </Tabs>\n              </FlexItem>\n              <FlexItem>\n                <TabContent\n                  key={10}\n                  eventKey={10}\n                  id={`tabContent${10}`}\n                  activeKey={activeNestedTabKey}\n                  hidden={10 !== activeNestedTabKey}\n                >\n                  <TabContentBody>\n                    {\n                      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce in odio porttitor, feugiat risus in, feugiat arcu. Nullam euismod enim eget fringilla condimentum. Maecenas tincidunt et metus id aliquet. Integer et fermentum purus. Nulla tempor velit arcu, vitae semper purus iaculis at. Sed malesuada auctor luctus. Pellentesque et leo urna. Aliquam vitae felis congue lacus mattis fringilla. Nullam et ultricies erat, sed dignissim elit. Cras mattis pulvinar aliquam. In ac est nulla. Pellentesque fermentum nibh ac sapien porta, ut congue orci aliquam. Sed nisl est, tempor eu pharetra eget, ullamcorper ut augue. Vestibulum eleifend libero eu nulla cursus lacinia.'\n                    }\n                  </TabContentBody>\n                </TabContent>\n                <TabContent\n                  key={11}\n                  eventKey={11}\n                  id={`tabContent${11}`}\n                  activeKey={activeNestedTabKey}\n                  hidden={11 !== activeNestedTabKey}\n                >\n                  <TabContentBody>Control plane panel</TabContentBody>\n                </TabContent>\n                <TabContent\n                  key={12}\n                  eventKey={12}\n                  id={`tabContent${12}`}\n                  activeKey={activeNestedTabKey}\n                  hidden={12 !== activeNestedTabKey}\n                >\n                  <TabContentBody>Operators panel</TabContentBody>\n                </TabContent>\n                <TabContent\n                  key={13}\n                  eventKey={13}\n                  id={`tabContent${13}`}\n                  activeKey={activeNestedTabKey}\n                  hidden={13 !== activeNestedTabKey}\n                >\n                  <TabContentBody>Virtualization panel</TabContentBody>\n                </TabContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem xl={4} md={6}>\n        <Flex direction={{ default: 'column' }} className=\"pf-u-h-100\">\n          <FlexItem flex={{ default: 'flex_1' }}>\n            <Card isFullHeight>\n              <CardHeader>\n                <Title headingLevel=\"h2\">Title of Card</Title>\n              </CardHeader>\n            </Card>\n          </FlexItem>\n          <FlexItem flex={{ default: 'flex_1' }}>\n            <Card isFullHeight>\n              <CardHeader>\n                <Title headingLevel=\"h2\">Title of Card</Title>\n              </CardHeader>\n            </Card>\n          </FlexItem>\n        </Flex>\n      </GridItem>\n    </Grid>\n  );\n\n  return (\n    <DashboardWrapper hasPageTemplateTitle>\n      <PageSection type=\"tabs\" isWidthLimited>\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={(_event, tabIndex) => handleTabClick(Number(tabIndex))}\n          usePageInsets\n          id=\"nested-tabs-example-tabs-list\"\n        >\n          <Tab eventKey={0} title={<TabTitleText>Cluster 1</TabTitleText>} tabContentId={`tabContent${0}`} />\n          <Tab eventKey={1} title={<TabTitleText>Cluster 2</TabTitleText>} tabContentId={`tabContent${1}`} />\n        </Tabs>\n      </PageSection>\n      <PageSection isWidthLimited>\n        <TabContent key={0} eventKey={0} id={`tabContent${0}`} activeKey={activeTabKey} hidden={0 !== activeTabKey}>\n          <TabContentBody>{tabContent}</TabContentBody>\n        </TabContent>\n        <TabContent key={1} eventKey={1} id={`tabContent${1}`} activeKey={activeTabKey} hidden={1 !== activeTabKey}>\n          <TabContentBody>Cluster 2 panel</TabContentBody>\n        </TabContent>\n      </PageSection>\n    </DashboardWrapper>\n  );\n};\n","title":"Nested tabs","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Nested, unindented tabs': props => 
    <Example {...pageData} {...props} thumbnail={srcImportnestedunindentedtabs} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Grid,\n  GridItem,\n  PageSection,\n  Tabs,\n  Tab,\n  TabContent,\n  TabContentBody,\n  TabTitleText,\n  Title,\n  Text,\n  TextContent,\n  TitleSizes\n} from '@patternfly/react-core';\nimport DashboardWrapper from '../DashboardWrapper';\n\nexport const NestedUnindentedTabs: React.FunctionComponent = () => {\n  const [activeTabKey, setActiveTabKey] = React.useState(1);\n  const [activeNestedTabKey, setActiveNestedTabKey] = React.useState(10);\n\n  // Toggle currently active tab\n  const handleTabClick = (tabIndex: number) => setActiveTabKey(tabIndex);\n\n  // Toggle currently active nested tab\n  const handleNestedTabClick = (tabIndex: number) => setActiveNestedTabKey(tabIndex);\n\n  const tabContent = (\n    <Grid hasGutter>\n      <GridItem>\n        <CardHeader>\n          <Title headingLevel=\"h1\" size={TitleSizes['2xl']}>\n            Get started with Red Hat Enterprise Linux\n          </Title>\n        </CardHeader>\n      </GridItem>\n      <GridItem>\n        <Tabs\n          activeKey={activeNestedTabKey}\n          isSecondary\n          onSelect={(_event, tabIndex) => handleNestedTabClick(Number(tabIndex))}\n          id=\"nested-tabs-example-nested-tabs-list\"\n        >\n          <Tab eventKey={10} title={<TabTitleText>x86 architecture</TabTitleText>} tabContentId={`tabContent${10}`} />\n          <Tab\n            eventKey={11}\n            title={<TabTitleText>Additional Architectures</TabTitleText>}\n            tabContentId={`tabContent${11}`}\n          />\n        </Tabs>\n      </GridItem>\n      <GridItem>\n        <TabContent\n          key={10}\n          eventKey={10}\n          id={`tabContent${10}`}\n          activeKey={activeNestedTabKey}\n          hidden={10 !== activeNestedTabKey}\n        >\n          <TabContentBody>\n            <Grid hasGutter>\n              <GridItem>\n                <TextContent>\n                  <Text>To perform a standard x86_64 installation using the GUI, you'll need to:</Text>\n                </TextContent>\n              </GridItem>\n              <Grid md={6} xl2={3} hasGutter>\n                <GridItem>\n                  <Card isFullHeight>\n                    <CardHeader>Check system requirements</CardHeader>\n                    <CardBody>\n                      Your physical or virtual machine should meet the <a href=\"#\">system requirement</a>.\n                    </CardBody>\n                  </Card>\n                </GridItem>\n\n                <GridItem>\n                  <Card isFullHeight>\n                    <CardHeader>Download an installation ISO image</CardHeader>\n                    <CardBody>\n                      {' '}\n                      <a href=\"#\">Download</a> the binary DVD ISO.\n                    </CardBody>\n                  </Card>\n                </GridItem>\n                <GridItem>\n                  <Card isFullHeight>\n                    <CardHeader>Create a bootable installation media</CardHeader>\n                    <CardBody>\n                      {' '}\n                      <a href=\"#\">Create</a> a bootable installation media, for example a USB flash drive.\n                    </CardBody>\n                  </Card>\n                </GridItem>\n                <GridItem>\n                  <Card isFullHeight>\n                    <CardHeader>Install and register your system</CardHeader>\n                    <CardBody>\n                      Boot the installation, register your system, attach RHEL subscriptions, and install RHEL from the\n                      Red Hat Content Delivery Network (CDN) using the GUI.\n                    </CardBody>\n                  </Card>\n                </GridItem>\n              </Grid>\n            </Grid>\n          </TabContentBody>\n        </TabContent>\n        <TabContent\n          key={11}\n          eventKey={11}\n          id={`tabContent${11}`}\n          activeKey={activeNestedTabKey}\n          hidden={11 !== activeNestedTabKey}\n        >\n          <TabContentBody>Additional architectures panel</TabContentBody>\n        </TabContent>\n        <TabContent\n          key={12}\n          eventKey={12}\n          id={`tabContent${12}`}\n          activeKey={activeNestedTabKey}\n          hidden={12 !== activeNestedTabKey}\n        >\n          <TabContentBody>Operators panel</TabContentBody>\n        </TabContent>\n        <TabContent\n          key={13}\n          eventKey={13}\n          id={`tabContent${13}`}\n          activeKey={activeNestedTabKey}\n          hidden={13 !== activeNestedTabKey}\n        >\n          <TabContentBody>Virtualization panel</TabContentBody>\n        </TabContent>\n      </GridItem>\n    </Grid>\n  );\n\n  return (\n    <DashboardWrapper hasPageTemplateTitle>\n      <PageSection type=\"tabs\" isWidthLimited variant=\"light\">\n        <Tabs\n          isBox\n          activeKey={activeTabKey}\n          onSelect={(_event, tabIndex) => handleTabClick(Number(tabIndex))}\n          usePageInsets\n          id=\"nested-tabs-example-tabs-list\"\n        >\n          <Tab eventKey={0} title={<TabTitleText>What's new</TabTitleText>} tabContentId={`tabContent${0}`} />\n          <Tab eventKey={1} title={<TabTitleText>Get started</TabTitleText>} tabContentId={`tabContent${1}`} />\n          <Tab eventKey={2} title={<TabTitleText>Knowledge</TabTitleText>} tabContentId={`tabContent${2}`} />\n          <Tab eventKey={3} title={<TabTitleText>Support</TabTitleText>} tabContentId={`tabContent${3}`} />\n        </Tabs>\n      </PageSection>\n      <PageSection variant=\"light\">\n        <TabContent key={0} eventKey={0} id={`tabContent${0}`} activeKey={activeTabKey} hidden={0 !== activeTabKey}>\n          <TabContentBody>What's new panel</TabContentBody>\n        </TabContent>\n        <TabContent key={1} eventKey={1} id={`tabContent${1}`} activeKey={activeTabKey} hidden={1 !== activeTabKey}>\n          <TabContentBody>{tabContent}</TabContentBody>\n        </TabContent>\n        <TabContent key={2} eventKey={2} id={`tabContent${2}`} activeKey={activeTabKey} hidden={2 !== activeTabKey}>\n          <TabContentBody>Knowledge panel</TabContentBody>\n        </TabContent>\n        <TabContent key={3} eventKey={3} id={`tabContent${3}`} activeKey={activeTabKey} hidden={3 !== activeTabKey}>\n          <TabContentBody>Support Panel</TabContentBody>\n        </TabContent>\n      </PageSection>\n    </DashboardWrapper>\n  );\n};\n","title":"Nested, unindented tabs","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Tables and tabs': props => 
    <Example {...pageData} {...props} thumbnail={srcImporttablesandtabs} {...{"code":"/* eslint-disable no-console */\nimport React from 'react';\nimport {\n  Button,\n  Divider,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerPanelBody,\n  Dropdown,\n  Flex,\n  FlexItem,\n  KebabToggle,\n  Label,\n  LabelGroup,\n  OptionsMenu,\n  OptionsMenuToggle,\n  OverflowMenu,\n  OverflowMenuContent,\n  OverflowMenuControl,\n  OverflowMenuGroup,\n  OverflowMenuItem,\n  PageSection,\n  PageSectionVariants,\n  Pagination,\n  PaginationVariant,\n  Progress,\n  ProgressSize,\n  Select,\n  SelectVariant,\n  Tabs,\n  Tab,\n  TabContent,\n  TabContentBody,\n  TabTitleText,\n  Title,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  IAction,\n  ActionsColumn,\n  CustomActionsToggleProps\n} from '@patternfly/react-table';\nimport DashboardWrapper from '../DashboardWrapper';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\n\ninterface Repository {\n  name: string;\n  branches: number | null;\n  prs: number | null;\n  workspaces: number;\n  lastCommit: string;\n}\n\nexport const TablesAndTabs = () => {\n  // tab properties\n  const [activeTabKey, setActiveTabKey] = React.useState<number>(0);\n  // Toggle currently active tab\n  const handleTabClick = (tabIndex: number) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // secondary tab properties\n  const [secondaryActiveTabKey, setSecondaryActiveTabKey] = React.useState<number>(10);\n  const handleSecondaryTabClick = (tabIndex: number) => {\n    setSecondaryActiveTabKey(tabIndex);\n  };\n\n  // drawer properties\n  const [isExpanded, setIsExpanded] = React.useState<boolean>(false);\n\n  // table properties\n  // In real usage, this data would come from some external source like an API via props.\n  const repositories: Repository[] = [\n    { name: 'Node 1', branches: 10, prs: 25, workspaces: 5, lastCommit: '2 days ago' },\n    { name: 'Node 2', branches: 8, prs: 30, workspaces: 2, lastCommit: '2 days ago' },\n    { name: 'Node 3', branches: 12, prs: 48, workspaces: 13, lastCommit: '30 days ago' },\n    { name: 'Node 4', branches: 3, prs: 8, workspaces: 20, lastCommit: '8 days ago' },\n    { name: 'Node 5', branches: 33, prs: 21, workspaces: 2, lastCommit: '26 days ago' }\n  ];\n\n  const columnNames = {\n    name: 'Repositories',\n    branches: 'Branches',\n    prs: 'Pull requests',\n    workspaces: 'Workspaces',\n    lastCommit: 'Last commit'\n  };\n\n  const [selectedRepoNames, setSelectedRepoNames] = React.useState<string[]>([]);\n  const setRepoSelected = (event: React.FormEvent<HTMLInputElement>, repo: Repository, isSelecting = true) => {\n    setSelectedRepoNames(prevSelected => {\n      const otherSelectedRepoNames = prevSelected.filter(r => r !== repo.name);\n      return isSelecting ? [...otherSelectedRepoNames, repo.name] : otherSelectedRepoNames;\n    });\n    event.stopPropagation();\n  };\n  const onSelectAll = (isSelecting = true) => setSelectedRepoNames(isSelecting ? repositories.map(r => r.name) : []);\n  const allRowsSelected = selectedRepoNames.length === repositories.length;\n  const isRepoSelected = (repo: Repository) => selectedRepoNames.includes(repo.name);\n\n  const [rowClicked, setRowClicked] = React.useState<string>(null);\n  const isRowClicked = (repo: Repository) => rowClicked === repo.name;\n\n  const defaultActions: IAction[] = [\n    {\n      title: 'Some action',\n      onClick: event => {\n        event.stopPropagation();\n        console.log('clicked on Some action');\n      }\n    },\n    {\n      title: <a href=\"https://www.patternfly.org\">Link action</a>,\n      onClick: event => {\n        event.stopPropagation();\n        console.log('clicked on Link action');\n      }\n    },\n    {\n      isSeparator: true\n    },\n    {\n      title: 'Third action',\n      onClick: event => {\n        event.stopPropagation();\n        console.log('clicked on Third action');\n      }\n    }\n  ];\n\n  const customActionsToggle = (props: CustomActionsToggleProps) => (\n    <KebabToggle\n      isDisabled={props.isDisabled}\n      onToggle={(value, event) => {\n        props.onToggle(value);\n        event.stopPropagation();\n      }}\n    />\n  );\n\n  const toolbar = (\n    <Toolbar id=\"page-layout-table-column-management-action-toolbar-top\" usePageInsets>\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n          <ToolbarItem>\n            <Select\n              onToggle={() => {}}\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              placeholderText=\"Name\"\n            />\n          </ToolbarItem>\n        </ToolbarToggleGroup>\n        <ToolbarItem>\n          <OptionsMenu\n            id=\"page-layout-table-column-management-action-toolbar-top-options-menu-toggle\"\n            isPlain\n            menuItems={[]}\n            toggle={\n              <OptionsMenuToggle\n                toggleTemplate={<SortAmountDownIcon aria-hidden=\"true\" />}\n                aria-label=\"Sort\"\n                hideCaret\n              />\n            }\n          />\n        </ToolbarItem>\n        <OverflowMenu breakpoint=\"md\">\n          <OverflowMenuContent className=\"pf-u-display-none pf-u-display-block-on-lg\">\n            <OverflowMenuGroup groupType=\"button\" isPersistent>\n              <OverflowMenuItem isPersistent>\n                <Button variant=\"primary\">Generate</Button>\n              </OverflowMenuItem>\n              <OverflowMenuItem isPersistent>\n                <Button variant=\"secondary\">Deploy</Button>\n              </OverflowMenuItem>\n            </OverflowMenuGroup>\n          </OverflowMenuContent>\n          <OverflowMenuControl hasAdditionalOptions>\n            <Dropdown\n              onSelect={() => {}}\n              toggle={<KebabToggle onToggle={() => {}} />}\n              isOpen={false}\n              isPlain\n              dropdownItems={[]}\n            />\n          </OverflowMenuControl>\n        </OverflowMenu>\n        <ToolbarItem variant=\"pagination\">\n          <Pagination\n            itemCount={36}\n            widgetId=\"pagination-options-menu-bottom\"\n            page={1}\n            variant={PaginationVariant.top}\n            isCompact\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n\n  const tableComposable = (\n    <TableComposable aria-label=\"`Composable` table\">\n      <Thead noWrap>\n        <Tr>\n          <Th\n            select={{\n              onSelect: (_event, isSelecting) => onSelectAll(isSelecting),\n              isSelected: allRowsSelected\n            }}\n          />\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.branches}</Th>\n          <Th>{columnNames.prs}</Th>\n          <Th>{columnNames.workspaces}</Th>\n          <Th>{columnNames.lastCommit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {repositories.map((repo, rowIndex) => (\n          <Tr\n            key={repo.name}\n            onRowClick={event => {\n              if ((event.target as HTMLInputElement).type !== 'checkbox') {\n                setRowClicked(rowClicked === repo.name ? null : repo.name);\n                setIsExpanded(!isRowClicked(repo));\n              }\n            }}\n            isHoverable\n            isRowSelected={repo.name === rowClicked}\n          >\n            <Td\n              key={`${rowIndex}_0`}\n              select={{\n                rowIndex,\n                onSelect: (event, isSelected) => setRepoSelected(event, repo, isSelected),\n                isSelected: isRepoSelected(repo)\n              }}\n            />\n            <Td dataLabel={columnNames.name}>\n              {repo.name}\n              <div>\n                <a href=\"#\">siemur/test-space</a>\n              </div>\n            </Td>\n            <Td dataLabel={columnNames.branches}>\n              <Flex>\n                <FlexItem>{repo.branches}</FlexItem>\n                <FlexItem>\n                  <CodeBranchIcon key=\"icon\" />\n                </FlexItem>\n              </Flex>\n            </Td>\n            <Td dataLabel={columnNames.prs}>\n              <Flex>\n                <FlexItem>{repo.prs}</FlexItem>\n                <FlexItem>\n                  <CodeIcon key=\"icon\" />\n                </FlexItem>\n              </Flex>\n            </Td>\n            <Td dataLabel={columnNames.workspaces}>\n              <Flex>\n                <FlexItem>{repo.workspaces}</FlexItem>\n                <FlexItem>\n                  <CubeIcon key=\"icon\" />\n                </FlexItem>\n              </Flex>\n            </Td>\n            <Td dataLabel={columnNames.lastCommit}>{repo.lastCommit}</Td>\n            <Td key={`${rowIndex}_5`}>\n              <ActionsColumn items={defaultActions} actionsToggle={customActionsToggle} />\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n\n  const panelContent = (\n    <DrawerPanelContent widths={{ default: 'width_33', xl: 'width_33' }}>\n      <DrawerHead>\n        <DrawerActions>\n          <DrawerCloseButton\n            onClick={() => {\n              setRowClicked(null);\n              setIsExpanded(false);\n            }}\n          />\n        </DrawerActions>\n        <Flex spaceItems={{ default: 'spaceItemsSm' }} direction={{ default: 'column' }}>\n          <FlexItem>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {rowClicked}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <a href=\"#\">siemur/test-space</a>\n          </FlexItem>\n        </Flex>\n      </DrawerHead>\n      <DrawerPanelBody hasNoPadding>\n        <Tabs\n          activeKey={secondaryActiveTabKey}\n          onSelect={(_event, tabIndex) => handleSecondaryTabClick(Number(tabIndex))}\n          isBox\n          isFilled\n          id=\"tabs-tables-secondary-tabs\"\n        >\n          <Tab eventKey={10} title={<TabTitleText>Overview</TabTitleText>} tabContentId={`tabContent${10}`} />\n          <Tab eventKey={11} title={<TabTitleText>Activity</TabTitleText>} tabContentId={`tabContent${11}`} />\n        </Tabs>\n      </DrawerPanelBody>\n      <DrawerPanelBody>\n        <TabContent\n          key={10}\n          eventKey={10}\n          id={`tabContent${10}`}\n          activeKey={secondaryActiveTabKey}\n          hidden={10 !== secondaryActiveTabKey}\n        >\n          <TabContentBody>\n            <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsLg' }}>\n              <FlexItem>\n                <p>\n                  The content of the drawer really is up to you. It could have form fields, definition lists, text\n                  lists, labels, charts, progress bars, etc. Spacing recommendation is 24px margins. You can put tabs in\n                  here, and can also make the drawer scrollable.\n                </p>\n              </FlexItem>\n              <FlexItem>\n                <Progress value={33} title=\"Capacity\" size={ProgressSize.sm} />\n              </FlexItem>\n              <FlexItem>\n                <Progress value={66} title=\"Modules\" size={ProgressSize.sm} />\n              </FlexItem>\n              <Flex direction={{ default: 'column' }}>\n                <FlexItem>\n                  <Title headingLevel=\"h3\">Tags</Title>\n                </FlexItem>\n                <FlexItem>\n                  <LabelGroup>\n                    {[1, 2, 3, 4, 5].map(labelNumber => (\n                      <Label variant=\"outline\" key={`label-${labelNumber}`}>{`Tag ${labelNumber}`}</Label>\n                    ))}\n                  </LabelGroup>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </TabContentBody>\n        </TabContent>\n        <TabContent\n          key={11}\n          eventKey={11}\n          id={`tabContent${11}`}\n          activeKey={secondaryActiveTabKey}\n          hidden={11 !== secondaryActiveTabKey}\n        >\n          <TabContentBody>Activity panel</TabContentBody>\n        </TabContent>\n      </DrawerPanelBody>\n    </DrawerPanelContent>\n  );\n\n  const tabContent = (\n    <Drawer isExpanded={isExpanded} isInline>\n      <DrawerContent panelContent={panelContent}>\n        <DrawerContentBody>\n          {toolbar}\n          <Divider />\n          {tableComposable}\n          <Pagination\n            id=\"page-layout-table-column-management-action-toolbar-bottom\"\n            itemCount={36}\n            widgetId=\"pagination-options-menu-bottom\"\n            page={1}\n            variant={PaginationVariant.bottom}\n          />\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n\n  return (\n    <DashboardWrapper>\n      <React.Fragment>\n        <PageSection variant={PageSectionVariants.light}>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            Nodes\n          </Title>\n        </PageSection>\n        <PageSection type=\"tabs\" variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={(_event, tabIndex) => handleTabClick(Number(tabIndex))}\n            usePageInsets\n            id=\"tabs-table-tabs-list\"\n          >\n            <Tab eventKey={0} title={<TabTitleText>Nodes</TabTitleText>} tabContentId={`tabContent${0}`} />\n            <Tab eventKey={1} title={<TabTitleText>Node connectors</TabTitleText>} tabContentId={`tabContent${1}`} />\n          </Tabs>\n        </PageSection>\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <TabContent key={0} eventKey={0} id={`tabContent${0}`} activeKey={activeTabKey} hidden={0 !== activeTabKey}>\n            <TabContentBody>{tabContent}</TabContentBody>\n          </TabContent>\n          <TabContent key={1} eventKey={1} id={`tabContent${1}`} activeKey={activeTabKey} hidden={1 !== activeTabKey}>\n            <TabContentBody>Node connectors panel</TabContentBody>\n          </TabContent>\n        </PageSection>\n      </React.Fragment>\n    </DashboardWrapper>\n  );\n};\n","title":"Tables and tabs","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Tables and tabs, auto width tabs': props => 
    <Example {...pageData} {...props} thumbnail={srcImporttablesandtabsautowidthtabs} {...{"code":"/* eslint-disable no-console */\nimport React from 'react';\nimport {\n  Button,\n  Divider,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerPanelBody,\n  Dropdown,\n  Flex,\n  FlexItem,\n  KebabToggle,\n  Label,\n  LabelGroup,\n  OptionsMenu,\n  OptionsMenuToggle,\n  OverflowMenu,\n  OverflowMenuContent,\n  OverflowMenuControl,\n  OverflowMenuGroup,\n  OverflowMenuItem,\n  PageSection,\n  PageSectionVariants,\n  Pagination,\n  PaginationVariant,\n  Progress,\n  ProgressSize,\n  Select,\n  SelectVariant,\n  Tabs,\n  Tab,\n  TabContent,\n  TabContentBody,\n  TabTitleText,\n  Title,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  IAction,\n  ActionsColumn,\n  CustomActionsToggleProps\n} from '@patternfly/react-table';\nimport DashboardWrapper from '../DashboardWrapper';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\n\ninterface Repository {\n  name: string;\n  branches: number | null;\n  prs: number | null;\n  workspaces: number;\n  lastCommit: string;\n}\n\nexport const TablesAndTabs = () => {\n  // tab properties\n  const [activeTabKey, setActiveTabKey] = React.useState<number>(0);\n  // Toggle currently active tab\n  const handleTabClick = (tabIndex: number) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // secondary tab properties\n  const [secondaryActiveTabKey, setSecondaryActiveTabKey] = React.useState<number>(10);\n  const handleSecondaryTabClick = (tabIndex: number) => {\n    setSecondaryActiveTabKey(tabIndex);\n  };\n\n  // drawer properties\n  const [isExpanded, setIsExpanded] = React.useState<boolean>(false);\n\n  // table properties\n  // In real usage, this data would come from some external source like an API via props.\n  const repositories: Repository[] = [\n    { name: 'Node 1', branches: 10, prs: 25, workspaces: 5, lastCommit: '2 days ago' },\n    { name: 'Node 2', branches: 8, prs: 30, workspaces: 2, lastCommit: '2 days ago' },\n    { name: 'Node 3', branches: 12, prs: 48, workspaces: 13, lastCommit: '30 days ago' },\n    { name: 'Node 4', branches: 3, prs: 8, workspaces: 20, lastCommit: '8 days ago' },\n    { name: 'Node 5', branches: 33, prs: 21, workspaces: 2, lastCommit: '26 days ago' }\n  ];\n\n  const columnNames = {\n    name: 'Repositories',\n    branches: 'Branches',\n    prs: 'Pull requests',\n    workspaces: 'Workspaces',\n    lastCommit: 'Last commit'\n  };\n\n  const [selectedRepoNames, setSelectedRepoNames] = React.useState<string[]>([]);\n  const setRepoSelected = (event: React.FormEvent<HTMLInputElement>, repo: Repository, isSelecting = true) => {\n    setSelectedRepoNames(prevSelected => {\n      const otherSelectedRepoNames = prevSelected.filter(r => r !== repo.name);\n      return isSelecting ? [...otherSelectedRepoNames, repo.name] : otherSelectedRepoNames;\n    });\n    event.stopPropagation();\n  };\n  const onSelectAll = (isSelecting = true) => setSelectedRepoNames(isSelecting ? repositories.map(r => r.name) : []);\n  const allRowsSelected = selectedRepoNames.length === repositories.length;\n  const isRepoSelected = (repo: Repository) => selectedRepoNames.includes(repo.name);\n\n  const [rowClicked, setRowClicked] = React.useState<string>(null);\n  const isRowClicked = (repo: Repository) => rowClicked === repo.name;\n\n  const defaultActions: IAction[] = [\n    {\n      title: 'Some action',\n      onClick: event => {\n        event.stopPropagation();\n        console.log('clicked on Some action');\n      }\n    },\n    {\n      title: <a href=\"https://www.patternfly.org\">Link action</a>,\n      onClick: event => {\n        event.stopPropagation();\n        console.log('clicked on Link action');\n      }\n    },\n    {\n      isSeparator: true\n    },\n    {\n      title: 'Third action',\n      onClick: event => {\n        event.stopPropagation();\n        console.log('clicked on Third action');\n      }\n    }\n  ];\n\n  const customActionsToggle = (props: CustomActionsToggleProps) => (\n    <KebabToggle\n      isDisabled={props.isDisabled}\n      onToggle={(value, event) => {\n        props.onToggle(value);\n        event.stopPropagation();\n      }}\n    />\n  );\n\n  const toolbar = (\n    <Toolbar id=\"page-layout-table-column-management-action-toolbar-top\" usePageInsets>\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n          <ToolbarItem>\n            <Select\n              onToggle={() => {}}\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              placeholderText=\"Name\"\n            />\n          </ToolbarItem>\n        </ToolbarToggleGroup>\n        <ToolbarItem>\n          <OptionsMenu\n            id=\"page-layout-table-column-management-action-toolbar-top-options-menu-toggle\"\n            isPlain\n            menuItems={[]}\n            toggle={\n              <OptionsMenuToggle\n                toggleTemplate={<SortAmountDownIcon aria-hidden=\"true\" />}\n                aria-label=\"Sort\"\n                hideCaret\n              />\n            }\n          />\n        </ToolbarItem>\n        <OverflowMenu breakpoint=\"md\">\n          <OverflowMenuContent className=\"pf-u-display-none pf-u-display-block-on-lg\">\n            <OverflowMenuGroup groupType=\"button\" isPersistent>\n              <OverflowMenuItem isPersistent>\n                <Button variant=\"primary\">Generate</Button>\n              </OverflowMenuItem>\n              <OverflowMenuItem isPersistent>\n                <Button variant=\"secondary\">Deploy</Button>\n              </OverflowMenuItem>\n            </OverflowMenuGroup>\n          </OverflowMenuContent>\n          <OverflowMenuControl hasAdditionalOptions>\n            <Dropdown\n              onSelect={() => {}}\n              toggle={<KebabToggle onToggle={() => {}} />}\n              isOpen={false}\n              isPlain\n              dropdownItems={[]}\n            />\n          </OverflowMenuControl>\n        </OverflowMenu>\n        <ToolbarItem variant=\"pagination\">\n          <Pagination\n            itemCount={36}\n            widgetId=\"pagination-options-menu-bottom\"\n            page={1}\n            variant={PaginationVariant.top}\n            isCompact\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n\n  const tableComposable = (\n    <TableComposable aria-label=\"`Composable` table\">\n      <Thead noWrap>\n        <Tr>\n          <Th\n            select={{\n              onSelect: (_event, isSelecting) => onSelectAll(isSelecting),\n              isSelected: allRowsSelected\n            }}\n          />\n          <Th>{columnNames.name}</Th>\n          <Th>{columnNames.branches}</Th>\n          <Th>{columnNames.prs}</Th>\n          <Th>{columnNames.workspaces}</Th>\n          <Th>{columnNames.lastCommit}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {repositories.map((repo, rowIndex) => (\n          <Tr\n            key={repo.name}\n            onRowClick={event => {\n              if ((event.target as HTMLInputElement).type !== 'checkbox') {\n                setRowClicked(rowClicked === repo.name ? null : repo.name);\n                setIsExpanded(!isRowClicked(repo));\n              }\n            }}\n            isHoverable\n            isRowSelected={repo.name === rowClicked}\n          >\n            <Td\n              key={`${rowIndex}_0`}\n              select={{\n                rowIndex,\n                onSelect: (event, isSelected) => setRepoSelected(event, repo, isSelected),\n                isSelected: isRepoSelected(repo)\n              }}\n            />\n            <Td dataLabel={columnNames.name}>\n              {repo.name}\n              <div>\n                <a href=\"#\">siemur/test-space</a>\n              </div>\n            </Td>\n            <Td dataLabel={columnNames.branches}>\n              <Flex>\n                <FlexItem>{repo.branches}</FlexItem>\n                <FlexItem>\n                  <CodeBranchIcon key=\"icon\" />\n                </FlexItem>\n              </Flex>\n            </Td>\n            <Td dataLabel={columnNames.prs}>\n              <Flex>\n                <FlexItem>{repo.prs}</FlexItem>\n                <FlexItem>\n                  <CodeIcon key=\"icon\" />\n                </FlexItem>\n              </Flex>\n            </Td>\n            <Td dataLabel={columnNames.workspaces}>\n              <Flex>\n                <FlexItem>{repo.workspaces}</FlexItem>\n                <FlexItem>\n                  <CubeIcon key=\"icon\" />\n                </FlexItem>\n              </Flex>\n            </Td>\n            <Td dataLabel={columnNames.lastCommit}>{repo.lastCommit}</Td>\n            <Td key={`${rowIndex}_5`}>\n              <ActionsColumn items={defaultActions} actionsToggle={customActionsToggle} />\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n\n  const panelContent = (\n    <DrawerPanelContent widths={{ default: 'width_33', xl: 'width_33' }}>\n      <DrawerHead>\n        <DrawerActions>\n          <DrawerCloseButton\n            onClick={() => {\n              setRowClicked(null);\n              setIsExpanded(false);\n            }}\n          />\n        </DrawerActions>\n        <Flex spaceItems={{ default: 'spaceItemsSm' }} direction={{ default: 'column' }}>\n          <FlexItem>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {rowClicked}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <a href=\"#\">siemur/test-space</a>\n          </FlexItem>\n        </Flex>\n      </DrawerHead>\n      <DrawerPanelBody hasNoPadding>\n        <Tabs\n          activeKey={secondaryActiveTabKey}\n          onSelect={(_event, tabIndex) => handleSecondaryTabClick(Number(tabIndex))}\n          hasBorderBottom={false}\n          inset={{ default: 'insetMd', md: 'insetSm' }}\n          id=\"tabs-tables-secondary-tabs\"\n        >\n          <Tab eventKey={10} title={<TabTitleText>Overview</TabTitleText>} tabContentId={`tabContent${10}`} />\n          <Tab eventKey={11} title={<TabTitleText>Activity</TabTitleText>} tabContentId={`tabContent${11}`} />\n          <Tab eventKey={12} title={<TabTitleText>Status</TabTitleText>} tabContentId={`tabContent${12}`} />\n        </Tabs>\n      </DrawerPanelBody>\n      <DrawerPanelBody>\n        <TabContent\n          key={10}\n          eventKey={10}\n          id={`tabContent${10}`}\n          activeKey={secondaryActiveTabKey}\n          hidden={10 !== secondaryActiveTabKey}\n        >\n          <TabContentBody>\n            <Flex direction={{ default: 'column' }} spaceItems={{ default: 'spaceItemsLg' }}>\n              <FlexItem>\n                <p>\n                  The content of the drawer really is up to you. It could have form fields, definition lists, text\n                  lists, labels, charts, progress bars, etc. Spacing recommendation is 24px margins. You can put tabs in\n                  here, and can also make the drawer scrollable.\n                </p>\n              </FlexItem>\n              <FlexItem>\n                <Progress value={33} title=\"Capacity\" size={ProgressSize.sm} />\n              </FlexItem>\n              <FlexItem>\n                <Progress value={66} title=\"Modules\" size={ProgressSize.sm} />\n              </FlexItem>\n              <Flex direction={{ default: 'column' }}>\n                <FlexItem>\n                  <Title headingLevel=\"h3\">Tags</Title>\n                </FlexItem>\n                <FlexItem>\n                  <LabelGroup>\n                    {[1, 2, 3, 4, 5].map(labelNumber => (\n                      <Label variant=\"outline\" key={`label-${labelNumber}`}>{`Tag ${labelNumber}`}</Label>\n                    ))}\n                  </LabelGroup>\n                </FlexItem>\n              </Flex>\n            </Flex>\n          </TabContentBody>\n        </TabContent>\n        <TabContent\n          key={11}\n          eventKey={11}\n          id={`tabContent${11}`}\n          activeKey={secondaryActiveTabKey}\n          hidden={11 !== secondaryActiveTabKey}\n        >\n          <TabContentBody>Activity panel</TabContentBody>\n        </TabContent>\n        <TabContent\n          key={12}\n          eventKey={12}\n          id={`tabContent${12}`}\n          activeKey={secondaryActiveTabKey}\n          hidden={12 !== secondaryActiveTabKey}\n        >\n          <TabContentBody>Status panel</TabContentBody>\n        </TabContent>\n      </DrawerPanelBody>\n    </DrawerPanelContent>\n  );\n\n  const tabContent = (\n    <Drawer isExpanded={isExpanded} isInline>\n      <DrawerContent panelContent={panelContent}>\n        <DrawerContentBody>\n          {toolbar}\n          <Divider />\n          {tableComposable}\n          <Pagination\n            id=\"page-layout-table-column-management-action-toolbar-bottom\"\n            itemCount={36}\n            widgetId=\"pagination-options-menu-bottom\"\n            page={1}\n            variant={PaginationVariant.bottom}\n          />\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n\n  return (\n    <DashboardWrapper hasNoBreadcrumb>\n      <React.Fragment>\n        <PageSection variant={PageSectionVariants.light}>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            Nodes\n          </Title>\n        </PageSection>\n        <PageSection type=\"tabs\" variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={(_event, tabIndex) => handleTabClick(Number(tabIndex))}\n            usePageInsets\n            id=\"tabs-table-tabs-list\"\n          >\n            <Tab eventKey={0} title={<TabTitleText>Nodes</TabTitleText>} tabContentId={`tabContent${0}`} />\n            <Tab eventKey={1} title={<TabTitleText>Node connectors</TabTitleText>} tabContentId={`tabContent${1}`} />\n          </Tabs>\n        </PageSection>\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <TabContent key={0} eventKey={0} id={`tabContent${0}`} activeKey={activeTabKey} hidden={0 !== activeTabKey}>\n            <TabContentBody>{tabContent}</TabContentBody>\n          </TabContent>\n          <TabContent key={1} eventKey={1} id={`tabContent${1}`} activeKey={activeTabKey} hidden={1 !== activeTabKey}>\n            <TabContentBody>Node connectors panel</TabContentBody>\n          </TabContent>\n        </PageSection>\n      </React.Fragment>\n    </DashboardWrapper>\n  );\n};\n","title":"Tables and tabs, auto width tabs","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Modal tabs': props => 
    <Example {...pageData} {...props} thumbnail={srcImportmodaltabs} {...{"code":"import React from 'react';\nimport DashboardWrapper from '../DashboardWrapper';\nimport {\n  PageSection,\n  TextContent,\n  Text,\n  Gallery,\n  Card,\n  CardBody,\n  CardTitle,\n  PageSectionVariants,\n  Modal,\n  ModalVariant,\n  Tab,\n  Tabs,\n  TabTitleText,\n  List,\n  ListItem,\n  Grid,\n  GridItem,\n  TabContent\n} from '@patternfly/react-core';\n\ninterface Product {\n  id: number;\n  name: string;\n  description: string;\n}\n\nconst products: Product[] = [\n  {\n    id: 0,\n    name: 'PatternFly',\n    description: 'PatternFly is a community project that promotes design commonality and improves user experience.'\n  },\n  {\n    id: 1,\n    name: 'ActiveMQ',\n    description:\n      'The ActiveMQ component allows messages to be sent to a JMS Queue or Topic; or messages to be consumed from a JMS Queue or Topic using Apache ActiveMQ.'\n  },\n  {\n    id: 2,\n    name: 'Apache Spark',\n    description: 'This documentation page covers the Apache Spark component for the Apache Camel.'\n  }\n];\n\nexport const ModalTabs: React.FunctionComponent = () => {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const [selectedProduct, setSelectedProduct] = React.useState<Product>();\n  const [activeTabKey, setActiveTabKey] = React.useState<string | number>(0);\n\n  const onCardClick = React.useCallback(\n    (product: Product) => () => {\n      setSelectedProduct(product);\n      setIsModalOpen(true);\n    },\n    []\n  );\n\n  const onCardKeyPress = React.useCallback(\n    (product: Product) => (event: React.KeyboardEvent<HTMLElement>) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        onCardClick(product)();\n      }\n    },\n    []\n  );\n\n  const closeModal = React.useCallback(() => {\n    setSelectedProduct(undefined);\n    setIsModalOpen(false);\n    setActiveTabKey(0);\n  }, []);\n\n  const onTabSelect = React.useCallback(\n    (_event: React.MouseEvent<HTMLElement, MouseEvent>, tabIndex: string | number) => setActiveTabKey(tabIndex),\n    []\n  );\n\n  return (\n    <React.Fragment>\n      <DashboardWrapper mainContainerId=\"main-content-card-view-default-nav\">\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Projects</Text>\n            <Text component=\"p\">Click any project card to view Tabs within Modals.</Text>\n          </TextContent>\n        </PageSection>\n        <PageSection isFilled>\n          <Gallery hasGutter aria-label=\"Selectable card container\">\n            {products.map(product => (\n              <Card\n                isSelectable\n                isSelectableRaised\n                hasSelectableInput\n                isCompact\n                key={product.id}\n                id={product.name.replace(/ /g, '-')}\n                onClick={onCardClick(product)}\n                onSelectableInputChange={() => onCardClick(product)()}\n                onKeyPress={onCardKeyPress(product)}\n              >\n                <CardTitle>{product.name}</CardTitle>\n                <CardBody>{product.description}</CardBody>\n              </Card>\n            ))}\n          </Gallery>\n        </PageSection>\n      </DashboardWrapper>\n\n      {selectedProduct && (\n        <Modal variant={ModalVariant.small} title={selectedProduct.name} isOpen={isModalOpen} onClose={closeModal}>\n          <Grid hasGutter>\n            <GridItem>\n              <Tabs activeKey={activeTabKey} onSelect={onTabSelect} isSecondary>\n                <Tab eventKey={0} tabContentId=\"details-tab\" title={<TabTitleText>Details</TabTitleText>} />\n                <Tab eventKey={1} tabContentId=\"doc-tab\" title={<TabTitleText>Documentation</TabTitleText>} />\n              </Tabs>\n            </GridItem>\n            <GridItem>\n              <TabContent eventKey={0} id=\"details-tab\" hidden={activeTabKey !== 0}>\n                {selectedProduct.description}\n              </TabContent>\n              <TabContent eventKey={1} id=\"doc-tab\" hidden={activeTabKey !== 1}>\n                <List>\n                  <ListItem>\n                    <a>Doc link 1</a>\n                  </ListItem>\n                  <ListItem>\n                    <a>Doc link 2</a>\n                  </ListItem>\n                  <ListItem>\n                    <a>Doc link 3</a>\n                  </ListItem>\n                </List>\n              </TabContent>\n            </GridItem>\n          </Grid>\n        </Modal>\n      )}\n    </React.Fragment>\n  );\n};\n","title":"Modal tabs","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Gray tabs': props => 
    <Example {...pageData} {...props} thumbnail={srcImportgraytabs} {...{"code":"import React from 'react';\nimport {\n  PageSection,\n  Tabs,\n  Tab,\n  TabContent,\n  TabContentBody,\n  TabTitleText,\n  Title,\n  Grid,\n  GridItem,\n  Flex,\n  FlexItem,\n  Card,\n  CardBody,\n  CardHeader\n} from '@patternfly/react-core';\nimport DashboardWrapper from '../DashboardWrapper';\n\nexport const GrayTabsDemo: React.FunctionComponent = () => {\n  const [activeTabKey, setActiveTabKey] = React.useState<string | number>(0);\n  const [activeNestedTabKey, setActiveNestedTabKey] = React.useState<string | number>(0);\n\n  // Toggle currently active tab\n  const handleTabClick = (_: React.MouseEvent, tabIndex: string | number) => setActiveTabKey(tabIndex);\n\n  // Toggle currently active nested tab\n  const handleNestedTabClick = (_: React.MouseEvent, tabIndex: string | number) => setActiveNestedTabKey(tabIndex);\n\n  const tabContent = (\n    <Grid hasGutter>\n      <GridItem xl={8} md={6}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h2\">Status</Title>\n          </CardHeader>\n          <CardBody>\n            <Flex direction={{ default: 'column' }}>\n              <FlexItem>\n                <Tabs\n                  activeKey={activeNestedTabKey}\n                  isSecondary\n                  onSelect={handleNestedTabClick}\n                  id=\"nested-tabs-example-tabs-list\"\n                >\n                  <Tab eventKey={10} title={<TabTitleText>Cluster</TabTitleText>} tabContentId={`tabContent${10}`} />\n                  <Tab\n                    eventKey={11}\n                    title={<TabTitleText>Control plane</TabTitleText>}\n                    tabContentId={`tabContent${11}`}\n                  />\n                  <Tab eventKey={12} title={<TabTitleText>Operators</TabTitleText>} tabContentId={`tabContent${12}`} />\n                  <Tab\n                    eventKey={13}\n                    title={<TabTitleText>Virtualization</TabTitleText>}\n                    tabContentId={`tabContent${13}`}\n                  />\n                </Tabs>\n              </FlexItem>\n              <FlexItem>\n                <TabContent\n                  key={10}\n                  eventKey={10}\n                  id={`tabContent${10}`}\n                  activeKey={activeNestedTabKey}\n                  hidden={10 !== activeNestedTabKey}\n                >\n                  <TabContentBody>\n                    {\n                      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce in odio porttitor, feugiat risus in, feugiat arcu. Nullam euismod enim eget fringilla condimentum. Maecenas tincidunt et metus id aliquet. Integer et fermentum purus. Nulla tempor velit arcu, vitae semper purus iaculis at. Sed malesuada auctor luctus. Pellentesque et leo urna. Aliquam vitae felis congue lacus mattis fringilla. Nullam et ultricies erat, sed dignissim elit. Cras mattis pulvinar aliquam. In ac est nulla. Pellentesque fermentum nibh ac sapien porta, ut congue orci aliquam. Sed nisl est, tempor eu pharetra eget, ullamcorper ut augue. Vestibulum eleifend libero eu nulla cursus lacinia.'\n                    }\n                  </TabContentBody>\n                </TabContent>\n                <TabContent\n                  key={11}\n                  eventKey={11}\n                  id={`tabContent${11}`}\n                  activeKey={activeNestedTabKey}\n                  hidden={11 !== activeNestedTabKey}\n                >\n                  <TabContentBody>Control plane panel</TabContentBody>\n                </TabContent>\n                <TabContent\n                  key={12}\n                  eventKey={12}\n                  id={`tabContent${12}`}\n                  activeKey={activeNestedTabKey}\n                  hidden={12 !== activeNestedTabKey}\n                >\n                  <TabContentBody>Operators panel</TabContentBody>\n                </TabContent>\n                <TabContent\n                  key={13}\n                  eventKey={13}\n                  id={`tabContent${13}`}\n                  activeKey={activeNestedTabKey}\n                  hidden={13 !== activeNestedTabKey}\n                >\n                  <TabContentBody>Virtualization panel</TabContentBody>\n                </TabContent>\n              </FlexItem>\n            </Flex>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem xl={4} md={6}>\n        <Flex direction={{ default: 'column' }} className=\"pf-u-h-100\">\n          <FlexItem flex={{ default: 'flex_1' }}>\n            <Card isFullHeight>\n              <CardHeader>\n                <Title headingLevel=\"h2\">Title of Card</Title>\n              </CardHeader>\n            </Card>\n          </FlexItem>\n          <FlexItem flex={{ default: 'flex_1' }}>\n            <Card isFullHeight>\n              <CardHeader>\n                <Title headingLevel=\"h2\">Title of Card</Title>\n              </CardHeader>\n            </Card>\n          </FlexItem>\n        </Flex>\n      </GridItem>\n    </Grid>\n  );\n\n  return (\n    <DashboardWrapper hasPageTemplateTitle>\n      <PageSection type=\"tabs\" isWidthLimited>\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={handleTabClick}\n          usePageInsets\n          isBox\n          variant=\"light300\"\n          id=\"open-tabs-example-tabs-list\"\n        >\n          <Tab eventKey={0} title={<TabTitleText>Cluster 1</TabTitleText>} tabContentId={`tabContent${0}`} />\n          <Tab eventKey={1} title={<TabTitleText>Cluster 2</TabTitleText>} tabContentId={`tabContent${1}`} />\n        </Tabs>\n      </PageSection>\n      <PageSection isWidthLimited>\n        <TabContent key={0} eventKey={0} id={`tabContent${0}`} activeKey={activeTabKey} hidden={0 !== activeTabKey}>\n          <TabContentBody>{tabContent}</TabContentBody>\n        </TabContent>\n        <TabContent key={1} eventKey={1} id={`tabContent${1}`} activeKey={activeTabKey} hidden={1 !== activeTabKey}>\n          <TabContentBody>Cluster 2 panel</TabContentBody>\n        </TabContent>\n      </PageSection>\n    </DashboardWrapper>\n  );\n};\n","title":"Gray tabs","lang":"js","isFullscreen":true}}>
      
    </Example>
};

const Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"id":"demos","size":"h2","className":"ws-title ws-h2"}}>
      {`Demos`}
    </AutoLinkHeader>
    {React.createElement(pageData.examples["Open tabs"])}
    {React.createElement(pageData.examples["Open tabs with secondary tabs"])}
    {React.createElement(pageData.examples["Nested tabs"])}
    {React.createElement(pageData.examples["Nested, unindented tabs"])}
    {React.createElement(pageData.examples["Tables and tabs"])}
    {React.createElement(pageData.examples["Tables and tabs, auto width tabs"])}
    {React.createElement(pageData.examples["Modal tabs"])}
    {React.createElement(pageData.examples["Gray tabs"])}
  </React.Fragment>
);
Component.displayName = 'ComponentsTabsReactDemosDocs';
Component.pageData = pageData;

export default Component;
