import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import DashboardWrapper from '../../../../../react-core/src/demos/./examples/DashboardWrapper';
import PauseIcon from '@patternfly/react-icons/dist/esm/icons/pause-icon';
import PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';
import ExpandIcon from '@patternfly/react-icons/dist/esm/icons/expand-icon';
import ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';
import DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';
import CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';
import SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';
import TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';
import srcImportconsolelogviewertoolbardemo from './react-demos/console-log-viewer-toolbar-demo.png';
const pageData = {
  "id": "Toolbar",
  "section": "components",
  "source": "react-demos",
  "slug": "/components/toolbar/react-demos",
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/demos/Toolbar.md",
  "fullscreenExamples": [
    "Console log viewer toolbar demo"
  ]
};
pageData.liveContext = {
  DashboardWrapper,
  PauseIcon,
  PlayIcon,
  ExpandIcon,
  ExternalLinkAltIcon,
  DownloadIcon,
  CogIcon,
  SearchIcon,
  TimesIcon
};
pageData.examples = {
  'Console log viewer toolbar demo': props => 
    <Example {...pageData} {...props} thumbnail={srcImportconsolelogviewertoolbardemo} {...{"code":"import React from 'react';\nimport { Toolbar, ToolbarContent, ToolbarGroup, ToolbarItem, ToolbarToggleGroup } from '@patternfly/react-core';\nimport {\n  Badge,\n  Button,\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownToggleAction,\n  DropdownPosition,\n  DropdownSeparator,\n  SearchInput,\n  Select,\n  SelectOption,\n  PageSection,\n  PageSectionVariants,\n  Tooltip\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\n\nimport PauseIcon from '@patternfly/react-icons/dist/esm/icons/pause-icon';\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\nimport ExpandIcon from '@patternfly/react-icons/dist/esm/icons/expand-icon';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\n\nclass ConsoleLogViewerToolbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.firstOptions = {\n      'container-sample-1': { type: 'C' },\n      'container-sample-2': { type: 'D' },\n      'container-sample-3': { type: 'E' }\n    };\n\n    this.state = {\n      containerExpanded: false,\n      containerExpandedMobile: false,\n      containerSelected: Object.keys(this.firstOptions)[0],\n      optionExpanded: false,\n      optionExpandedMobile: false,\n      isPaused: false,\n      firstSwitchChecked: true,\n      secondSwitchChecked: false,\n      searchValue: '',\n      searchResultsCount: 3,\n      currentSearchResult: 1,\n      externalExpanded: false,\n      externalExpandedMobile: false,\n      downloadExpanded: false,\n      downloadExpandedMobile: false,\n      mobileView: window.innerWidth >= 1450 ? false : true\n    };\n\n    this.onContainerToggle = isExpanded => {\n      this.setState({\n        containerExpanded: isExpanded\n      });\n    };\n\n    this.onContainerToggleMobile = isExpanded => {\n      this.setState({\n        containerExpandedMobile: isExpanded\n      });\n    };\n\n    this.onContainerSelect = (event, selection) => {\n      this.setState({\n        containerSelected: selection,\n        containerExpanded: false\n      });\n    };\n\n    this.onContainerSelectMobile = (event, selection) => {\n      this.setState({\n        containerSelected: selection,\n        containerExpandedMobile: false\n      });\n    };\n\n    this.onOptionToggle = isExpanded => {\n      this.setState({\n        optionExpanded: isExpanded\n      });\n    };\n\n    this.onOptionToggleMobile = isExpanded => {\n      this.setState({\n        optionExpandedMobile: isExpanded\n      });\n    };\n\n    this.onOptionSelect = event => {\n      this.setState({\n        optionExpanded: !this.state.optionExpanded\n      });\n    };\n\n    this.onOptionSelectMobile = event => {\n      this.setState({\n        optionExpandedMobile: !this.state.optionExpandedMobile\n      });\n    };\n\n    this.onExternalToggle = isExpanded => {\n      this.setState({\n        externalExpanded: isExpanded\n      });\n    };\n\n    this.onExternalToggleMobile = isExpanded => {\n      this.setState({\n        externalExpandedMobile: isExpanded\n      });\n    };\n\n    this.onExternalSelect = event => {\n      this.setState({\n        externalExpanded: !this.state.externalExpanded\n      });\n    };\n\n    this.onExternalSelectMobile = event => {\n      this.setState({\n        externalExpandedMobile: !this.state.externalExpandedMobile\n      });\n    };\n\n    this.onDownloadToggle = isExpanded => {\n      this.setState({\n        downloadExpanded: isExpanded\n      });\n    };\n\n    this.onDownloadToggleMobile = isExpanded => {\n      this.setState({\n        downloadExpandedMobile: isExpanded\n      });\n    };\n\n    this.onDownloadSelect = event => {\n      this.setState({\n        downloadExpanded: !this.state.downloadExpanded\n      });\n    };\n\n    this.onDownloadSelectMobile = event => {\n      this.setState({\n        downloadExpandedMobile: !this.state.downloadExpandedMobile\n      });\n    };\n\n    this.onExternalClick = event => {\n      window.alert('Open external logs!');\n    };\n\n    this.onDownloadClick = event => {\n      window.alert('Action!');\n    };\n\n    this.pauseOrStart = event => {\n      this.setState({\n        isPaused: !this.state.isPaused\n      });\n    };\n\n    this.handleFirstSwitchChange = (firstSwitchChecked, event) => {\n      this.setState({ firstSwitchChecked });\n    };\n\n    this.handleSecondSwitchChange = (secondSwitchChecked, event) => {\n      this.setState({ secondSwitchChecked });\n    };\n\n    this.onClearLogs = event => {\n      this.setState({\n        optionExpanded: false\n      });\n      window.alert('Clear Logs!');\n    };\n\n    this.onSearchChange = (value, event) => {\n      this.setState({\n        searchValue: value,\n        searchResultsCount: 3\n      });\n    };\n\n    this.onSearchClear = event => {\n      this.setState({\n        searchValue: '',\n        searchResultsCount: 0,\n        currentSearchResult: 1\n      });\n    };\n\n    this.onSearchNext = event => {\n      this.setState(prevState => {\n        const newCurrentResult = prevState.currentSearchResult + 1;\n        return {\n          currentSearchResult:\n            newCurrentResult <= prevState.searchResultsCount ? newCurrentResult : prevState.searchResultsCount\n        };\n      });\n    };\n\n    this.onSearchPrevious = event => {\n      this.setState(prevState => {\n        const newCurrentResult = prevState.currentSearchResult - 1;\n        return {\n          currentSearchResult: newCurrentResult > 0 ? newCurrentResult : 1\n        };\n      });\n    };\n\n    this.onPageResize = ({ windowSize }) => {\n      if (windowSize >= 1450) {\n        this.setState({\n          mobileView: false\n        });\n      } else {\n        this.setState({\n          mobileView: true\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      containerExpanded,\n      containerExpandedMobile,\n      containerSelected,\n      optionExpanded,\n      optionExpandedMobile,\n      isPaused,\n      firstSwitchChecked,\n      secondSwitchChecked,\n      searchValue,\n      searchResultsCount,\n      currentSearchResult,\n      externalExpanded,\n      externalExpandedMobile,\n      downloadExpanded,\n      downloadExpandedMobile,\n      kebabExpanded,\n      mobileView\n    } = this.state;\n\n    const externalDropdownItems = [\n      <DropdownItem key=\"action-1\" component=\"button\" onClick={this.onExternalClick}>\n        External logs\n      </DropdownItem>,\n      <DropdownItem key=\"action-2\" component=\"button\" onClick={this.onExternalClick}>\n        External logs\n      </DropdownItem>,\n      <DropdownItem key=\"action-3\" component=\"button\" onClick={this.onExternalClick}>\n        External logs\n      </DropdownItem>\n    ];\n\n    const downloadDropdownItems = [\n      <DropdownItem key=\"action-4\" component=\"button\" onClick={this.onDownloadClick}>\n        Current container logs\n      </DropdownItem>,\n      <DropdownItem key=\"action-5\" component=\"button\" onClick={this.onDownloadClick}>\n        All container logs\n      </DropdownItem>\n    ];\n\n    const optionDropdownItems = [\n      <DropdownItem key=\"switch-1\">\n        <Checkbox\n          label=\"Display timestamp\"\n          isChecked={firstSwitchChecked}\n          onChange={this.handleFirstSwitchChange}\n          id=\"switchMobileCheckbox1\"\n          name=\"check1\"\n        />\n      </DropdownItem>,\n      <DropdownItem key=\"switch-2\">\n        <Checkbox\n          label=\"Wrap lines\"\n          isChecked={secondSwitchChecked}\n          onChange={this.handleSecondSwitchChange}\n          id=\"switchMobileCheckbox2\"\n          name=\"check2\"\n        />\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem key=\"clear-log\" onClick={this.onClearLogs}>\n        Clear logs\n      </DropdownItem>\n    ];\n\n    const selectDropdownContent = (\n      <React.Fragment>\n        {Object.entries(this.firstOptions).map(([value, { type }]) => (\n          <SelectOption\n            key={value}\n            value={value}\n            isSelected={containerSelected === value}\n            isChecked={containerSelected === value}\n          >\n            <Badge key={value}>{type}</Badge>\n            {` ${value}`}\n          </SelectOption>\n        ))}\n      </React.Fragment>\n    );\n\n    const selectToggleContent = ({ showText }) => {\n      if (!containerSelected) {\n        return 'Select';\n      }\n      return (\n        <React.Fragment>\n          <Badge>{this.firstOptions[containerSelected].type}</Badge>\n          {showText && ` ${containerSelected}`}\n        </React.Fragment>\n      );\n    };\n\n    const LogsSearchInput = (\n      <ToolbarToggleGroup toggleIcon={<SearchIcon />} breakpoint=\"lg\">\n        <ToolbarItem>\n          <SearchInput\n            placeholder=\"Search logs\"\n            value={searchValue}\n            onChange={this.onSearchChange}\n            onClear={this.onSearchClear}\n            resultsCount={`${currentSearchResult} / ${searchResultsCount}`}\n            onNextClick={this.onSearchNext}\n            onPreviousClick={this.onSearchPrevious}\n          />\n        </ToolbarItem>\n      </ToolbarToggleGroup>\n    );\n\n    const leftAlignedItemsDesktop = (\n      <React.Fragment>\n        <ToolbarItem visibility={{ default: 'hidden', '2xl': 'visible' }}>\n          <Select\n            onToggle={this.onContainerToggle}\n            onSelect={this.onContainerSelect}\n            selections={containerSelected}\n            isOpen={containerExpanded}\n            customContent={selectDropdownContent}\n            placeholderText={selectToggleContent({ showText: true })}\n          />\n        </ToolbarItem>\n        <ToolbarItem visibility={{ default: 'hidden', '2xl': 'visible' }}>\n          <Dropdown\n            toggle={\n              <DropdownToggle id=\"option-toggle-desktop\" onToggle={this.onOptionToggle} icon={<CogIcon />}>\n                Options\n              </DropdownToggle>\n            }\n            isOpen={optionExpanded}\n            dropdownItems={optionDropdownItems}\n          />\n        </ToolbarItem>\n        <ToolbarItem visibility={{ default: 'hidden', '2xl': 'visible' }}>\n          <Button variant={isPaused ? 'plain' : 'link'} onClick={this.pauseOrStart}>\n            {isPaused ? <PlayIcon /> : <PauseIcon />}\n            {isPaused ? ` Resume Log` : ` Pause Log`}\n          </Button>\n        </ToolbarItem>\n      </React.Fragment>\n    );\n\n    const leftAlignedItemsMobile = (\n      <React.Fragment>\n        <ToolbarItem visibility={{ default: 'visible', '2xl': 'hidden' }}>\n          <Tooltip position=\"top\" content={<div>Select container</div>}>\n            <Select\n              onToggle={this.onContainerToggleMobile}\n              onSelect={this.onContainerSelectMobile}\n              selections={containerSelected}\n              isOpen={containerExpandedMobile}\n              customContent={selectDropdownContent}\n              placeholderText={selectToggleContent({ showText: false })}\n            />\n          </Tooltip>\n        </ToolbarItem>\n        <ToolbarItem visibility={{ default: 'visible', '2xl': 'hidden' }}>\n          <Tooltip position=\"top\" content={<div>Options</div>}>\n            <Dropdown\n              toggle={\n                <DropdownToggle aria-label=\"Options\" id=\"option-toggle-mobile\" onToggle={this.onOptionToggleMobile} icon={<CogIcon />} />\n              }\n              isOpen={optionExpandedMobile}\n              dropdownItems={optionDropdownItems}\n            />\n          </Tooltip>\n        </ToolbarItem>\n        <ToolbarItem visibility={{ default: 'visible', '2xl': 'hidden' }}>\n          <Tooltip position=\"top\" content={<div>{isPaused ? 'Resume log' : 'Pause log'}</div>}>\n            <Button variant=\"plain\" onClick={this.pauseOrStart} aria-label={isPaused ? 'Play' : 'Paused'}>\n              {isPaused ? <PlayIcon /> : <PauseIcon />}\n            </Button>\n          </Tooltip>\n        </ToolbarItem>\n      </React.Fragment>\n    );\n\n    const leftAlignedItems = (\n      <React.Fragment>\n        {leftAlignedItemsDesktop}\n        {leftAlignedItemsMobile}\n      </React.Fragment>\n    );\n\n    const rightAlignedItemsDesktop = (\n      <React.Fragment>\n        <ToolbarItem visibility={{ default: 'hidden', '2xl': 'visible' }}>\n          <Dropdown\n            onSelect={this.onExternalSelect}\n            toggle={\n              <DropdownToggle id=\"external-toggle\" onToggle={this.onExternalToggle}>\n                External logs\n              </DropdownToggle>\n            }\n            isOpen={externalExpanded}\n            dropdownItems={externalDropdownItems}\n          />\n        </ToolbarItem>\n        <ToolbarItem visibility={{ default: 'hidden', '2xl': 'visible' }}>\n          <Dropdown\n            onSelect={this.onDownloadSelect}\n            toggle={\n              <DropdownToggle id=\"download-toggle\" onToggle={this.onDownloadToggle}>\n                Download\n              </DropdownToggle>\n            }\n            isOpen={downloadExpanded}\n            dropdownItems={downloadDropdownItems}\n          />\n        </ToolbarItem>\n      </React.Fragment>\n    );\n\n    const rightAlignedItemsMobile = (\n      <React.Fragment>\n        <ToolbarItem visibility={{ default: 'visible', '2xl': 'hidden' }}>\n          <Tooltip position=\"top\" content={<div>External logs</div>}>\n            <Dropdown\n              onSelect={this.onExternalSelectMobile}\n              toggle={\n                <DropdownToggle\n                  id=\"mobile-external-toggle\"\n                  onToggle={this.onExternalToggleMobile}\n                  aria-label=\"External logs\"\n                  icon={<ExternalLinkAltIcon />}\n                />\n              }\n              isOpen={externalExpandedMobile}\n              dropdownItems={externalDropdownItems}\n            />\n          </Tooltip>\n        </ToolbarItem>\n        <ToolbarItem visibility={{ default: 'visible', '2xl': 'hidden' }}>\n          <Tooltip position=\"top\" content={<div>Download</div>}>\n            <Dropdown\n              onSelect={this.onDownloadSelectMobile}\n              toggle={\n                <DropdownToggle\n                  id=\"mobile-download-toggle\"\n                  aria-label=\"Download\"\n                  onToggle={this.onDownloadToggleMobile}\n                  icon={<DownloadIcon />}\n                />\n              }\n              isOpen={downloadExpandedMobile}\n              position={DropdownPosition.right}\n              dropdownItems={downloadDropdownItems}\n            />\n          </Tooltip>\n        </ToolbarItem>\n      </React.Fragment>\n    );\n\n    const rightAlignedItems = (\n      <React.Fragment>\n        <ToolbarItem>{LogsSearchInput}</ToolbarItem>\n        {rightAlignedItemsDesktop}\n        {rightAlignedItemsMobile}\n        <ToolbarItem>\n          <Tooltip position=\"top\" content={<div>Expand</div>}>\n            <Button variant=\"plain\" aria-label=\"expand\">\n              <ExpandIcon />\n            </Button>\n          </Tooltip>\n        </ToolbarItem>\n      </React.Fragment>\n    );\n\n    const items = (\n      <React.Fragment>\n        <ToolbarGroup alignment={{ default: 'alignLeft' }}>{leftAlignedItems}</ToolbarGroup>\n        <ToolbarGroup alignment={{ default: 'alignRight' }}>{rightAlignedItems}</ToolbarGroup>\n      </React.Fragment>\n    );\n\n    const toolbar = (\n      <Toolbar\n        id=\"log-viewer-toolbar\"\n        inset={{\n          default: 'insetNone'\n        }}\n      >\n        <ToolbarContent>{items}</ToolbarContent>\n      </Toolbar>\n    );\n    return (\n      <DashboardWrapper sidebarNavOpen={!mobileView} onPageResize={this.onPageResize}>\n        <PageSection variant={PageSectionVariants.light}>{toolbar}</PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Console log viewer toolbar demo","lang":"js","isFullscreen":true}}>
      
      <p {...{"className":"ws-p"}}>
        {`This is an example of toolbar usage in log viewer.`}
      </p>
    </Example>
};

const Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"id":"demos","size":"h2","className":"ws-title ws-h2"}}>
      {`Demos`}
    </AutoLinkHeader>
    {React.createElement(pageData.examples["Console log viewer toolbar demo"])}
  </React.Fragment>
);
Component.displayName = 'ComponentsToolbarReactDemosDocs';
Component.pageData = pageData;

export default Component;
