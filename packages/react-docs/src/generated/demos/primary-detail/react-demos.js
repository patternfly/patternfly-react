import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import DashboardWrapper from '../../../../../react-core/src/demos/./examples/DashboardWrapper';
import CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';
import CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';
import CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';
import CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';
import ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';
import FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';
import SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';
import TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';
import CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';
import pfIcon from '../../../../../react-core/src/demos/./Card/pf-logo-small.svg';
import activeMQIcon from '../../../../../react-core/src/demos/./Card/activemq-core_200x150.png';
import avroIcon from '../../../../../react-core/src/demos/./Card/camel-avro_200x150.png';
import dropBoxIcon from '../../../../../react-core/src/demos/./Card/camel-dropbox_200x150.png';
import infinispanIcon from '../../../../../react-core/src/demos/./Card/camel-infinispan_200x150.png';
import saxonIcon from '../../../../../react-core/src/demos/./Card/camel-saxon_200x150.png';
import sparkIcon from '../../../../../react-core/src/demos/./Card/camel-spark_200x150.png';
import swaggerIcon from '../../../../../react-core/src/demos/./Card/camel-swagger-java_200x150.png';
import azureIcon from '../../../../../react-core/src/demos/./Card/FuseConnector_Icons_AzureServices.png';
import restIcon from '../../../../../react-core/src/demos/./Card/FuseConnector_Icons_REST.png';
import srcImportprimarydetailcardview from './react-demos/primary-detail-card-view.png';
import srcImportprimarydetailcontentpadding from './react-demos/primary-detail-content-padding.png';
import srcImportprimarydetaildatalistincard from './react-demos/primary-detail-data-list-in-card.png';
import srcImportprimarydetailfullpage from './react-demos/primary-detail-full-page.png';
import srcImportprimarydetailinlinemodifier from './react-demos/primary-detail-inline-modifier.png';
import srcImportprimarydetailsimplelistincard from './react-demos/primary-detail-simple-list-in-card.png';
const pageData = {
  "id": "Primary-detail",
  "section": "demos",
  "source": "react-demos",
  "slug": "/demos/primary-detail/react-demos",
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/demos/PrimaryDetail.md",
  "fullscreenExamples": [
    "Primary-detail full page",
    "Primary-detail content padding",
    "Primary-detail card view",
    "Primary-detail simple list in card",
    "Primary-detail data list in card",
    "Primary-detail inline modifier"
  ]
};
pageData.liveContext = {
  DashboardWrapper,
  CodeBranchIcon,
  CodeIcon,
  CubeIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  FilterIcon,
  SearchIcon,
  TimesCircleIcon,
  CaretDownIcon,
  pfIcon,
  activeMQIcon,
  avroIcon,
  dropBoxIcon,
  infinispanIcon,
  saxonIcon,
  sparkIcon,
  swaggerIcon,
  azureIcon,
  restIcon
};
pageData.examples = {
  'Primary-detail full page': props => 
    <Example {...pageData} {...props} thumbnail={srcImportprimarydetailfullpage} {...{"code":"import React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  ToolbarToggleGroup,\n  ToolbarGroup,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  InputGroup,\n  PageSection,\n  PageSectionVariants,\n  Progress,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextInput,\n  Title\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\n\nclass PrimaryDetailFullPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDrawerExpanded: false,\n      drawerPanelBodyContent: '',\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0,\n      inputValue: '',\n      statusIsExpanded: false,\n      statusSelected: null,\n      riskIsExpanded: false,\n      riskSelected: null,\n      selectedDataListItemId: ''\n    };\n\n    this.statusOptions = [\n      { value: 'Status', disabled: false, isPlaceholder: true },\n      { value: 'New', disabled: false },\n      { value: 'Pending', disabled: false },\n      { value: 'Running', disabled: false },\n      { value: 'Cancelled', disabled: false }\n    ];\n\n    this.riskOptions = [\n      { value: 'Risk', disabled: false, isPlaceholder: true },\n      { value: 'Low', disabled: false },\n      { value: 'Medium', disabled: false },\n      { value: 'High', disabled: false }\n    ];\n\n    this.onInputChange = newValue => {\n      this.setState({ inputValue: newValue });\n    };\n\n    this.onStatusToggle = isExpanded => {\n      this.setState({\n        statusIsExpanded: isExpanded\n      });\n    };\n\n    this.onStatusSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearStatusSelection();\n      this.setState({\n        statusSelected: selection,\n        statusIsExpanded: false\n      });\n    };\n\n    this.clearStatusSelection = () => {\n      this.setState({\n        statusSelected: null,\n        statusIsExpanded: false\n      });\n    };\n\n    this.onRiskToggle = isExpanded => {\n      this.setState({\n        riskIsExpanded: isExpanded\n      });\n    };\n\n    this.onRiskSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearRiskSelection();\n      this.setState({\n        riskSelected: selection,\n        riskIsExpanded: false\n      });\n    };\n\n    this.clearRiskSelection = () => {\n      this.setState({\n        riskSelected: null,\n        riskIsExpanded: false\n      });\n    };\n\n    this.onSelectDataListItem = id => {\n      this.setState({\n        selectedDataListItemId: id,\n        isDrawerExpanded: true,\n        drawerPanelBodyContent: id.charAt(id.length - 1)\n      });\n    };\n\n    this.onCloseDrawerClick = () => {\n      this.setState({\n        isDrawerExpanded: false,\n        selectedDataListItemId: ''\n      });\n    };\n  }\n\n  render() {\n    const {\n      isDrawerExpanded,\n      drawerPanelBodyContent,\n      isDropdownOpen,\n      isKebabDropdownOpen,\n      activeItem,\n      inputValue,\n      statusIsExpanded,\n      statusSelected,\n      riskIsExpanded,\n      riskSelected,\n      selectedDataListItemId\n    } = this.state;\n\n    const toggleGroupItems = (\n      <React.Fragment>\n        <ToolbarItem>\n          <InputGroup>\n            <TextInput\n              name=\"full-page-data-toolbar-input1\"\n              id=\"full-page-data-toolbar-input1\"\n              type=\"search\"\n              aria-label=\"search input example\"\n              onChange={this.onInputChange}\n              value={inputValue}\n            />\n            <Button variant={ButtonVariant.control} aria-label=\"search button for search input\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarGroup variant=\"filter-group\">\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              onToggle={this.onStatusToggle}\n              onSelect={this.onStatusSelect}\n              selections={statusSelected}\n              isExpanded={statusIsExpanded}\n            >\n              {this.statusOptions.map((option, index) => (\n                <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n              ))}\n            </Select>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              onToggle={this.onRiskToggle}\n              onSelect={this.onRiskSelect}\n              selections={riskSelected}\n              isExpanded={riskIsExpanded}\n            >\n              {this.riskOptions.map((option, index) => (\n                <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n              ))}\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </React.Fragment>\n    );\n\n    const ToolbarItems = (\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n    );\n\n    const panelContent = (\n      <DrawerPanelContent>\n        <DrawerHead>\n          <Title headingLevel=\"h2\" size=\"xl\">\n            node-{drawerPanelBodyContent}\n          </Title>\n          <DrawerActions>\n            <DrawerCloseButton onClick={this.onCloseDrawerClick} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Flex spaceItems={{ default: 'spaceItemsLg' }} direction={{ default: 'column' }}>\n            <FlexItem>\n              <p>\n                The content of the drawer really is up to you. It could have form fields, definition lists, text lists,\n                labels, charts, progress bars, etc. Spacing recommendation is 24px margins. You can put tabs in here,\n                and can also make the drawer scrollable.\n              </p>\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 10} title=\"Title\" />\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 5} title=\"Title\" />\n            </FlexItem>\n          </Flex>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n    const drawerContent = (\n      <React.Fragment>\n        <Toolbar id=\"full-page-data-toolbar\" usePageInsets>\n          <ToolbarContent>{ToolbarItems}</ToolbarContent>\n        </Toolbar>\n        <DataList\n          aria-label=\"data list\"\n          selectedDataListItemId={selectedDataListItemId}\n          onSelectDataListItem={this.onSelectDataListItem}\n        >\n          <DataListItem id=\"full-page-item1\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly</p>\n                        <small>\n                          Working repo for PatternFly 4 <a>https://pf4.patternfly.org/</a>\n                        </small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"full-page-item2\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly-elements</p>\n                        <small>PatternFly elements</small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <CheckCircleIcon /> 7\n                        </FlexItem>\n                        <FlexItem>\n                          <ExclamationTriangleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <TimesCircleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"full-page-item3\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly</p>\n                        <small>\n                          Working repo for PatternFly 4 <a>https://pf4.patternfly.org/</a>\n                        </small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"full-page-item4\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly-elements</p>\n                        <small>PatternFly elements</small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <CheckCircleIcon /> 7\n                        </FlexItem>\n                        <FlexItem>\n                          <ExclamationTriangleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <TimesCircleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </React.Fragment>\n    );\n\n    return (\n      <DashboardWrapper mainContainerId=\"main-content-page-layout-default-nav\">\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Main title</Text>\n            <Text component=\"p\">\n              Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n              of it’s relative line height of 1.5.\n            </Text>\n          </TextContent>\n        </PageSection>\n        <Divider component=\"div\" />\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <Drawer isExpanded={isDrawerExpanded}>\n            <DrawerContent panelContent={panelContent}>\n              <DrawerContentBody>{drawerContent}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Primary-detail full page","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Primary-detail content padding': props => 
    <Example {...pageData} {...props} thumbnail={srcImportprimarydetailcontentpadding} {...{"code":"import React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  ToolbarToggleGroup,\n  ToolbarGroup,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  InputGroup,\n  PageSection,\n  PageSectionVariants,\n  Progress,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextInput,\n  Title\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\n\nclass PrimaryDetailContentPadding extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDrawerExpanded: false,\n      drawerPanelBodyContent: '',\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0,\n      inputValue: '',\n      statusIsExpanded: false,\n      statusSelected: null,\n      riskIsExpanded: false,\n      riskSelected: null,\n      selectedDataListItemId: ''\n    };\n\n    this.statusOptions = [\n      { value: 'Status', disabled: false, isPlaceholder: true },\n      { value: 'New', disabled: false },\n      { value: 'Pending', disabled: false },\n      { value: 'Running', disabled: false },\n      { value: 'Cancelled', disabled: false }\n    ];\n\n    this.riskOptions = [\n      { value: 'Risk', disabled: false, isPlaceholder: true },\n      { value: 'Low', disabled: false },\n      { value: 'Medium', disabled: false },\n      { value: 'High', disabled: false }\n    ];\n\n    this.onInputChange = newValue => {\n      this.setState({ inputValue: newValue });\n    };\n\n    this.onStatusToggle = isExpanded => {\n      this.setState({\n        statusIsExpanded: isExpanded\n      });\n    };\n\n    this.onStatusSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearStatusSelection();\n      this.setState({\n        statusSelected: selection,\n        statusIsExpanded: false\n      });\n    };\n\n    this.clearStatusSelection = () => {\n      this.setState({\n        statusSelected: null,\n        statusIsExpanded: false\n      });\n    };\n\n    this.onRiskToggle = isExpanded => {\n      this.setState({\n        riskIsExpanded: isExpanded\n      });\n    };\n\n    this.onRiskSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearRiskSelection();\n      this.setState({\n        riskSelected: selection,\n        riskIsExpanded: false\n      });\n    };\n\n    this.clearRiskSelection = () => {\n      this.setState({\n        riskSelected: null,\n        riskIsExpanded: false\n      });\n    };\n\n    this.onSelectDataListItem = id => {\n      this.setState({\n        selectedDataListItemId: id,\n        isDrawerExpanded: true,\n        drawerPanelBodyContent: id.charAt(id.length - 1)\n      });\n    };\n\n    this.onCloseDrawerClick = () => {\n      this.setState({\n        isDrawerExpanded: false,\n        selectedDataListItemId: ''\n      });\n    };\n  }\n\n  render() {\n    const {\n      isDrawerExpanded,\n      drawerPanelBodyContent,\n      isDropdownOpen,\n      isKebabDropdownOpen,\n      activeItem,\n      inputValue,\n      statusIsExpanded,\n      statusSelected,\n      riskIsExpanded,\n      riskSelected,\n      selectedDataListItemId\n    } = this.state;\n\n    const toggleGroupItems = (\n      <React.Fragment>\n        <ToolbarItem>\n          <InputGroup>\n            <TextInput\n              name=\"content-padding-data-toolbar-input1\"\n              id=\"content-padding-data-toolbar-input1\"\n              type=\"search\"\n              aria-label=\"search input example\"\n              onChange={this.onInputChange}\n              value={inputValue}\n            />\n            <Button variant={ButtonVariant.control} aria-label=\"search button for search input\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarGroup variant=\"filter-group\">\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              onToggle={this.onStatusToggle}\n              onSelect={this.onStatusSelect}\n              selections={statusSelected}\n              isExpanded={statusIsExpanded}\n            >\n              {this.statusOptions.map((option, index) => (\n                <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n              ))}\n            </Select>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              onToggle={this.onRiskToggle}\n              onSelect={this.onRiskSelect}\n              selections={riskSelected}\n              isExpanded={riskIsExpanded}\n            >\n              {this.riskOptions.map((option, index) => (\n                <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n              ))}\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </React.Fragment>\n    );\n\n    const ToolbarItems = (\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n    );\n\n    const panelContent = (\n      <DrawerPanelContent>\n        <DrawerHead>\n          <Title headingLevel=\"h2\" size=\"xl\">\n            node-{drawerPanelBodyContent}\n          </Title>\n          <DrawerActions>\n            <DrawerCloseButton onClick={this.onCloseDrawerClick} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Flex spaceItems={{ default: 'spaceItemsLg' }} direction={{ default: 'column' }}>\n            <FlexItem>\n              <p>\n                The content of the drawer really is up to you. It could have form fields, definition lists, text lists,\n                labels, charts, progress bars, etc. Spacing recommendation is 24px margins. You can put tabs in here,\n                and can also make the drawer scrollable.\n              </p>\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 10} title=\"Title\" />\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 5} title=\"Title\" />\n            </FlexItem>\n          </Flex>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n\n    const drawerContent = (\n      <React.Fragment>\n        <Toolbar id=\"content-padding-data-toolbar\" usePageInsets>\n          <ToolbarContent>{ToolbarItems}</ToolbarContent>\n        </Toolbar>\n        <DataList\n          aria-label=\"data list\"\n          selectedDataListItemId={selectedDataListItemId}\n          onSelectDataListItem={this.onSelectDataListItem}\n        >\n          <DataListItem id=\"content-padding-item1\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly</p>\n                        <small>\n                          Working repo for PatternFly 4 <a>https://pf4.patternfly.org/</a>\n                        </small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"content-padding-item2\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly-elements</p>\n                        <small>PatternFly elements</small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <CheckCircleIcon /> 7\n                        </FlexItem>\n                        <FlexItem>\n                          <ExclamationTriangleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <TimesCircleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"content-padding-item3\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly</p>\n                        <small>\n                          Working repo for PatternFly 4 <a>https://pf4.patternfly.org/</a>\n                        </small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"content-padding-item4\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly-elements</p>\n                        <small>PatternFly elements</small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <CheckCircleIcon /> 7\n                        </FlexItem>\n                        <FlexItem>\n                          <ExclamationTriangleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <TimesCircleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </React.Fragment>\n    );\n\n    return (\n      <DashboardWrapper>\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Main title</Text>\n            <Text component=\"p\">\n              Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n              of it’s relative line height of 1.5.\n            </Text>\n          </TextContent>\n        </PageSection>\n        <Divider component=\"div\" />\n        <PageSection padding={{ default: 'noPadding' }}>\n          <Drawer isExpanded={isDrawerExpanded}>\n            <DrawerContent panelContent={panelContent} className={'pf-m-no-background'}>\n              <DrawerContentBody hasPadding>{drawerContent}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Primary-detail content padding","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Primary-detail card view': props => 
    <Example {...pageData} {...props} thumbnail={srcImportprimarydetailcardview} {...{"code":"import React from 'react';\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownSeparator,\n  Drawer,\n  DrawerActions,\n  DrawerPanelBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  DrawerSection,\n  Flex,\n  FlexItem,\n  Gallery,\n  KebabToggle,\n  OverflowMenu,\n  OverflowMenuControl,\n  OverflowMenuItem,\n  PageSection,\n  PageSectionVariants,\n  Pagination,\n  Progress,\n  Select,\n  SelectOption,\n  SelectVariant,\n  TextContent,\n  Text,\n  Title,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\nimport pfIcon from './pf-logo-small.svg';\nimport activeMQIcon from './activemq-core_200x150.png';\nimport avroIcon from './camel-avro_200x150.png';\nimport dropBoxIcon from './camel-dropbox_200x150.png';\nimport infinispanIcon from './camel-infinispan_200x150.png';\nimport saxonIcon from './camel-saxon_200x150.png';\nimport sparkIcon from './camel-spark_200x150.png';\nimport swaggerIcon from './camel-swagger-java_200x150.png';\nimport azureIcon from './FuseConnector_Icons_AzureServices.png';\nimport restIcon from './FuseConnector_Icons_REST.png';\n\nclass PrimaryDetailCardView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: 1,\n      perPage: 10,\n      isDrawerExpanded: false,\n      activeCard: null,\n      filters: {\n        products: []\n      },\n      res: [],\n      isUpperToolbarDropdownOpen: false,\n      isUpperToolbarKebabDropdownOpen: false,\n      isLowerToolbarDropdownOpen: false,\n      isLowerToolbarKebabDropdownOpen: false,\n      isCardKebabDropdownOpen: false,\n      activeItem: 0\n    };\n\n    this.onToolbarDropdownToggle = isLowerToolbarDropdownOpen => {\n      this.setState(prevState => ({\n        isLowerToolbarDropdownOpen\n      }));\n    };\n\n    this.onToolbarDropdownSelect = event => {\n      this.setState({\n        isLowerToolbarDropdownOpen: !this.state.isLowerToolbarDropdownOpen\n      });\n    };\n\n    this.onToolbarKebabDropdownToggle = isLowerToolbarKebabDropdownOpen => {\n      this.setState({\n        isLowerToolbarKebabDropdownOpen\n      });\n    };\n\n    this.onToolbarKebabDropdownSelect = event => {\n      this.setState({\n        isLowerToolbarKebabDropdownOpen: !this.state.isLowerToolbarKebabDropdownOpen\n      });\n    };\n\n    this.deleteItem = item => event => {\n      const filter = getter => val => getter(val) !== item.id;\n      this.setState({\n        res: this.state.res.filter(filter(({ id }) => id)),\n        selectedItems: this.state.selectedItems.filter(filter(id => id))\n      });\n    };\n\n    this.onNameSelect = (event, selection) => {\n      const checked = event.target.checked;\n      this.setState(prevState => {\n        const prevSelections = prevState.filters['products'];\n        return {\n          filters: {\n            ...prevState.filters,\n            ['products']: checked ? [...prevSelections, selection] : prevSelections.filter(value => value !== selection)\n          }\n        };\n      });\n    };\n\n    this.onDelete = (type = '', id = '') => {\n      if (type) {\n        this.setState(prevState => {\n          prevState.filters[type.toLowerCase()] = prevState.filters[type.toLowerCase()].filter(s => s !== id);\n          return {\n            filters: prevState.filters\n          };\n        });\n      } else {\n        this.setState({\n          filters: {\n            products: []\n          }\n        });\n      }\n    };\n\n    this.onCloseDrawerClick = () => {\n      this.setState({\n        activeCard: null,\n        isDrawerExpanded: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      if (event.target !== event.currentTarget || event.currentTarget.id === this.state.activeCard) {\n        return;\n      }\n      if ([13, 32].includes(event.keyCode)) {\n        event.preventDefault();\n        const newSelected = event.currentTarget.id;\n        this.setState({\n          activeCard: newSelected,\n          isDrawerExpanded: true\n        });\n      }\n    };\n\n    this.onCardClick = event => {\n      if (event.currentTarget.id === this.state.activeCard) {\n        return;\n      }\n\n      const newSelected = event.currentTarget.id;\n\n      this.setState({\n        activeCard: newSelected,\n        isDrawerExpanded: true\n      });\n    };\n\n    this.onChange = (labelledById, _event) => {\n      if (labelledById === this.state.activeCard) {\n        return;\n      }\n\n      this.setState({\n        activeCard: labelledById,\n        isDrawerExpanded: true\n      });\n    };\n\n    this.onPerPageSelect = (_evt, perPage) => {\n      this.setState({ page: 1, perPage });\n    };\n\n    this.onSetPage = (_evt, page) => {\n      this.setState({ page });\n    };\n  }\n\n  getAllItems() {\n    const { res } = this.state;\n    const collection = [];\n    for (const items of res) {\n      collection.push(items.id);\n    }\n\n    return collection;\n  }\n\n  fetch(page, perPage) {\n    fetch(`https://my-json-server.typicode.com/jenny-s51/cardviewdata/posts?_page=${page}&_limit=${perPage}`)\n      .then(resp => resp.json())\n      .then(resp => this.setState({ res: resp, perPage, page }))\n      .then(() => this.updateSelected())\n      .catch(err => this.setState({ error: err }));\n  }\n\n  componentDidMount() {\n    this.fetch(this.state.page, this.state.perPage);\n  }\n\n  buildFilterDropdown() {\n    const { isLowerToolbarDropdownOpen, filters } = this.state;\n\n    const filterDropdownItems = [\n      <SelectOption key=\"patternfly\" value=\"Patternfly\" />,\n      <SelectOption key=\"activemq\" value=\"ActiveMQ\" />,\n      <SelectOption key=\"apachespark\" value=\"Apache Spark\" />,\n      <SelectOption key=\"avro\" value=\"Avro\" />,\n      <SelectOption key=\"azureservices\" value=\"Azure Services\" />,\n      <SelectOption key=\"crypto\" value=\"Crypto\" />,\n      <SelectOption key=\"dropbox\" value=\"DropBox\" />,\n      <SelectOption key=\"jbossdatagrid\" value=\"JBoss Data Grid\" />,\n      <SelectOption key=\"rest\" value=\"REST\" />,\n      <SelectOption key=\"swagger\" value=\"SWAGGER\" />\n    ];\n\n    return (\n      <ToolbarFilter categoryName=\"Products\" chips={filters.products} deleteChip={this.onDelete}>\n        <Select\n          variant={SelectVariant.checkbox}\n          aria-label=\"Products\"\n          onToggle={this.onToolbarDropdownToggle}\n          onSelect={this.onNameSelect}\n          selections={filters.products}\n          isExpanded={isLowerToolbarDropdownOpen}\n          placeholderText=\"Creator\"\n        >\n          {filterDropdownItems}\n        </Select>\n      </ToolbarFilter>\n    );\n  }\n\n  render() {\n    const {\n      isDrawerExpanded,\n      activeCard,\n      isUpperToolbarDropdownOpen,\n      isLowerToolbarDropdownOpen,\n      isUpperToolbarKebabDropdownOpen,\n      isLowerToolbarKebabDropdownOpen,\n      isCardKebabDropdownOpen,\n      activeItem,\n      filters,\n      res\n    } = this.state;\n\n    const toolbarKebabDropdownItems = [\n      <DropdownItem key=\"link\">Link</DropdownItem>,\n      <DropdownItem key=\"action\" component=\"button\">\n        Action\n      </DropdownItem>,\n      <DropdownItem key=\"disabled link\" isDisabled>\n        Disabled Link\n      </DropdownItem>,\n      <DropdownItem key=\"disabled action\" isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator key=\"separator\" />,\n      <DropdownItem key=\"separated link\">Separated Link</DropdownItem>,\n      <DropdownItem key=\"separated action\" component=\"button\">\n        Separated Action\n      </DropdownItem>\n    ];\n\n    const toolbarItems = (\n      <React.Fragment>\n        <ToolbarItem variant=\"overflow-menu\">\n          <OverflowMenu breakpoint=\"xl\">\n            <OverflowMenuItem isPersistent>{this.buildFilterDropdown()}</OverflowMenuItem>\n            <OverflowMenuItem isPersistent>\n              <Button variant=\"primary\">Create a Project</Button>\n            </OverflowMenuItem>\n            <OverflowMenuControl hasAdditionalOptions>\n              <Dropdown\n                onSelect={this.onToolbarKebabDropdownSelect}\n                toggle={\n                  <KebabToggle onToggle={this.onToolbarKebabDropdownToggle} id=\"card-view-data-toolbar-dropdown\" />\n                }\n                isOpen={isLowerToolbarKebabDropdownOpen}\n                isPlain\n                dropdownItems={toolbarKebabDropdownItems}\n                isFlipEnabled\n                menuAppendTo=\"parent\"\n              />\n            </OverflowMenuControl>\n          </OverflowMenu>\n        </ToolbarItem>\n      </React.Fragment>\n    );\n\n    const filtered =\n      filters.products.length > 0\n        ? res.filter(card => {\n            return filters.products.length === 0 || filters.products.includes(card.name);\n          })\n        : res;\n\n    const icons = {\n      pfIcon,\n      activeMQIcon,\n      sparkIcon,\n      avroIcon,\n      azureIcon,\n      saxonIcon,\n      dropBoxIcon,\n      infinispanIcon,\n      restIcon,\n      swaggerIcon\n    };\n\n    const drawerContent = (\n      <Gallery hasGutter role='region' aria-label=\"Selectable card container\">\n        {filtered.map((product, key) => (\n          <React.Fragment>\n            <Card\n              isHoverable\n              key={key}\n              id={'card-view-' + key}\n              onKeyDown={this.onKeyDown}\n              onClick={this.onCardClick}\n              onSelectableInputChange={this.onChange}\n              isSelectable\n              isSelected={activeCard === 'card-view-' + key}\n              hasSelectableInput\n            >\n              <CardHeader>\n                <img src={icons[product.icon]} alt={`${product.name} icon`} style={{ height: '50px' }} />\n              </CardHeader>\n              <CardTitle>{product.name}</CardTitle>\n              <CardBody>{product.description}</CardBody>\n            </Card>\n          </React.Fragment>\n        ))}\n      </Gallery>\n    );\n\n    const panelContent = (\n      <DrawerPanelContent>\n        <DrawerHead>\n          <Title headingLevel=\"h2\" size=\"xl\">\n            node-{activeCard && activeCard.charAt(activeCard.length - 1)}\n          </Title>\n          <DrawerActions>\n            <DrawerCloseButton onClick={this.onCloseDrawerClick} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Flex spaceItems={{ default: 'spaceItemsLg' }} direction={{ default: 'column' }}>\n            <FlexItem>\n              <p>\n                The content of the drawer really is up to you. It could have form fields, definition lists, text lists,\n                labels, charts, progress bars, etc. Spacing recommendation is 24px margins. You can put tabs in here,\n                and can also make the drawer scrollable.\n              </p>\n            </FlexItem>\n            <FlexItem>\n              <Progress value={activeCard * 10} title=\"Title\" />\n            </FlexItem>\n            <FlexItem>\n              <Progress value={activeCard * 5} title=\"Title\" />\n            </FlexItem>\n          </Flex>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n\n    return (\n      <DashboardWrapper mainContainerId=\"main-content-card-view-default-nav\" breadcrumb={null}>\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Projects</Text>\n            <Text component=\"p\">This is a demo that showcases Patternfly Cards.</Text>\n          </TextContent>\n        </PageSection>\n        <PageSection isFilled padding={{ default: 'noPadding' }}>\n          <Toolbar id=\"card-view-data-toolbar-group-types\" usePageInsets clearAllFilters={this.onDelete}>\n            <ToolbarContent>{toolbarItems}</ToolbarContent>\n          </Toolbar>\n          <Divider component=\"div\" />\n        </PageSection>\n        <PageSection isFilled padding={{ default: 'noPadding' }}>\n          <Drawer isExpanded={isDrawerExpanded} className={'pf-m-inline-on-2xl'}>\n            <DrawerContent panelContent={panelContent} className={'pf-m-no-background'}>\n              <DrawerContentBody hasPadding>{drawerContent}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n        <PageSection isFilled={false} sticky=\"bottom\" padding={{ default: 'noPadding' }} variant=\"light\">\n          <Pagination\n            itemCount={filtered.length}\n            page={this.state.page}\n            perPage={this.state.perPage}\n            onPerPageSelect={this.onPerPageSelect}\n            onSetPage={this.onSetPage}\n            variant=\"bottom\"\n          />\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Primary-detail card view","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Primary-detail simple list in card': props => 
    <Example {...pageData} {...props} thumbnail={srcImportprimarydetailsimplelistincard} {...{"code":"import React from 'react';\nimport {\n  Card,\n  CardBody,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  PageSection,\n  PageSectionVariants,\n  Progress,\n  SimpleList,\n  SimpleListGroup,\n  SimpleListItem,\n  Text,\n  TextContent,\n  TextInput,\n  Title\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\n\nclass PrimaryDetailSimpleListInCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawerPanelBodyContent: 1,\n      activeItem: 0,\n      isKebabDropdownOpen: false,\n      isDropdownOpen: false,\n      isExpanded: false\n    };\n\n    this.onSelectListItem = (listItem, listItemProps) => {\n      const id = listItemProps.id;\n      this.setState({\n        drawerPanelBodyContent: id.charAt(id.length - 1),\n        isExpanded: true\n      });\n    };\n\n    this.onClose = () => {\n      this.setState({\n        isExpanded: false\n      });\n    };\n  }\n\n  render() {\n    const { drawerPanelBodyContent, selectedListItemId, activeItem, isExpanded } = this.state;\n\n    const panelContent = (\n      <DrawerPanelContent widthOnXl={75}>\n        <DrawerHead>\n          <Title headingLevel=\"h2\" size=\"xl\">\n            {`List item ${drawerPanelBodyContent} details`}\n          </Title>\n          <DrawerActions>\n            <DrawerCloseButton onClick={this.onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Flex spaceItems={{ default: 'spaceItemsLg' }} direction={{ default: 'column' }}>\n            <FlexItem>\n              <p>\n                The content of the drawer really is up to you. It could have form fields, definition lists, text lists,\n                labels, charts, progress bars, etc. Spacing recommendation is 24px margins. You can put tabs in here,\n                and can also make the drawer scrollable.\n              </p>\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 10} title=\"Title\" />\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 5} title=\"Title\" />\n            </FlexItem>\n          </Flex>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n\n    const drawerContent = (\n      <React.Fragment>\n        <SimpleList onSelect={this.onSelectListItem}>\n          <SimpleListGroup title=\"Section 1\" id=\"simple-list-section-1\">\n            <SimpleListItem key=\"item1\" id=\"simple-list-item1\" isCurrent>\n              List item 1\n            </SimpleListItem>\n            <SimpleListItem key=\"item2\" id=\"simple-list-item2\">\n              List item 2\n            </SimpleListItem>\n            <SimpleListItem key=\"item3\" id=\"simple-list-item3\">\n              List item 3\n            </SimpleListItem>\n            <SimpleListItem key=\"item4\" id=\"simple-list-item4\">\n              List item 4\n            </SimpleListItem>\n          </SimpleListGroup>\n          <SimpleListGroup title=\"Section 2\" id=\"section-2\">\n            <SimpleListItem key=\"item5\" id=\"simple-list-item5\">\n              List item 5\n            </SimpleListItem>\n            <SimpleListItem key=\"item6\" id=\"simple-list-item6\">\n              List item 6\n            </SimpleListItem>\n            <SimpleListItem key=\"item7\" id=\"simple-list-item7\">\n              List item 7\n            </SimpleListItem>\n            <SimpleListItem key=\"item8\" id=\"simple-list-item8\">\n              List item 8\n            </SimpleListItem>\n            <SimpleListItem key=\"item9\" id=\"simple-list-item9\">\n              List item 9\n            </SimpleListItem>\n          </SimpleListGroup>\n        </SimpleList>\n      </React.Fragment>\n    );\n\n    return (\n      <DashboardWrapper>\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Main title</Text>\n            <Text component=\"p\">\n              Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n              of it’s relative line height of 1.5.\n            </Text>\n          </TextContent>\n        </PageSection>\n        <Divider component=\"div\" />\n        <PageSection>\n          <Card>\n            <Drawer isStatic isExpanded={isExpanded}>\n              <DrawerContent panelContent={panelContent}>\n                <DrawerContentBody>{drawerContent}</DrawerContentBody>\n              </DrawerContent>\n            </Drawer>\n          </Card>\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Primary-detail simple list in card","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Primary-detail data list in card': props => 
    <Example {...pageData} {...props} thumbnail={srcImportprimarydetaildatalistincard} {...{"code":"import React from 'react';\nimport {\n  Card,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  Flex,\n  FlexItem,\n  PageSection,\n  PageSectionVariants,\n  Progress,\n  Text,\n  TextContent,\n  Title\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\n\nclass PrimaryDetailDataListInCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawerPanelBodyContent: 1,\n      activeItem: 0,\n      isKebabDropdownOpen: false,\n      isDropdownOpen: false,\n      selectedDataListItemId: 'dataListItem1',\n      isExpanded: false\n    };\n\n    this.onDropdownToggle = isOpen => {\n      this.setState({\n        isDropdownOpen: isOpen\n      });\n    };\n    this.onDropdownSelect = event => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen\n      });\n      this.onDropdownFocus();\n    };\n    this.onDropdownFocus = () => {\n      const element = document.getElementById('toggle-id');\n      element.focus();\n    };\n    this.onSelectDataListItem = id => {\n      this.setState({\n        selectedDataListItemId: id,\n        drawerPanelBodyContent: id.charAt(id.length - 1),\n        isExpanded: true\n      });\n    };\n    this.onClose = () => {\n      this.setState({\n        isExpanded: false\n      });\n    };\n  }\n\n  render() {\n    const {\n      drawerPanelBodyContent,\n      selectedListItemId,\n      activeItem,\n      isDropdownOpen,\n      selectedDataListItemId,\n      isExpanded\n    } = this.state;\n\n    const panelContent = (\n      <DrawerPanelContent widthOn2Xl={75}>\n        <DrawerHead>\n          <Title size=\"lg\" headingLevel=\"h2\">\n            Patternfly-elements\n          </Title>\n          <DrawerActions>\n            <DrawerCloseButton onClick={this.onClose} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Flex spaceItems={{ default: 'spaceItemsLg' }} direction={{ default: 'column' }}>\n            <FlexItem>\n              <p>\n                The content of the drawer really is up to you. It could have form fields, definition lists, text lists,\n                labels, charts, progress bars, etc. Spacing recommendation is 24px margins. You can put tabs in here,\n                and can also make the drawer scrollable.\n              </p>\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 10} title=\"Title\" />\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 5} title=\"Title\" />\n            </FlexItem>\n          </Flex>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n\n    const dropdownItems = [\n      <DropdownItem key=\"option1\">Option 1</DropdownItem>,\n      <DropdownItem key=\"option2\">Option 2</DropdownItem>\n    ];\n\n    const drawerContent = (\n      <React.Fragment>\n        <Toolbar id=\"data-list-data-toolbar\" usePageInsets>\n          <ToolbarContent>\n            <ToolbarItem>\n              <Dropdown\n                onSelect={this.onDropdownSelect}\n                toggle={\n                  <DropdownToggle\n                    id=\"data-list-toggle-id\"\n                    onToggle={this.onDropdownToggle}\n                    iconComponent={CaretDownIcon}\n                  >\n                    Dropdown\n                  </DropdownToggle>\n                }\n                isOpen={isDropdownOpen}\n                dropdownItems={dropdownItems}\n                isFlipEnabled\n                menuAppendTo=\"parent\"\n              />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n        <DataList\n          aria-label=\"selectable data list example\"\n          selectedDataListItemId={selectedDataListItemId}\n          onSelectDataListItem={this.onSelectDataListItem}\n        >\n          <DataListItem aria-label=\"data-list-item1-in-card\" id=\"data-list-item1\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell>\n                    <div>Node 1</div>\n                    <a href=\"#\">siemur/test-space</a>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-label=\"data-list-item2-in-card\" id=\"data-list-item2\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell>\n                    <div>Node 2</div>\n                    <a href=\"#\">siemur/test-space</a>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-label=\"data-list-item3-in-card\" id=\"data-list-item3\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell>\n                    <div>Node 3</div>\n                    <a href=\"#\">siemur/test-space</a>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-label=\"data-list-item4-in-card\" id=\"data-list-item4\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell>\n                    <div>Node 4</div>\n                    <a href=\"#\">siemur/test-space</a>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem aria-label=\"data-list-item5-in-card\" id=\"data-list-item5\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell>\n                    <div>Node 5</div>\n                    <a href=\"#\">siemur/test-space</a>\n                  </DataListCell>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </React.Fragment>\n    );\n\n    return (\n      <DashboardWrapper>\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Main title</Text>\n            <Text component=\"p\">\n              Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n              of it’s relative line height of 1.5.\n            </Text>\n          </TextContent>\n        </PageSection>\n        <Divider component=\"div\" />\n        <PageSection>\n          <Card>\n            <Drawer isStatic isExpanded={isExpanded}>\n              <DrawerContent panelContent={panelContent}>\n                <DrawerContentBody>{drawerContent}</DrawerContentBody>\n              </DrawerContent>\n            </Drawer>\n          </Card>\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Primary-detail data list in card","lang":"js","isFullscreen":true}}>
      
    </Example>,
  'Primary-detail inline modifier': props => 
    <Example {...pageData} {...props} thumbnail={srcImportprimarydetailinlinemodifier} {...{"code":"import React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Toolbar,\n  ToolbarItem,\n  ToolbarContent,\n  ToolbarToggleGroup,\n  ToolbarGroup,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerPanelContent,\n  Flex,\n  FlexItem,\n  InputGroup,\n  PageSection,\n  PageSectionVariants,\n  Progress,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextInput,\n  Title\n} from '@patternfly/react-core';\nimport DashboardWrapper from './examples/DashboardWrapper';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\n\nclass PrimaryDetailInlineModifier extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDrawerExpanded: false,\n      drawerPanelBodyContent: '',\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0,\n      inputValue: '',\n      statusIsExpanded: false,\n      statusSelected: null,\n      riskIsExpanded: false,\n      riskSelected: null,\n      selectedDataListItemId: ''\n    };\n\n    this.statusOptions = [\n      { value: 'Status', disabled: false, isPlaceholder: true },\n      { value: 'New', disabled: false },\n      { value: 'Pending', disabled: false },\n      { value: 'Running', disabled: false },\n      { value: 'Cancelled', disabled: false }\n    ];\n\n    this.riskOptions = [\n      { value: 'Risk', disabled: false, isPlaceholder: true },\n      { value: 'Low', disabled: false },\n      { value: 'Medium', disabled: false },\n      { value: 'High', disabled: false }\n    ];\n\n    this.onInputChange = newValue => {\n      this.setState({ inputValue: newValue });\n    };\n\n    this.onStatusToggle = isExpanded => {\n      this.setState({\n        statusIsExpanded: isExpanded\n      });\n    };\n\n    this.onStatusSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearStatusSelection();\n      this.setState({\n        statusSelected: selection,\n        statusIsExpanded: false\n      });\n    };\n\n    this.clearStatusSelection = () => {\n      this.setState({\n        statusSelected: null,\n        statusIsExpanded: false\n      });\n    };\n\n    this.onRiskToggle = isExpanded => {\n      this.setState({\n        riskIsExpanded: isExpanded\n      });\n    };\n\n    this.onRiskSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearRiskSelection();\n      this.setState({\n        riskSelected: selection,\n        riskIsExpanded: false\n      });\n    };\n\n    this.clearRiskSelection = () => {\n      this.setState({\n        riskSelected: null,\n        riskIsExpanded: false\n      });\n    };\n\n    this.onSelectDataListItem = id => {\n      this.setState({\n        selectedDataListItemId: id,\n        isDrawerExpanded: true,\n        drawerPanelBodyContent: id.charAt(id.length - 1)\n      });\n    };\n\n    this.onCloseDrawerClick = () => {\n      this.setState({\n        isDrawerExpanded: false,\n        selectedDataListItemId: ''\n      });\n    };\n  }\n\n  render() {\n    const {\n      isDrawerExpanded,\n      drawerPanelBodyContent,\n      isDropdownOpen,\n      isKebabDropdownOpen,\n      activeItem,\n      inputValue,\n      statusIsExpanded,\n      statusSelected,\n      riskIsExpanded,\n      riskSelected,\n      selectedDataListItemId\n    } = this.state;\n\n    const toggleGroupItems = (\n      <React.Fragment>\n        <ToolbarItem>\n          <InputGroup>\n            <TextInput\n              name=\"inline-modifier-input\"\n              id=\"inline-modifier-input\"\n              type=\"search\"\n              aria-label=\"search input example\"\n              onChange={this.onInputChange}\n              value={inputValue}\n            />\n            <Button variant={ButtonVariant.control} aria-label=\"search button for search input\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarGroup variant=\"filter-group\">\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              onToggle={this.onStatusToggle}\n              onSelect={this.onStatusSelect}\n              selections={statusSelected}\n              isExpanded={statusIsExpanded}\n            >\n              {this.statusOptions.map((option, index) => (\n                <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n              ))}\n            </Select>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              onToggle={this.onRiskToggle}\n              onSelect={this.onRiskSelect}\n              selections={riskSelected}\n              isExpanded={riskIsExpanded}\n            >\n              {this.riskOptions.map((option, index) => (\n                <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n              ))}\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </React.Fragment>\n    );\n\n    const ToolbarItems = (\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n    );\n\n    const panelContent = (\n      <DrawerPanelContent>\n        <DrawerHead>\n          <Title headingLevel=\"h2\" size=\"xl\">\n            node-{drawerPanelBodyContent}\n          </Title>\n          <DrawerActions>\n            <DrawerCloseButton onClick={this.onCloseDrawerClick} />\n          </DrawerActions>\n        </DrawerHead>\n        <DrawerPanelBody>\n          <Flex spaceItems={{ default: 'spaceItemsLg' }} direction={{ default: 'column' }}>\n            <FlexItem>\n              <p>\n                The content of the drawer really is up to you. It could have form fields, definition lists, text lists,\n                labels, charts, progress bars, etc. Spacing recommendation is 24px margins. You can put tabs in here,\n                and can also make the drawer scrollable.\n              </p>\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 10} title=\"Title\" />\n            </FlexItem>\n            <FlexItem>\n              <Progress value={drawerPanelBodyContent * 5} title=\"Title\" />\n            </FlexItem>\n          </Flex>\n        </DrawerPanelBody>\n      </DrawerPanelContent>\n    );\n    const drawerContent = (\n      <React.Fragment>\n        <Toolbar id=\"inline-modifier-data-toolbar\" usePageInsets>\n          <ToolbarContent>{ToolbarItems}</ToolbarContent>\n        </Toolbar>\n        <DataList\n          aria-label=\"data list\"\n          selectedDataListItemId={selectedDataListItemId}\n          onSelectDataListItem={this.onSelectDataListItem}\n        >\n          <DataListItem id=\"inline-modifier-item1\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly</p>\n                        <small>\n                          Working repo for PatternFly 4 <a>https://pf4.patternfly.org/</a>\n                        </small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"inline-modifier-item2\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly-elements</p>\n                        <small>PatternFly elements</small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <CheckCircleIcon /> 7\n                        </FlexItem>\n                        <FlexItem>\n                          <ExclamationTriangleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <TimesCircleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"inline-modifier-item3\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly</p>\n                        <small>\n                          Working repo for PatternFly 4 <a>https://pf4.patternfly.org/</a>\n                        </small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          <DataListItem id=\"inline-modifier-item4\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell key=\"primary content\">\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <p>patternfly-elements</p>\n                        <small>PatternFly elements</small>\n                      </FlexItem>\n                      <Flex>\n                        <FlexItem>\n                          <CodeBranchIcon /> 10\n                        </FlexItem>\n                        <FlexItem>\n                          <CodeIcon /> 4\n                        </FlexItem>\n                        <FlexItem>\n                          <CubeIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <CheckCircleIcon /> 7\n                        </FlexItem>\n                        <FlexItem>\n                          <ExclamationTriangleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>\n                          <TimesCircleIcon /> 5\n                        </FlexItem>\n                        <FlexItem>Updated 2 days ago</FlexItem>\n                      </Flex>\n                    </Flex>\n                  </DataListCell>,\n                  <DataListAction alignRight>\n                    <Stack>\n                      <StackItem>\n                        <Button variant={ButtonVariant.secondary}>Secondary</Button>\n                      </StackItem>\n                      <StackItem>\n                        <Button variant={ButtonVariant.link}>Link Button</Button>\n                      </StackItem>\n                    </Stack>\n                  </DataListAction>\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </React.Fragment>\n    );\n\n    return (\n      <DashboardWrapper>\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Main title</Text>\n            <Text component=\"p\">\n              Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n              of it’s relative line height of 1.5.\n            </Text>\n          </TextContent>\n        </PageSection>\n        <Divider component=\"div\" />\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <Drawer isExpanded={isDrawerExpanded} isInline>\n            <DrawerContent panelContent={panelContent}>\n              <DrawerContentBody>{drawerContent}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        </PageSection>\n      </DashboardWrapper>\n    );\n  }\n}","title":"Primary-detail inline modifier","lang":"js","isFullscreen":true}}>
      
    </Example>
};

const Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"id":"demos","size":"h2","className":"ws-title ws-h2"}}>
      {`Demos`}
    </AutoLinkHeader>
    {React.createElement(pageData.examples["Primary-detail full page"])}
    {React.createElement(pageData.examples["Primary-detail content padding"])}
    {React.createElement(pageData.examples["Primary-detail card view"])}
    {React.createElement(pageData.examples["Primary-detail simple list in card"])}
    {React.createElement(pageData.examples["Primary-detail data list in card"])}
    {React.createElement(pageData.examples["Primary-detail inline modifier"])}
  </React.Fragment>
);
Component.displayName = 'DemosPrimaryDetailReactDemosDocs';
Component.pageData = pageData;

export default Component;
