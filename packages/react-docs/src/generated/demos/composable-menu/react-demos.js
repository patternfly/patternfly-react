import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import { Link } from '@reach/router';
import CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';
import EllipsisVIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-v-icon';
import TableIcon from '@patternfly/react-icons/dist/esm/icons/table-icon';
import StorageDomainIcon from '@patternfly/react-icons/dist/esm/icons/storage-domain-icon';
import CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';
import LayerGroupIcon from '@patternfly/react-icons/dist/esm/icons/layer-group-icon';
import CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';
import BarsIcon from '@patternfly/react-icons/dist/esm/icons/bars-icon';
import ClipboardIcon from '@patternfly/react-icons/dist/esm/icons/clipboard-icon';
import BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';
import ThIcon from '@patternfly/react-icons/dist/esm/icons/th-icon';
import pfIcon from '../../../../../react-core/src/demos/ComposableMenu/./examples/pf-logo-small.svg';
import SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';
import CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';
import avatarImg from '../../../../../react-core/src/demos/ComposableMenu/./examples/avatarImg.svg';
const pageData = {
  "id": "Composable menu",
  "section": "demos",
  "source": "react-demos",
  "slug": "/demos/composable-menu/react-demos",
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/demos/ComposableMenu/ComposableMenu.md",
  "examples": [
    "Composable simple dropdown",
    "Composable actions menu",
    "Composable simple select",
    "Composable simple checkbox select",
    "Composable drilldown menu",
    "Composable tree view menu",
    "Composable flyout",
    "Composable application launcher",
    "Composable context selector",
    "Composable options menu variants",
    "Composable dropdown variants",
    "Composable date select"
  ]
};
pageData.liveContext = {
  Link,
  CogIcon,
  EllipsisVIcon,
  TableIcon,
  StorageDomainIcon,
  CodeBranchIcon,
  LayerGroupIcon,
  CubeIcon,
  BarsIcon,
  ClipboardIcon,
  BellIcon,
  ThIcon,
  pfIcon,
  SearchIcon,
  CaretDownIcon,
  avatarImg
};
pageData.examples = {
  'Composable simple dropdown': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { MenuToggle, Menu, MenuContent, MenuList, MenuItem, Popper } from '@patternfly/react-core';\n\nexport const ComposableSimpleDropdown: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const menuRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (!isOpen) {\n      return;\n    }\n    if (menuRef.current.contains(event.target as Node) || toggleRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const toggle = (\n    <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n      {isOpen ? 'Expanded' : 'Collapsed'}\n    </MenuToggle>\n  );\n  const menu = (\n    // eslint-disable-next-line no-console\n    <Menu ref={menuRef} onSelect={(_ev, itemId) => console.log('selected', itemId)}>\n      <MenuContent>\n        <MenuList>\n          <MenuItem itemId={0}>Action</MenuItem>\n          <MenuItem itemId={1} to=\"#default-link2\" onClick={ev => ev.preventDefault()}>\n            Link\n          </MenuItem>\n          <MenuItem isDisabled>Disabled Action</MenuItem>\n          <MenuItem isDisabled to=\"#default-link4\">\n            Disabled Link\n          </MenuItem>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n  return (\n    <div ref={containerRef}>\n      <Popper trigger={toggle} popper={menu} appendTo={containerRef.current} isVisible={isOpen} />\n    </div>\n  );\n};\n","title":"Composable simple dropdown","lang":"ts"}}>
      
    </Example>,
  'Composable actions menu': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { MenuToggle, Menu, MenuList, MenuItem, MenuGroup, MenuItemAction, Popper } from '@patternfly/react-core';\nimport BarsIcon from '@patternfly/react-icons/dist/esm/icons/bars-icon';\nimport ClipboardIcon from '@patternfly/react-icons/dist/esm/icons/clipboard-icon';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\n\nexport const ComposableActionsMenu: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [selectedItems, setSelectedItems] = React.useState<number[]>([]);\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const menuRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (isOpen && menuRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onSelect = (ev: React.MouseEvent<Element, MouseEvent>, itemId: number) => {\n    if (selectedItems.includes(itemId)) {\n      setSelectedItems(selectedItems.filter(id => id !== itemId));\n    } else {\n      setSelectedItems([...selectedItems, itemId]);\n    }\n  };\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const toggle = (\n    <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n      {isOpen ? 'Expanded' : 'Collapsed'}\n    </MenuToggle>\n  );\n  const menu = (\n    <Menu\n      ref={menuRef}\n      // eslint-disable-next-line no-console\n      onActionClick={(event, itemId, actionId) => console.log(`clicked on ${itemId} - ${actionId}`)}\n      onSelect={onSelect}\n      style={\n        {\n          '--pf-c-menu--Width': '300px'\n        } as React.CSSProperties\n      }\n    >\n      <MenuGroup label=\"Actions\">\n        <MenuList>\n          <MenuItem\n            isSelected={selectedItems.includes(0)}\n            actions={\n              <MenuItemAction\n                icon={<CodeBranchIcon aria-hidden />}\n                actionId=\"code\"\n                // eslint-disable-next-line no-console\n                onClick={() => console.log('clicked on code icon')}\n                aria-label=\"Code\"\n              />\n            }\n            description=\"This is a description\"\n            itemId={0}\n          >\n            Item 1\n          </MenuItem>\n          <MenuItem\n            isDisabled\n            isSelected={selectedItems.includes(1)}\n            actions={<MenuItemAction icon={<BellIcon aria-hidden />} actionId=\"alert\" aria-label=\"Alert\" />}\n            description=\"This is a description\"\n            itemId={1}\n          >\n            Item 2\n          </MenuItem>\n          <MenuItem\n            isSelected={selectedItems.includes(2)}\n            actions={<MenuItemAction icon={<ClipboardIcon aria-hidden />} actionId=\"copy\" aria-label=\"Copy\" />}\n            itemId={2}\n          >\n            Item 3\n          </MenuItem>\n          <MenuItem\n            isSelected={selectedItems.includes(3)}\n            actions={<MenuItemAction icon={<BarsIcon aria-hidden />} actionId=\"expand\" aria-label=\"Expand\" />}\n            description=\"This is a description\"\n            itemId={3}\n          >\n            Item 4\n          </MenuItem>\n        </MenuList>\n      </MenuGroup>\n    </Menu>\n  );\n\n  return (\n    <div ref={containerRef}>\n      <Popper\n        trigger={toggle}\n        popper={menu}\n        isVisible={isOpen}\n        appendTo={containerRef.current}\n        popperMatchesTriggerWidth={false}\n      />\n    </div>\n  );\n};\n","title":"Composable actions menu","lang":"ts"}}>
      
    </Example>,
  'Composable simple select': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { MenuToggle, Menu, MenuContent, MenuList, MenuItem, Popper } from '@patternfly/react-core';\nimport TableIcon from '@patternfly/react-icons/dist/esm/icons/table-icon';\n\nexport const ComposableSimpleSelect: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [selected, setSelected] = React.useState<string>('Select a value');\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const menuRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (isOpen && menuRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const toggle = (\n    <MenuToggle\n      ref={toggleRef}\n      onClick={onToggleClick}\n      isExpanded={isOpen}\n      style={\n        {\n          width: '200px'\n        } as React.CSSProperties\n      }\n    >\n      {selected}\n    </MenuToggle>\n  );\n  const menu = (\n    <Menu ref={menuRef} id=\"select-menu\" onSelect={(_ev, itemId) => setSelected(itemId.toString())} selected={selected}>\n      <MenuContent>\n        <MenuList>\n          <MenuItem itemId=\"Option 1\">Option 1</MenuItem>\n          <MenuItem itemId=\"Option 2\">Option 2</MenuItem>\n          <MenuItem itemId=\"Option 3\" icon={<TableIcon aria-hidden />}>\n            Option 3\n          </MenuItem>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n  return (\n    <div ref={containerRef}>\n      <Popper trigger={toggle} popper={menu} appendTo={containerRef.current} isVisible={isOpen} />\n    </div>\n  );\n};\n","title":"Composable simple select","lang":"ts"}}>
      
    </Example>,
  'Composable simple checkbox select': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { MenuToggle, Menu, MenuContent, MenuList, MenuItem, Popper, Badge } from '@patternfly/react-core';\n\nexport const ComposableSimpleCheckboxSelect: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [selectedItems, setSelectedItems] = React.useState<number[]>([]);\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const menuRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = React.useCallback(\n    event => {\n      if (menuRef.current) {\n        if (isOpen && menuRef.current.contains(event.target as Node)) {\n          if (event.key === 'Escape' || event.key === 'Tab') {\n            setIsOpen(!isOpen);\n            toggleRef.current.focus();\n          }\n        }\n      }\n    },\n    [isOpen]\n  );\n\n  const handleClickOutside = React.useCallback(\n    event => {\n      if (isOpen && !menuRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    },\n    [isOpen]\n  );\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside, handleMenuKeys]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (ev: React.MouseEvent<Element, MouseEvent>, itemId: number | string) => {\n    const item = itemId as number;\n    if (selectedItems.includes(item)) {\n      setSelectedItems(selectedItems.filter(id => id !== item));\n    } else {\n      setSelectedItems([...selectedItems, item]);\n    }\n  };\n\n  const toggle = (\n    <MenuToggle\n      ref={toggleRef}\n      {...(selectedItems.length > 0 && { badge: <Badge isRead>{selectedItems.length}</Badge> })}\n      onClick={onToggleClick}\n      isExpanded={isOpen}\n      style={\n        {\n          width: '220px'\n        } as React.CSSProperties\n      }\n    >\n      Filter by status\n    </MenuToggle>\n  );\n  const menu = (\n    <Menu ref={menuRef} id=\"select-menu\" onSelect={onSelect} selected={selectedItems}>\n      <MenuContent>\n        <MenuList>\n          <MenuItem hasCheck itemId={0} isSelected={selectedItems.includes(0)}>\n            Debug\n          </MenuItem>\n          <MenuItem hasCheck itemId={1} isSelected={selectedItems.includes(1)}>\n            Info\n          </MenuItem>\n          <MenuItem hasCheck itemId={2} isSelected={selectedItems.includes(2)}>\n            Warn\n          </MenuItem>\n          <MenuItem hasCheck isDisabled itemId={4} isSelected={selectedItems.includes(4)}>\n            Error\n          </MenuItem>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n  return <Popper trigger={toggle} popper={menu} isVisible={isOpen} />;\n};\n","title":"Composable simple checkbox select","lang":"ts","isBeta":true}}>
      
    </Example>,
  'Composable drilldown menu': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  MenuToggle,\n  Menu,\n  MenuContent,\n  MenuList,\n  MenuItem,\n  DrilldownMenu,\n  Divider,\n  Popper\n} from '@patternfly/react-core';\nimport StorageDomainIcon from '@patternfly/react-icons/dist/esm/icons/storage-domain-icon';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport LayerGroupIcon from '@patternfly/react-icons/dist/esm/icons/layer-group-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\n\ninterface MenuHeightsType {\n  [id: string]: number;\n}\n\nexport const ComposableDrilldownMenu: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [activeMenu, setActiveMenu] = React.useState<string>('rootMenu');\n  const [menuDrilledIn, setMenuDrilledIn] = React.useState<string[]>([]);\n  const [drilldownPath, setDrilldownPath] = React.useState<string[]>([]);\n  const [menuHeights, setMenuHeights] = React.useState<MenuHeightsType>({});\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const menuRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (isOpen && menuRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n    setMenuDrilledIn([]);\n    setDrilldownPath([]);\n    setActiveMenu('rootMenu');\n  };\n\n  const drillIn = (fromMenuId: string, toMenuId: string, pathId: string) => {\n    setMenuDrilledIn([...menuDrilledIn, fromMenuId]);\n    setDrilldownPath([...drilldownPath, pathId]);\n    setActiveMenu(toMenuId);\n  };\n\n  const drillOut = (toMenuId: string) => {\n    setMenuDrilledIn(menuDrilledIn.slice(0, menuDrilledIn.length - 1));\n    setDrilldownPath(drilldownPath.slice(0, drilldownPath.length - 1));\n    setActiveMenu(toMenuId);\n  };\n\n  const setHeight = (menuId: string, height: number) => {\n    if (!menuHeights[menuId]) {\n      setMenuHeights({\n        ...menuHeights,\n        [menuId]: height\n      });\n    }\n  };\n\n  const toggle = (\n    <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n      {isOpen ? 'Expanded' : 'Collapsed'}\n    </MenuToggle>\n  );\n  const menu = (\n    <Menu\n      id=\"rootMenu\"\n      containsDrilldown\n      drilldownItemPath={drilldownPath}\n      drilledInMenus={menuDrilledIn}\n      activeMenu={activeMenu}\n      onDrillIn={drillIn}\n      onDrillOut={drillOut}\n      onGetMenuHeight={setHeight}\n      ref={menuRef}\n      style={\n        {\n          '--pf-c-menu--Width': '300px'\n        } as React.CSSProperties\n      }\n    >\n      <MenuContent menuHeight={`${menuHeights[activeMenu]}px`}>\n        <MenuList>\n          <MenuItem\n            itemId=\"group:start_rollout\"\n            direction=\"down\"\n            drilldownMenu={\n              <DrilldownMenu id=\"drilldownMenuStart\">\n                <MenuItem itemId=\"group:start_rollout_breadcrumb\" direction=\"up\">\n                  Start rollout\n                </MenuItem>\n                <Divider component=\"li\" />\n                <MenuItem\n                  itemId=\"group:app_grouping\"\n                  description=\"Groups A-C\"\n                  direction=\"down\"\n                  drilldownMenu={\n                    <DrilldownMenu id=\"drilldownMenuStartGrouping\">\n                      <MenuItem itemId=\"group:app_grouping_breadcrumb\" direction=\"up\">\n                        Application Grouping\n                      </MenuItem>\n                      <Divider component=\"li\" />\n                      <MenuItem itemId=\"group_a\">Group A</MenuItem>\n                      <MenuItem itemId=\"group_b\">Group B</MenuItem>\n                      <MenuItem itemId=\"group_c\">Group C</MenuItem>\n                    </DrilldownMenu>\n                  }\n                >\n                  Application Grouping\n                </MenuItem>\n                <MenuItem itemId=\"count\">Count</MenuItem>\n                <MenuItem\n                  itemId=\"group:labels\"\n                  direction=\"down\"\n                  drilldownMenu={\n                    <DrilldownMenu id=\"drilldownMenuStartLabels\">\n                      <MenuItem itemId=\"group:labels_breadcrumb\" direction=\"up\">\n                        Labels\n                      </MenuItem>\n                      <Divider component=\"li\" />\n                      <MenuItem itemId=\"label_1\">Label 1</MenuItem>\n                      <MenuItem itemId=\"label_2\">Label 2</MenuItem>\n                      <MenuItem itemId=\"label_3\">Label 3</MenuItem>\n                    </DrilldownMenu>\n                  }\n                >\n                  Labels\n                </MenuItem>\n                <MenuItem itemId=\"annotations\">Annotations</MenuItem>\n              </DrilldownMenu>\n            }\n          >\n            Start rollout\n          </MenuItem>\n          <MenuItem\n            itemId=\"group:pause_rollout\"\n            direction=\"down\"\n            drilldownMenu={\n              <DrilldownMenu id=\"drilldownMenuPause\">\n                <MenuItem itemId=\"group:pause_rollout_breadcrumb\" direction=\"up\">\n                  Pause rollouts\n                </MenuItem>\n                <Divider component=\"li\" />\n                <MenuItem\n                  itemId=\"group:app_grouping\"\n                  description=\"Groups A-C\"\n                  direction=\"down\"\n                  drilldownMenu={\n                    <DrilldownMenu id=\"drilldownMenuGrouping\">\n                      <MenuItem itemId=\"group:app_grouping_breadcrumb\" direction=\"up\">\n                        Application Grouping\n                      </MenuItem>\n                      <Divider component=\"li\" />\n                      <MenuItem itemId=\"group_a\">Group A</MenuItem>\n                      <MenuItem itemId=\"group_b\">Group B</MenuItem>\n                      <MenuItem itemId=\"group_c\">Group C</MenuItem>\n                    </DrilldownMenu>\n                  }\n                >\n                  Application Grouping\n                </MenuItem>\n                <MenuItem itemId=\"count\">Count</MenuItem>\n                <MenuItem\n                  itemId=\"group:labels\"\n                  direction=\"down\"\n                  drilldownMenu={\n                    <DrilldownMenu id=\"drilldownMenuLabels\">\n                      <MenuItem itemId=\"group:labels_breadcrumb\" direction=\"up\">\n                        Labels\n                      </MenuItem>\n                      <Divider component=\"li\" />\n                      <MenuItem itemId=\"label_1\">Label 1</MenuItem>\n                      <MenuItem itemId=\"label_2\">Label 2</MenuItem>\n                      <MenuItem itemId=\"label_3\">Label 3</MenuItem>\n                    </DrilldownMenu>\n                  }\n                >\n                  Labels\n                </MenuItem>\n                <MenuItem itemId=\"annotations\">Annotations</MenuItem>\n              </DrilldownMenu>\n            }\n          >\n            Pause rollouts\n          </MenuItem>\n          <MenuItem\n            itemId=\"group:storage\"\n            icon={<StorageDomainIcon aria-hidden />}\n            direction=\"down\"\n            drilldownMenu={\n              <DrilldownMenu id=\"drilldownMenuStorage\">\n                <MenuItem itemId=\"group:storage_breadcrumb\" icon={<StorageDomainIcon aria-hidden />} direction=\"up\">\n                  Add storage\n                </MenuItem>\n                <Divider component=\"li\" />\n                <MenuItem icon={<CodeBranchIcon aria-hidden />} itemId=\"git\">\n                  From Git\n                </MenuItem>\n                <MenuItem icon={<LayerGroupIcon aria-hidden />} itemId=\"container\">\n                  Container Image\n                </MenuItem>\n                <MenuItem icon={<CubeIcon aria-hidden />} itemId=\"docker\">\n                  Docker File\n                </MenuItem>\n              </DrilldownMenu>\n            }\n          >\n            Add storage\n          </MenuItem>\n          <MenuItem itemId=\"edit\">Edit</MenuItem>\n          <MenuItem itemId=\"delete_deployment\">Delete deployment config</MenuItem>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n  return (\n    <div ref={containerRef}>\n      <Popper\n        trigger={toggle}\n        popper={menu}\n        appendTo={containerRef.current}\n        isVisible={isOpen}\n        popperMatchesTriggerWidth={false}\n      />\n    </div>\n  );\n};\n","title":"Composable drilldown menu","lang":"ts","isBeta":true}}>
      
    </Example>,
  'Composable tree view menu': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  MenuToggle,\n  Panel,\n  PanelMain,\n  PanelMainBody,\n  Title,\n  Popper,\n  TreeView,\n  TreeViewDataItem\n} from '@patternfly/react-core';\n\nexport const ComposableTreeViewMenu: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [checkedItems, setCheckedItems] = React.useState<TreeViewDataItem[]>([]);\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n  const menuRef = React.useRef<HTMLDivElement>();\n\n  const statusOptions: TreeViewDataItem[] = [\n    {\n      name: 'Ready',\n      id: 'ready',\n      checkProps: { checked: false },\n      customBadgeContent: 1,\n      children: [\n        {\n          name: 'Updated',\n          id: 'updated',\n          checkProps: { checked: false },\n          customBadgeContent: 0\n        },\n        {\n          name: 'Waiting to update',\n          id: 'waiting',\n          checkProps: { checked: false },\n          customBadgeContent: 0\n        },\n        {\n          name: 'Conditions degraded',\n          id: 'degraded',\n          checkProps: { checked: false },\n          customBadgeContent: 1\n        },\n        {\n          name: 'Approval required',\n          id: 'approval',\n          checkProps: { checked: false },\n          customBadgeContent: 0\n        }\n      ]\n    },\n    {\n      name: 'Not ready',\n      id: 'nr',\n      checkProps: { checked: false },\n      customBadgeContent: 1,\n      children: [\n        {\n          name: 'Conditions degraded',\n          id: 'nr-degraded',\n          checkProps: { checked: false },\n          customBadgeContent: 1\n        }\n      ]\n    },\n    {\n      name: 'Updating',\n      id: 'updating',\n      checkProps: { checked: false },\n      customBadgeContent: 0\n    }\n  ];\n\n  const roleOptions = [\n    {\n      name: 'Server',\n      id: 'server',\n      checkProps: { checked: false },\n      customBadgeContent: 2\n    },\n    {\n      name: 'Worker',\n      id: 'worker',\n      checkProps: { checked: false },\n      customBadgeContent: 0\n    }\n  ];\n  // Helper functions for tree\n  const isChecked = (dataItem: TreeViewDataItem) => checkedItems.some(item => item.id === dataItem.id);\n  const areAllDescendantsChecked = (dataItem: TreeViewDataItem) =>\n    dataItem.children ? dataItem.children.every(child => areAllDescendantsChecked(child)) : isChecked(dataItem);\n  const areSomeDescendantsChecked = (dataItem: TreeViewDataItem) =>\n    dataItem.children ? dataItem.children.some(child => areSomeDescendantsChecked(child)) : isChecked(dataItem);\n  const flattenTree = (tree: TreeViewDataItem[]) => {\n    let result = [];\n    tree.forEach(item => {\n      result.push(item);\n      if (item.children) {\n        result = result.concat(flattenTree(item.children));\n      }\n    });\n    return result;\n  };\n\n  const mapTree = (item: TreeViewDataItem) => {\n    const hasCheck = areAllDescendantsChecked(item);\n    // Reset checked properties to be updated\n    item.checkProps.checked = false;\n\n    if (hasCheck) {\n      item.checkProps.checked = true;\n    } else {\n      const hasPartialCheck = areSomeDescendantsChecked(item);\n      if (hasPartialCheck) {\n        item.checkProps.checked = null;\n      }\n    }\n\n    if (item.children) {\n      return {\n        ...item,\n        children: item.children.map(mapTree)\n      };\n    }\n    return item;\n  };\n\n  const filterItems = (item: TreeViewDataItem, checkedItem: TreeViewDataItem) => {\n    if (item.id === checkedItem.id) {\n      return true;\n    }\n\n    if (item.children) {\n      return (\n        (item.children = item.children\n          .map(opt => Object.assign({}, opt))\n          .filter(child => filterItems(child, checkedItem))).length > 0\n      );\n    }\n  };\n\n  const onCheck = (evt: React.ChangeEvent, treeViewItem: TreeViewDataItem, treeType: string) => {\n    const checked = (evt.target as HTMLInputElement).checked;\n\n    let options = [];\n    switch (treeType) {\n      case 'status':\n        options = statusOptions;\n        break;\n      case 'role':\n        options = roleOptions;\n        break;\n      default:\n        break;\n    }\n\n    const checkedItemTree = options.map(opt => Object.assign({}, opt)).filter(item => filterItems(item, treeViewItem));\n    const flatCheckedItems = flattenTree(checkedItemTree);\n    setCheckedItems(prevCheckedItems =>\n      checked\n        ? prevCheckedItems.concat(flatCheckedItems.filter(item => !prevCheckedItems.some(i => i.id === item.id)))\n        : prevCheckedItems.filter(item => !flatCheckedItems.some(i => i.id === item.id))\n    );\n  };\n\n  // Controls keys that should open/close the menu\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (!isOpen) {\n      return;\n    }\n    if (menuRef.current.contains(event.target as Node) || toggleRef.current.contains(event.target as Node)) {\n      // The escape key when pressed while inside the menu should close the menu and refocus the toggle\n      if (event.key === 'Escape') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n\n      // The tab key when pressed while inside the menu and on the contained last tree view should close the menu and refocus the toggle\n      // Shift tab should keep the default behavior to return to a previous tree view\n      if (event.key === 'Tab' && !event.shiftKey) {\n        const treeList = menuRef.current.querySelectorAll('.pf-c-tree-view');\n        if (treeList[treeList.length - 1].contains(event.target as Node)) {\n          event.preventDefault();\n          setIsOpen(!isOpen);\n          toggleRef.current.focus();\n        }\n      }\n    }\n  };\n\n  // Controls that a click outside the menu while the menu is open should close the menu\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li button:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const toggle = (\n    <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n      {isOpen ? 'Expanded' : 'Collapsed'}\n    </MenuToggle>\n  );\n  const statusMapped = statusOptions.map(mapTree);\n  const roleMapped = roleOptions.map(mapTree);\n  const menu = (\n    <Panel\n      ref={menuRef}\n      variant=\"raised\"\n      style={{\n        width: '300px'\n      }}\n    >\n      <PanelMain>\n        <section>\n          <PanelMainBody style={{ paddingBottom: 0 }}>\n            <Title headingLevel=\"h1\" size={'md'}>\n              Status\n            </Title>\n          </PanelMainBody>\n          <PanelMainBody style={{ padding: 0 }}>\n            <TreeView\n              data={statusMapped}\n              hasBadges\n              hasChecks\n              onCheck={(event, item) => onCheck(event, item, 'status')}\n            />\n          </PanelMainBody>\n        </section>\n        <section>\n          <PanelMainBody style={{ paddingBottom: 0, paddingTop: 0 }}>\n            <Title headingLevel=\"h1\" size={'md'}>\n              Roles\n            </Title>\n          </PanelMainBody>\n          <PanelMainBody style={{ padding: 0 }}>\n            <TreeView data={roleMapped} hasBadges hasChecks onCheck={(event, item) => onCheck(event, item, 'role')} />\n          </PanelMainBody>\n        </section>\n      </PanelMain>\n    </Panel>\n  );\n  return (\n    <div ref={containerRef}>\n      <Popper\n        trigger={toggle}\n        popper={menu}\n        isVisible={isOpen}\n        appendTo={containerRef.current}\n        popperMatchesTriggerWidth={false}\n      />\n    </div>\n  );\n};\n","title":"Composable tree view menu","lang":"ts"}}>
      
      <p {...{"className":"ws-p"}}>
        {`When rendering a menu-like element that does not contain MenuItem components, `}
        
        <PatternflyThemeLink {...{"to":"/components/panel"}}>
          {`Panel`}
        </PatternflyThemeLink>
        {` allows more flexible control and customization.`}
      </p>
    </Example>,
  'Composable flyout': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { MenuToggle, Menu, MenuContent, MenuList, MenuItem, Popper } from '@patternfly/react-core';\n\n// eslint-disable-next-line no-console\nconst onSelect = (ev: React.MouseEvent<Element, MouseEvent>, itemId: string) => console.log('selected', itemId);\n\ninterface FlyoutMenuProps {\n  children?: React.ReactElement;\n  depth: number;\n}\n\nconst FlyoutMenu: React.FunctionComponent<FlyoutMenuProps> = ({ depth, children }: FlyoutMenuProps) => (\n  <Menu key={depth} containsFlyout id={`menu-${depth}`} onSelect={onSelect}>\n    <MenuContent>\n      <MenuList>\n        <MenuItem flyoutMenu={children} itemId={`next-menu-${depth}`}>\n          Next menu\n        </MenuItem>\n        {Array.from(new Array(15 - depth), (x, i) => i + 1).map(j => (\n          <MenuItem key={`${depth}-${j}`} itemId={`${depth}-${j}`}>\n            Menu {depth} item {j}\n          </MenuItem>\n        ))}\n        <MenuItem flyoutMenu={children} itemId={`next-menu-2-${depth}`}>\n          Next menu\n        </MenuItem>\n      </MenuList>\n    </MenuContent>\n  </Menu>\n);\n\nexport const ComposableFlyout: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const menuRef = React.useRef<HTMLDivElement>();\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (!isOpen) {\n      return;\n    }\n    if (menuRef.current.contains(event.target as Node) || toggleRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  let curFlyout = <FlyoutMenu depth={1} />;\n  for (let i = 2; i < 14; i++) {\n    curFlyout = <FlyoutMenu depth={i}>{curFlyout}</FlyoutMenu>;\n  }\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const toggle = (\n    <MenuToggle onClick={onToggleClick} isExpanded={isOpen}>\n      {isOpen ? 'Expanded' : 'Collapsed'}\n    </MenuToggle>\n  );\n\n  const menu = (\n    <Menu ref={menuRef} containsFlyout onSelect={onSelect}>\n      <MenuContent>\n        <MenuList>\n          <MenuItem itemId=\"start\">Start rollout</MenuItem>\n          <MenuItem itemId=\"pause\">Pause rollouts</MenuItem>\n          <MenuItem itemId=\"storage\">Add storage</MenuItem>\n          <MenuItem description=\"Description\" flyoutMenu={curFlyout} itemId=\"next-menu-root\">\n            Edit\n          </MenuItem>\n          <MenuItem itemId=\"delete\">Delete deployment config</MenuItem>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n\n  return (\n    <div ref={containerRef}>\n      <Popper\n        trigger={toggle}\n        popper={menu}\n        appendTo={containerRef.current}\n        isVisible={isOpen}\n        popperMatchesTriggerWidth={false}\n      />\n    </div>\n  );\n};\n","title":"Composable flyout","lang":"ts","isBeta":true}}>
      
      <p {...{"className":"ws-p"}}>
        {`The flyout will automatically position to the left or top if it would otherwise go outside the window. The menu must be placed in a container outside the main content like Popper, `}
        
        <PatternflyThemeLink {...{"to":"/components/popover"}}>
          {`Popover`}
        </PatternflyThemeLink>
        {` or `}
        
        <PatternflyThemeLink {...{"to":"/components/tooltip"}}>
          {`Tooltip`}
        </PatternflyThemeLink>
        {` since it may go over the side nav.`}
      </p>
    </Example>,
  'Composable application launcher': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  MenuToggle,\n  Menu,\n  MenuContent,\n  MenuList,\n  MenuItem,\n  MenuGroup,\n  MenuInput,\n  Popper,\n  Tooltip,\n  Divider,\n  TextInput\n} from '@patternfly/react-core';\nimport { Link } from '@reach/router';\nimport ThIcon from '@patternfly/react-icons/dist/js/icons/th-icon';\nimport pfIcon from 'pf-logo-small.svg';\n\nexport const ComposableApplicationLauncher: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [refFullOptions, setRefFullOptions] = React.useState<Element[]>();\n  const [favorites, setFavorites] = React.useState<string[]>([]);\n  const [filteredIds, setFilteredIds] = React.useState<string[]>(['*']);\n  const menuRef = React.useRef<HTMLDivElement>();\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (!isOpen) {\n      return;\n    }\n    if (menuRef.current.contains(event.target as Node) || toggleRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button,input:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n        setRefFullOptions(Array.from(menuRef.current.querySelectorAll('li:not(li[role=separator])')));\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const toggle = (\n    <MenuToggle\n      aria-label=\"Toggle\"\n      ref={toggleRef}\n      variant=\"plain\"\n      onClick={onToggleClick}\n      isExpanded={isOpen}\n      style={{ width: 'auto' }}\n    >\n      <ThIcon />\n    </MenuToggle>\n  );\n\n  const menuItems = [\n    <MenuGroup key=\"group1\" label=\"Group 1\">\n      <MenuList>\n        <MenuItem itemId=\"0\" id=\"0\" isFavorited={favorites.includes('0')}>\n          Application 1\n        </MenuItem>\n        <MenuItem\n          itemId=\"1\"\n          id=\"1\"\n          isFavorited={favorites.includes('1')}\n          to=\"#default-link2\"\n          onClick={ev => ev.preventDefault()}\n        >\n          Application 2\n        </MenuItem>\n      </MenuList>\n    </MenuGroup>,\n    <Divider key=\"group1-divider\" />,\n    <MenuGroup key=\"group2\" label=\"Group 2\">\n      <MenuList>\n        <MenuItem\n          itemId=\"2\"\n          id=\"2\"\n          isFavorited={favorites.includes('2')}\n          component={props => <Link {...props} to=\"#router-link\" />}\n        >\n          @reach/router Link\n        </MenuItem>\n        <MenuItem\n          itemId=\"3\"\n          id=\"3\"\n          isFavorited={favorites.includes('3')}\n          isExternalLink\n          icon={<img src={pfIcon} />}\n          component={props => <Link {...props} to=\"#router-link2\" />}\n        >\n          @reach/router Link with icon\n        </MenuItem>\n      </MenuList>\n    </MenuGroup>,\n    <Divider key=\"group2-divider\" />,\n    <MenuList key=\"other-items\">\n      <MenuItem key=\"tooltip-app\" isFavorited={favorites.includes('4')} itemId=\"4\" id=\"4\">\n        <Tooltip content={<div>Launch Application 3</div>} position=\"right\">\n          <span>Application 3 with tooltip</span>\n        </Tooltip>\n      </MenuItem>\n      <MenuItem key=\"disabled-app\" itemId=\"5\" id=\"5\" isDisabled>\n        Unavailable Application\n      </MenuItem>\n    </MenuList>\n  ];\n\n  const createFavorites = (favIds: string[]) => {\n    const favorites = [];\n\n    menuItems.forEach(item => {\n      if (item.type === MenuList) {\n        item.props.children.filter(child => {\n          if (favIds.includes(child.props.itemId)) {\n            favorites.push(child);\n          }\n        });\n      } else if (item.type === MenuGroup) {\n        item.props.children.props.children.filter(child => {\n          if (favIds.includes(child.props.itemId)) {\n            favorites.push(child);\n          }\n        });\n      } else {\n        if (favIds.includes(item.props.itemId)) {\n          favorites.push(item);\n        }\n      }\n    });\n\n    return favorites;\n  };\n\n  const filterItems = (items: any[], filteredIds: string[]) => {\n    if (filteredIds.length === 1 && filteredIds[0] === '*') {\n      return items;\n    }\n    let keepDivider = false;\n    const filteredCopy = items\n      .map(group => {\n        if (group.type === MenuGroup) {\n          const filteredGroup = React.cloneElement(group, {\n            children: React.cloneElement(group.props.children, {\n              children: group.props.children.props.children.filter(child => {\n                if (filteredIds.includes(child.props.itemId)) {\n                  return child;\n                }\n              })\n            })\n          });\n          const filteredList = filteredGroup.props.children;\n          if (filteredList.props.children.length > 0) {\n            keepDivider = true;\n            return filteredGroup;\n          } else {\n            keepDivider = false;\n          }\n        } else if (group.type === MenuList) {\n          const filteredGroup = React.cloneElement(group, {\n            children: group.props.children.filter(child => {\n              if (filteredIds.includes(child.props.itemId)) {\n                return child;\n              }\n            })\n          });\n          if (filteredGroup.props.children.length > 0) {\n            keepDivider = true;\n            return filteredGroup;\n          } else {\n            keepDivider = false;\n          }\n        } else {\n          if ((keepDivider && group.type === Divider) || filteredIds.includes(group.props.itemId)) {\n            return group;\n          }\n        }\n      })\n      .filter(newGroup => newGroup);\n\n    if (filteredCopy.length > 0) {\n      const lastGroup = filteredCopy.pop();\n      if (lastGroup.type !== Divider) {\n        filteredCopy.push(lastGroup);\n      }\n    }\n\n    return filteredCopy;\n  };\n\n  const onTextChange = (textValue: string) => {\n    if (textValue === '') {\n      setFilteredIds(['*']);\n      return;\n    }\n\n    const filteredIds = refFullOptions\n      .filter(item => (item as HTMLElement).innerText.toLowerCase().includes(textValue.toString().toLowerCase()))\n      .map(item => item.id);\n    setFilteredIds(filteredIds);\n  };\n\n  const onFavorite = (event: any, itemId: string, actionId: string) => {\n    event.stopPropagation();\n    if (actionId === 'fav') {\n      const isFavorite = favorites.includes(itemId);\n      if (isFavorite) {\n        setFavorites(favorites.filter(fav => fav !== itemId));\n      } else {\n        setFavorites([...favorites, itemId]);\n      }\n    }\n  };\n\n  const filteredFavorites = filterItems(createFavorites(favorites), filteredIds);\n  const filteredItems = filterItems(menuItems, filteredIds);\n  if (filteredItems.length === 0) {\n    filteredItems.push(<MenuItem key=\"no-items\">No results found</MenuItem>);\n  }\n\n  const menu = (\n    // eslint-disable-next-line no-console\n    <Menu ref={menuRef} onActionClick={onFavorite} onSelect={(_ev, itemId) => console.log('selected', itemId)}>\n      <MenuInput>\n        <TextInput\n          aria-label=\"Filter menu items\"\n          iconVariant=\"search\"\n          type=\"search\"\n          onChange={value => onTextChange(value)}\n        />\n      </MenuInput>\n      <Divider />\n      <MenuContent>\n        {filteredFavorites.length > 0 && (\n          <React.Fragment>\n            <MenuGroup key=\"favorites-group\" label=\"Favorites\">\n              <MenuList>{filteredFavorites}</MenuList>\n            </MenuGroup>\n            <Divider key=\"favorites-divider\" />\n          </React.Fragment>\n        )}\n        {filteredItems}\n      </MenuContent>\n    </Menu>\n  );\n  return (\n    <div ref={containerRef}>\n      <Popper\n        trigger={toggle}\n        popper={menu}\n        isVisible={isOpen}\n        popperMatchesTriggerWidth={false}\n        appendTo={containerRef.current}\n      />\n    </div>\n  );\n};\n","title":"Composable application launcher","lang":"ts"}}>
      
    </Example>,
  'Composable context selector': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  MenuToggle,\n  Menu,\n  MenuContent,\n  MenuFooter,\n  MenuList,\n  MenuItem,\n  MenuInput,\n  Popper,\n  Divider,\n  TextInput,\n  InputGroup,\n  Button,\n  ButtonVariant\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\n\ninterface ItemData {\n  text: string;\n  href?: string;\n  isDisabled?: boolean;\n}\n\ntype ItemArrayType = (ItemData | string)[];\n\nexport const ComposableContextSelector: React.FunctionComponent = () => {\n  const items: ItemArrayType = [\n    {\n      text: 'Action'\n    },\n    {\n      text: 'Link',\n      href: '#'\n    },\n    {\n      text: 'Disabled action',\n      isDisabled: true\n    },\n    {\n      text: 'Disabled link',\n      href: '#',\n      isDisabled: true\n    },\n    'My project',\n    'OpenShift cluster',\n    'Production Ansible',\n    'AWS',\n    'Azure',\n    'My project 2',\n    'OpenShift cluster ',\n    'Production Ansible 2 ',\n    'AWS 2',\n    'Azure 2'\n  ];\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [selected, setSelected] = React.useState<ItemData | string>(\n    typeof items[0] === 'string' ? items[0] : items[0].text\n  );\n  const [filteredItems, setFilteredItems] = React.useState<ItemArrayType>(items);\n  const [searchInputValue, setSearchInputValue] = React.useState<string>('');\n  const menuRef = React.useRef<HTMLDivElement>();\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const menuFooterBtnRef = React.useRef<HTMLButtonElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (!isOpen) {\n      return;\n    }\n    if (menuFooterBtnRef.current.contains(event.target as Node)) {\n      if (event.key === 'Tab') {\n        if (event.shiftKey) {\n          return;\n        }\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n    if (menuRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button,input:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const toggle = (\n    <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n      {selected}\n    </MenuToggle>\n  );\n\n  const onSelect = (ev: React.MouseEvent<Element, MouseEvent>, itemId: string) => {\n    setSelected(itemId);\n    setIsOpen(!isOpen);\n  };\n\n  const onSearchInputChange = (value: string) => {\n    setSearchInputValue(value);\n  };\n\n  const onSearchButtonClick = () => {\n    const filtered =\n      searchInputValue === ''\n        ? items\n        : items.filter(item => {\n            const str = typeof item === 'string' ? item : item.text;\n            return str.toLowerCase().indexOf(searchInputValue.toLowerCase()) !== -1;\n          });\n\n    setFilteredItems(filtered || []);\n    setIsOpen(true); // Keep menu open after search executed\n  };\n\n  const onEnterPressed = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      onSearchButtonClick();\n    }\n  };\n\n  const menu = (\n    <Menu\n      ref={menuRef}\n      id=\"context-selector\"\n      onSelect={onSelect}\n      isScrollable\n      style={\n        {\n          '--pf-c-menu--Width': '300px'\n        } as React.CSSProperties\n      }\n    >\n      <MenuInput>\n        <InputGroup>\n          <TextInput\n            value={searchInputValue}\n            type=\"search\"\n            placeholder=\"Search\"\n            onChange={onSearchInputChange}\n            onKeyPress={onEnterPressed}\n            aria-labelledby=\"pf-context-selector-search-button-id-1\"\n          />\n          <Button\n            variant={ButtonVariant.control}\n            aria-label=\"Search menu items\"\n            id=\"pf-context-selector-search-button-id-1\"\n            onClick={onSearchButtonClick}\n          >\n            <SearchIcon aria-hidden=\"true\" />\n          </Button>\n        </InputGroup>\n      </MenuInput>\n      <Divider />\n      <MenuContent maxMenuHeight=\"200px\">\n        <MenuList>\n          {filteredItems.map((item, index) => {\n            const [itemText, isDisabled, href] =\n              typeof item === 'string' ? [item, null, null] : [item.text, item.isDisabled || null, item.href || null];\n            return (\n              <MenuItem itemId={itemText} key={index} isDisabled={isDisabled} to={href}>\n                {itemText}\n              </MenuItem>\n            );\n          })}\n        </MenuList>\n      </MenuContent>\n      <MenuFooter>\n        <Button ref={menuFooterBtnRef} variant=\"link\" isInline>\n          Action\n        </Button>\n      </MenuFooter>\n    </Menu>\n  );\n  return (\n    <div ref={containerRef}>\n      <Popper\n        trigger={toggle}\n        popper={menu}\n        appendTo={containerRef.current}\n        isVisible={isOpen}\n        popperMatchesTriggerWidth={false}\n      />\n    </div>\n  );\n};\n","title":"Composable context selector","lang":"ts"}}>
      
    </Example>,
  'Composable options menu variants': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { MenuToggle, Menu, MenuContent, MenuList, MenuItem, MenuGroup, Popper, Divider } from '@patternfly/react-core';\n\nexport const ComposableOptionsMenuVariants: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [selected, setSelected] = React.useState<string>('');\n  const menuRef = React.useRef<HTMLDivElement>();\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (isOpen && menuRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button,input:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const toggle = (\n    <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n      Options menu\n    </MenuToggle>\n  );\n\n  const menu = (\n    <Menu\n      ref={menuRef}\n      id=\"options-menu\"\n      selected={selected}\n      onSelect={(_ev, itemId) => setSelected(itemId.toString())}\n    >\n      <MenuContent>\n        <MenuList>\n          <MenuItem itemId=\"0\" isSelected={selected === '0'}>\n            Option 1\n          </MenuItem>\n          <MenuItem itemId=\"1\" isSelected={selected === '1'} isDisabled>\n            Disabled Option\n          </MenuItem>\n          <Divider key=\"group1-divider\" />\n          <MenuGroup label=\"Group 1\">\n            <MenuList>\n              <MenuItem itemId=\"2\" isSelected={selected === '2'}>\n                Option 1\n              </MenuItem>\n              <MenuItem itemId=\"3\" isSelected={selected === '3'}>\n                Option 2\n              </MenuItem>\n            </MenuList>\n          </MenuGroup>\n          <Divider key=\"group2-divider\" />\n          <MenuGroup label=\"Group 2\">\n            <MenuList>\n              <MenuItem itemId=\"4\" isSelected={selected === '4'}>\n                Option 1\n              </MenuItem>\n              <MenuItem itemId=\"5\" isSelected={selected === '5'}>\n                Option 2\n              </MenuItem>\n            </MenuList>\n          </MenuGroup>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n  return (\n    <div ref={containerRef}>\n      <Popper trigger={toggle} popper={menu} appendTo={containerRef.current} isVisible={isOpen} />\n    </div>\n  );\n};\n","title":"Composable options menu variants","lang":"ts"}}>
      
    </Example>,
  'Composable dropdown variants': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport {\n  Badge,\n  MenuToggle,\n  Menu,\n  MenuContent,\n  MenuList,\n  MenuItem,\n  MenuGroup,\n  Popper,\n  Divider,\n  ToggleGroup,\n  ToggleGroupItem,\n  Avatar,\n  MenuInput\n} from '@patternfly/react-core';\nimport EllipsisVIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-v-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport avatarImg from 'avatarImg.svg';\n\nexport const ComposableDropdwnVariants: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [toggleSelected, setToggleSelected] = React.useState<string>('basic');\n  const menuRef = React.useRef<HTMLDivElement>();\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleToggleSwitch = (selected: boolean, e: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => {\n    setToggleSelected(e.currentTarget.id);\n  };\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (isOpen && menuRef && menuRef.current && menuRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && menuRef && menuRef.current && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button,input:not(:disabled),a');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (ev: React.MouseEvent<Element, MouseEvent>, itemId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(`Menu item ${itemId} selected`);\n    setIsOpen(false);\n  };\n\n  const buildToggle = () => {\n    switch (toggleSelected) {\n      case 'basic':\n        return (\n          <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n            Dropdown\n          </MenuToggle>\n        );\n      case 'kebab':\n        return (\n          <MenuToggle\n            ref={toggleRef}\n            onClick={onToggleClick}\n            isExpanded={isOpen}\n            variant=\"plain\"\n            aria-label=\"plain kebab\"\n          >\n            <EllipsisVIcon />\n          </MenuToggle>\n        );\n      case 'badge':\n        return (\n          <MenuToggle\n            ref={toggleRef}\n            onClick={onToggleClick}\n            isExpanded={isOpen}\n            variant=\"plain\"\n            aria-label=\"plain badge\"\n          >\n            <Badge>\n              4\n              <span>\n                <CaretDownIcon />\n              </span>\n            </Badge>\n          </MenuToggle>\n        );\n      case 'image':\n        return (\n          <MenuToggle\n            ref={toggleRef}\n            icon={<Avatar src={avatarImg} alt=\"avatar\" />}\n            onClick={onToggleClick}\n            isExpanded={isOpen}\n          >\n            Ned Username\n          </MenuToggle>\n        );\n    }\n  };\n\n  const menu =\n    toggleSelected === 'image' ? (\n      <Menu ref={menuRef} id=\"dropdown-menu\" onSelect={onSelect}>\n        <MenuInput>Unselectable text displayed at the top of the menu</MenuInput>\n        <Divider />\n        <MenuContent>\n          <MenuItem\n            itemId={0}\n            to=\"#default-link0\"\n            // just for demo so that navigation is not triggered\n            onClick={event => event.preventDefault()}\n          >\n            My profile\n          </MenuItem>\n          <MenuItem\n            itemId={1}\n            to=\"#default-link1\"\n            // just for demo so that navigation is not triggered\n            onClick={event => event.preventDefault()}\n          >\n            User management\n          </MenuItem>\n          <MenuItem\n            itemId={2}\n            to=\"#default-link2\"\n            // just for demo so that navigation is not triggered\n            onClick={event => event.preventDefault()}\n          >\n            Logout\n          </MenuItem>\n        </MenuContent>\n      </Menu>\n    ) : (\n      <Menu ref={menuRef} id=\"dropdown-menu\" onSelect={onSelect}>\n        <MenuContent>\n          <MenuList>\n            <MenuItem\n              itemId={0}\n              to=\"#default-link0\"\n              // just for demo so that navigation is not triggered\n              onClick={event => event.preventDefault()}\n            >\n              Link\n            </MenuItem>\n            <MenuItem itemId={1}>Action</MenuItem>\n            <MenuItem\n              itemId={2}\n              isDisabled\n              to=\"#default-link2\"\n              // just for demo so that navigation is not triggered\n              onClick={event => event.preventDefault()}\n            >\n              Disabled link\n            </MenuItem>\n            <Divider key=\"group1-divider\" />\n            <MenuGroup label=\"Group 1\">\n              <MenuList>\n                <MenuItem itemId={3}>Group 1 action</MenuItem>\n                <MenuItem itemId={4} isDisabled>\n                  Group 1 disabled action\n                </MenuItem>\n              </MenuList>\n            </MenuGroup>\n            <Divider key=\"group2-divider\" />\n            <MenuGroup label=\"Group 2\">\n              <MenuList>\n                <MenuItem itemId={5}>Option 1</MenuItem>\n                <MenuItem itemId={6}>Option 2</MenuItem>\n              </MenuList>\n            </MenuGroup>\n          </MenuList>\n        </MenuContent>\n      </Menu>\n    );\n  return (\n    <React.Fragment>\n      <ToggleGroup aria-label=\"Default with single selectable\">\n        <ToggleGroupItem\n          text=\"Basic toggle\"\n          buttonId=\"basic\"\n          isSelected={toggleSelected === 'basic'}\n          onChange={handleToggleSwitch}\n        />\n        <ToggleGroupItem\n          text=\"Kebab toggle\"\n          buttonId=\"kebab\"\n          isSelected={toggleSelected === 'kebab'}\n          onChange={handleToggleSwitch}\n        />\n        <ToggleGroupItem\n          text=\"Badge toggle\"\n          buttonId=\"badge\"\n          isSelected={toggleSelected === 'badge'}\n          onChange={handleToggleSwitch}\n        />\n        <ToggleGroupItem\n          text=\"Toggle with image\"\n          buttonId=\"image\"\n          isSelected={toggleSelected === 'image'}\n          onChange={handleToggleSwitch}\n        />\n      </ToggleGroup>\n      <br />\n      <div ref={containerRef}>\n        <Popper\n          trigger={buildToggle()}\n          popper={menu}\n          appendTo={containerRef.current}\n          isVisible={isOpen}\n          popperMatchesTriggerWidth={['image', 'checkbox'].includes(toggleSelected)}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n","title":"Composable dropdown variants","lang":"ts"}}>
      
    </Example>,
  'Composable date select': props => 
    <Example {...pageData} {...props} {...{"code":"import React from 'react';\nimport { MenuToggle, Menu, MenuContent, MenuList, MenuItem, Popper } from '@patternfly/react-core';\n\nexport const ComposableSimpleDropdown: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState<number>(0);\n  const toggleRef = React.useRef<HTMLButtonElement>();\n  const menuRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const handleMenuKeys = (event: KeyboardEvent) => {\n    if (!isOpen) {\n      return;\n    }\n    if (menuRef.current.contains(event.target as Node) || toggleRef.current.contains(event.target as Node)) {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        setIsOpen(!isOpen);\n        toggleRef.current.focus();\n      }\n    }\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (isOpen && !menuRef.current.contains(event.target as Node)) {\n      setIsOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleMenuKeys);\n    window.addEventListener('click', handleClickOutside);\n    return () => {\n      window.removeEventListener('keydown', handleMenuKeys);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isOpen, menuRef]);\n\n  const onToggleClick = (ev: React.MouseEvent) => {\n    ev.stopPropagation(); // Stop handleClickOutside from handling\n    setTimeout(() => {\n      if (menuRef.current) {\n        const firstElement = menuRef.current.querySelector('li > button:not(:disabled)');\n        firstElement && (firstElement as HTMLElement).focus();\n      }\n    }, 0);\n    setIsOpen(!isOpen);\n  };\n\n  const monthStrings = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ];\n\n  const dateString = (date: Date) => `${monthStrings[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n\n  const date = new Date();\n\n  const toggleText = {\n    0: 'Today ',\n    1: 'Yesterday ',\n    2: 'Last 7 days ',\n    3: 'Last 14 days '\n  };\n\n  const dateText = {\n    0: <small className=\"pf-u-color-200\">({dateString(date)})</small>,\n    1: (\n      <small className=\"pf-u-color-200\">\n        ({dateString(new Date(new Date().setDate(date.getDate() - 1)))} - {dateString(date)})\n      </small>\n    ),\n    2: (\n      <small className=\"pf-u-color-200\">\n        ({dateString(new Date(new Date().setDate(date.getDate() - 7)))} - {dateString(date)})\n      </small>\n    ),\n    3: (\n      <small className=\"pf-u-color-200\">\n        ({dateString(new Date(new Date().setDate(date.getDate() - 14)))} - {dateString(date)})\n      </small>\n    )\n  };\n\n  const toggle = (\n    <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen} style={{ minWidth: '250px' }}>\n      <span style={{ verticalAlign: 'middle', marginRight: '8px' }}>{toggleText[selected]}</span>\n      {dateText[selected]}\n    </MenuToggle>\n  );\n  const menu = (\n    // eslint-disable-next-line no-console\n    <Menu ref={menuRef} onSelect={(_ev, itemId) => setSelected(itemId as number)} selected={selected}>\n      <MenuContent>\n        <MenuList>\n          <MenuItem itemId={0}>Today</MenuItem>\n          <MenuItem itemId={1}>Yesterday</MenuItem>\n          <MenuItem itemId={2}>Last 7 days</MenuItem>\n          <MenuItem itemId={3}>Last 14 days</MenuItem>\n        </MenuList>\n      </MenuContent>\n    </Menu>\n  );\n  return (\n    <div ref={containerRef}>\n      <Popper\n        trigger={toggle}\n        popper={menu}\n        appendTo={containerRef.current}\n        isVisible={isOpen}\n        popperMatchesTriggerWidth={false}\n      />\n    </div>\n  );\n};\n","title":"Composable date select","lang":"ts"}}>
      
    </Example>
};

const Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"id":"demos","size":"h2","className":"ws-title ws-h2"}}>
      {`Demos`}
    </AutoLinkHeader>
    <p {...{"className":"ws-p"}}>
      {`Composable menus currently require consumer keyboard handling and use of our undocumented `}
      <PatternflyThemeLink {...{"to":"https://popper.js.org/"}}>
        {`popper.js`}
      </PatternflyThemeLink>
      {` wrapper component called Popper. We understand this is inconvientent boilerplate and these examples will be updated to use `}
      <PatternflyThemeLink {...{"to":"/components/dropdown"}}>
        {`Dropdown`}
      </PatternflyThemeLink>
      {` in a future release.`}
    </p>
    {React.createElement(pageData.examples["Composable simple dropdown"])}
    {React.createElement(pageData.examples["Composable actions menu"])}
    {React.createElement(pageData.examples["Composable simple select"])}
    {React.createElement(pageData.examples["Composable simple checkbox select"])}
    {React.createElement(pageData.examples["Composable drilldown menu"])}
    {React.createElement(pageData.examples["Composable tree view menu"])}
    {React.createElement(pageData.examples["Composable flyout"])}
    {React.createElement(pageData.examples["Composable application launcher"])}
    {React.createElement(pageData.examples["Composable context selector"])}
    {React.createElement(pageData.examples["Composable options menu variants"])}
    {React.createElement(pageData.examples["Composable dropdown variants"])}
    {React.createElement(pageData.examples["Composable date select"])}
  </React.Fragment>
);
Component.displayName = 'DemosComposableMenuReactDemosDocs';
Component.pageData = pageData;

export default Component;
