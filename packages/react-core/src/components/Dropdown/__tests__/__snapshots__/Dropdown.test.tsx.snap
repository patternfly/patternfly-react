// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KebabToggle basic 1`] = `
<Dropdown
  isOpen={true}
  toggle={
    <KebabToggle
      id="Dropdown Toggle"
    />
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={Array []}
    isGrouped={false}
    isOpen={true}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <KebabToggle
        id="Dropdown Toggle"
      />
    }
  >
    <div
      className="pf-c-dropdown pf-m-expanded"
      data-ouia-component-id="OUIA-Generated-Dropdown-14"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <KebabToggle
        aria-haspopup={false}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={true}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-expanded"
              data-ouia-component-id="OUIA-Generated-Dropdown-14"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="true"
                aria-haspopup="false"
                aria-label="Actions"
                class="pf-c-dropdown__toggle"
                id="Dropdown Toggle"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 192 512"
                  width="1em"
                >
                  <path
                    d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                  />
                </svg>
              </button>
              <div
                class="pf-c-dropdown__menu"
              >
                <div>
                  BASIC
                </div>
              </div>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={false}
          aria-label="Actions"
          bubbleEvent={false}
          className=""
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={true}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-expanded"
                data-ouia-component-id="OUIA-Generated-Dropdown-14"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="true"
                  aria-haspopup="false"
                  aria-label="Actions"
                  class="pf-c-dropdown__toggle"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 192 512"
                    width="1em"
                  >
                    <path
                      d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                    />
                  </svg>
                </button>
                <div
                  class="pf-c-dropdown__menu"
                >
                  <div>
                    BASIC
                  </div>
                </div>
              </div>,
            }
          }
        >
          <button
            aria-expanded={true}
            aria-haspopup={false}
            aria-label="Actions"
            className="pf-c-dropdown__toggle"
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <EllipsisVIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 192 512"
                width="1em"
              >
                <path
                  d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                />
              </svg>
            </EllipsisVIcon>
          </button>
        </Toggle>
      </KebabToggle>
      <DropdownMenu
        aria-labelledby="Dropdown Toggle"
        autoFocus={false}
        className=""
        component="div"
        isGrouped={false}
        isOpen={true}
        openedOnEnter={false}
        position="left"
        setMenuComponentRef={[Function]}
      >
        <div
          className="pf-c-dropdown__menu"
          hidden={false}
          onClick={[Function]}
        >
          <div
            key=".0"
          >
            BASIC
          </div>
        </div>
      </DropdownMenu>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`KebabToggle dropup + right aligned 1`] = `
<Dropdown
  direction="up"
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  position="right"
  toggle={
    <KebabToggle
      id="Dropdown Toggle"
    />
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="up"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="right"
    toggle={
      <KebabToggle
        id="Dropdown Toggle"
      />
    }
  >
    <div
      className="pf-c-dropdown pf-m-top pf-m-align-right"
      data-ouia-component-id="OUIA-Generated-Dropdown-11"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <KebabToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-top pf-m-align-right"
              data-ouia-component-id="OUIA-Generated-Dropdown-11"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                aria-label="Actions"
                class="pf-c-dropdown__toggle"
                id="Dropdown Toggle"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 192 512"
                  width="1em"
                >
                  <path
                    d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                  />
                </svg>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          aria-label="Actions"
          bubbleEvent={false}
          className=""
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-top pf-m-align-right"
                data-ouia-component-id="OUIA-Generated-Dropdown-11"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  aria-label="Actions"
                  class="pf-c-dropdown__toggle"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 192 512"
                    width="1em"
                  >
                    <path
                      d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                    />
                  </svg>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-dropdown__toggle"
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <EllipsisVIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 192 512"
                width="1em"
              >
                <path
                  d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                />
              </svg>
            </EllipsisVIcon>
          </button>
        </Toggle>
      </KebabToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`KebabToggle dropup 1`] = `
<Dropdown
  direction="up"
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  toggle={
    <KebabToggle
      id="Dropdown Toggle"
    />
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="up"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <KebabToggle
        id="Dropdown Toggle"
      />
    }
  >
    <div
      className="pf-c-dropdown pf-m-top"
      data-ouia-component-id="OUIA-Generated-Dropdown-10"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <KebabToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-top"
              data-ouia-component-id="OUIA-Generated-Dropdown-10"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                aria-label="Actions"
                class="pf-c-dropdown__toggle"
                id="Dropdown Toggle"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 192 512"
                  width="1em"
                >
                  <path
                    d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                  />
                </svg>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          aria-label="Actions"
          bubbleEvent={false}
          className=""
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-top"
                data-ouia-component-id="OUIA-Generated-Dropdown-10"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  aria-label="Actions"
                  class="pf-c-dropdown__toggle"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 192 512"
                    width="1em"
                  >
                    <path
                      d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                    />
                  </svg>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-dropdown__toggle"
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <EllipsisVIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 192 512"
                width="1em"
              >
                <path
                  d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                />
              </svg>
            </EllipsisVIcon>
          </button>
        </Toggle>
      </KebabToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`KebabToggle expanded 1`] = `
<Dropdown
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  isOpen={true}
  toggle={
    <KebabToggle
      id="Dropdown Toggle"
    />
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={true}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <KebabToggle
        id="Dropdown Toggle"
      />
    }
  >
    <div
      className="pf-c-dropdown pf-m-expanded"
      data-ouia-component-id="OUIA-Generated-Dropdown-12"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <KebabToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={true}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-expanded"
              data-ouia-component-id="OUIA-Generated-Dropdown-12"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="true"
                aria-haspopup="true"
                aria-label="Actions"
                class="pf-c-dropdown__toggle"
                id="Dropdown Toggle"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 192 512"
                  width="1em"
                >
                  <path
                    d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                  />
                </svg>
              </button>
              <ul
                aria-labelledby="Dropdown Toggle"
                class="pf-c-dropdown__menu"
                role="menu"
              >
                <li
                  role="none"
                >
                  <a
                    aria-disabled="false"
                    class="pf-c-dropdown__menu-item"
                  >
                    Link
                  </a>
                </li>
                <li
                  role="none"
                >
                  <button
                    aria-disabled="false"
                    class="pf-c-dropdown__menu-item"
                    type="button"
                  >
                    Action
                  </button>
                </li>
                <li
                  role="none"
                >
                  <a
                    aria-disabled="true"
                    class="pf-m-disabled pf-c-dropdown__menu-item"
                  >
                    Disabled Link
                  </a>
                </li>
                <li
                  role="none"
                >
                  <button
                    aria-disabled="true"
                    class="pf-m-disabled pf-c-dropdown__menu-item"
                    type="button"
                  >
                    Disabled Action
                  </button>
                </li>
                <li
                  role="separator"
                >
                  <div
                    class="pf-c-divider"
                    role="separator"
                  />
                </li>
                <li
                  role="none"
                >
                  <a
                    aria-disabled="false"
                    class="pf-c-dropdown__menu-item"
                  >
                    Separated Link
                  </a>
                </li>
                <li
                  role="none"
                >
                  <button
                    aria-disabled="false"
                    class="pf-c-dropdown__menu-item"
                    type="button"
                  >
                    Separated Action
                  </button>
                </li>
              </ul>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          aria-label="Actions"
          bubbleEvent={false}
          className=""
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={true}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-expanded"
                data-ouia-component-id="OUIA-Generated-Dropdown-12"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="true"
                  aria-haspopup="true"
                  aria-label="Actions"
                  class="pf-c-dropdown__toggle"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 192 512"
                    width="1em"
                  >
                    <path
                      d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                    />
                  </svg>
                </button>
                <ul
                  aria-labelledby="Dropdown Toggle"
                  class="pf-c-dropdown__menu"
                  role="menu"
                >
                  <li
                    role="none"
                  >
                    <a
                      aria-disabled="false"
                      class="pf-c-dropdown__menu-item"
                    >
                      Link
                    </a>
                  </li>
                  <li
                    role="none"
                  >
                    <button
                      aria-disabled="false"
                      class="pf-c-dropdown__menu-item"
                      type="button"
                    >
                      Action
                    </button>
                  </li>
                  <li
                    role="none"
                  >
                    <a
                      aria-disabled="true"
                      class="pf-m-disabled pf-c-dropdown__menu-item"
                    >
                      Disabled Link
                    </a>
                  </li>
                  <li
                    role="none"
                  >
                    <button
                      aria-disabled="true"
                      class="pf-m-disabled pf-c-dropdown__menu-item"
                      type="button"
                    >
                      Disabled Action
                    </button>
                  </li>
                  <li
                    role="separator"
                  >
                    <div
                      class="pf-c-divider"
                      role="separator"
                    />
                  </li>
                  <li
                    role="none"
                  >
                    <a
                      aria-disabled="false"
                      class="pf-c-dropdown__menu-item"
                    >
                      Separated Link
                    </a>
                  </li>
                  <li
                    role="none"
                  >
                    <button
                      aria-disabled="false"
                      class="pf-c-dropdown__menu-item"
                      type="button"
                    >
                      Separated Action
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
        >
          <button
            aria-expanded={true}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-dropdown__toggle"
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <EllipsisVIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 192 512"
                width="1em"
              >
                <path
                  d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                />
              </svg>
            </EllipsisVIcon>
          </button>
        </Toggle>
      </KebabToggle>
      <DropdownMenu
        aria-labelledby="Dropdown Toggle"
        autoFocus={false}
        className=""
        component="ul"
        isGrouped={false}
        isOpen={true}
        openedOnEnter={false}
        position="left"
        setMenuComponentRef={[Function]}
      >
        <ul
          aria-labelledby="Dropdown Toggle"
          autoFocus={false}
          className="pf-c-dropdown__menu"
          hidden={false}
          role="menu"
        >
          <InternalDropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={0}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={false}
            isHovered={false}
            isPlainText={false}
            key=".$link"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <a
                aria-disabled={false}
                className="pf-c-dropdown__menu-item"
              >
                Link
              </a>
            </li>
          </InternalDropdownItem>
          <InternalDropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={1}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={false}
            isHovered={false}
            isPlainText={false}
            key=".$action"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <button
                aria-disabled={false}
                className="pf-c-dropdown__menu-item"
                type="button"
              >
                Action
              </button>
            </li>
          </InternalDropdownItem>
          <InternalDropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={2}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={true}
            isHovered={false}
            isPlainText={false}
            key=".$disabled link"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <a
                aria-disabled={true}
                className="pf-m-disabled pf-c-dropdown__menu-item"
                onClick={[Function]}
                onKeyPress={[Function]}
              >
                Disabled Link
              </a>
            </li>
          </InternalDropdownItem>
          <InternalDropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={3}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={true}
            isHovered={false}
            isPlainText={false}
            key=".$disabled action"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <button
                aria-disabled={true}
                className="pf-m-disabled pf-c-dropdown__menu-item"
                onClick={[Function]}
                onKeyPress={[Function]}
                type="button"
              >
                Disabled Action
              </button>
            </li>
          </InternalDropdownItem>
          <DropdownSeparator
            index={4}
            key=".$separator"
          >
            <InternalDropdownItem
              className=""
              component={
                <Divider
                  component="div"
                />
              }
              context={
                Object {
                  "keyHandler": [Function],
                  "sendRef": [Function],
                }
              }
              data-ouia-component-id="OUIA-Generated-DropdownSeparator-2"
              data-ouia-component-type="PF4/DropdownSeparator"
              data-ouia-safe={true}
              description={null}
              enterTriggersArrowDown={false}
              icon={null}
              index={4}
              inoperableEvents={
                Array [
                  "onClick",
                  "onKeyPress",
                ]
              }
              isDisabled={false}
              isHovered={false}
              isPlainText={false}
              onClick={[Function]}
              role="separator"
              styleChildren={true}
              tooltipProps={Object {}}
            >
              <li
                className={null}
                onClick={[Function]}
                onKeyDown={[Function]}
                role="separator"
              >
                <Divider
                  className=""
                  component="div"
                >
                  <div
                    className="pf-c-divider"
                    role="separator"
                  />
                </Divider>
              </li>
            </InternalDropdownItem>
          </DropdownSeparator>
          <InternalDropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={5}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={false}
            isHovered={false}
            isPlainText={false}
            key=".$separated link"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <a
                aria-disabled={false}
                className="pf-c-dropdown__menu-item"
              >
                Separated Link
              </a>
            </li>
          </InternalDropdownItem>
          <InternalDropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={6}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={false}
            isHovered={false}
            isPlainText={false}
            key=".$separated action"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <button
                aria-disabled={false}
                className="pf-c-dropdown__menu-item"
                type="button"
              >
                Separated Action
              </button>
            </li>
          </InternalDropdownItem>
        </ul>
      </DropdownMenu>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`KebabToggle plain 1`] = `
<Dropdown
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  isPlain={true}
  toggle={
    <KebabToggle
      id="Dropdown Toggle"
    />
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={true}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <KebabToggle
        id="Dropdown Toggle"
      />
    }
  >
    <div
      className="pf-c-dropdown"
      data-ouia-component-id="OUIA-Generated-Dropdown-13"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <KebabToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={true}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown"
              data-ouia-component-id="OUIA-Generated-Dropdown-13"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                aria-label="Actions"
                class="pf-c-dropdown__toggle pf-m-plain"
                id="Dropdown Toggle"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 192 512"
                  width="1em"
                >
                  <path
                    d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                  />
                </svg>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          aria-label="Actions"
          bubbleEvent={false}
          className=""
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={true}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown"
                data-ouia-component-id="OUIA-Generated-Dropdown-13"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  aria-label="Actions"
                  class="pf-c-dropdown__toggle pf-m-plain"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 192 512"
                    width="1em"
                  >
                    <path
                      d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                    />
                  </svg>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-dropdown__toggle pf-m-plain"
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <EllipsisVIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 192 512"
                width="1em"
              >
                <path
                  d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                />
              </svg>
            </EllipsisVIcon>
          </button>
        </Toggle>
      </KebabToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`KebabToggle regular 1`] = `
<Dropdown
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  toggle={
    <KebabToggle
      id="Dropdown Toggle"
    />
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <KebabToggle
        id="Dropdown Toggle"
      />
    }
  >
    <div
      className="pf-c-dropdown"
      data-ouia-component-id="OUIA-Generated-Dropdown-8"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <KebabToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown"
              data-ouia-component-id="OUIA-Generated-Dropdown-8"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                aria-label="Actions"
                class="pf-c-dropdown__toggle"
                id="Dropdown Toggle"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 192 512"
                  width="1em"
                >
                  <path
                    d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                  />
                </svg>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          aria-label="Actions"
          bubbleEvent={false}
          className=""
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown"
                data-ouia-component-id="OUIA-Generated-Dropdown-8"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  aria-label="Actions"
                  class="pf-c-dropdown__toggle"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 192 512"
                    width="1em"
                  >
                    <path
                      d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                    />
                  </svg>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-dropdown__toggle"
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <EllipsisVIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 192 512"
                width="1em"
              >
                <path
                  d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                />
              </svg>
            </EllipsisVIcon>
          </button>
        </Toggle>
      </KebabToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`KebabToggle right aligned 1`] = `
<Dropdown
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  position="right"
  toggle={
    <KebabToggle
      id="Dropdown Toggle"
    />
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="right"
    toggle={
      <KebabToggle
        id="Dropdown Toggle"
      />
    }
  >
    <div
      className="pf-c-dropdown pf-m-align-right"
      data-ouia-component-id="OUIA-Generated-Dropdown-9"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <KebabToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-align-right"
              data-ouia-component-id="OUIA-Generated-Dropdown-9"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                aria-label="Actions"
                class="pf-c-dropdown__toggle"
                id="Dropdown Toggle"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 192 512"
                  width="1em"
                >
                  <path
                    d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                  />
                </svg>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          aria-label="Actions"
          bubbleEvent={false}
          className=""
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-align-right"
                data-ouia-component-id="OUIA-Generated-Dropdown-9"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  aria-label="Actions"
                  class="pf-c-dropdown__toggle"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 192 512"
                    width="1em"
                  >
                    <path
                      d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                    />
                  </svg>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            aria-label="Actions"
            className="pf-c-dropdown__toggle"
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <EllipsisVIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 192 512"
                width="1em"
              >
                <path
                  d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"
                />
              </svg>
            </EllipsisVIcon>
          </button>
        </Toggle>
      </KebabToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`dropdown basic 1`] = `
<Dropdown
  isOpen={true}
  toggle={
    <DropdownToggle
      id="Dropdown Toggle"
    >
      Dropdown
    </DropdownToggle>
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={Array []}
    isGrouped={false}
    isOpen={true}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <DropdownToggle
        id="Dropdown Toggle"
      >
        Dropdown
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-dropdown pf-m-expanded"
      data-ouia-component-id="OUIA-Generated-Dropdown-7"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <DropdownToggle
        aria-haspopup={false}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={true}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-expanded"
              data-ouia-component-id="OUIA-Generated-Dropdown-7"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="true"
                aria-haspopup="false"
                class="pf-c-dropdown__toggle"
                data-ouia-component-id="OUIA-Generated-DropdownToggle-7"
                data-ouia-component-type="PF4/DropdownToggle"
                data-ouia-safe="true"
                id="Dropdown Toggle"
                type="button"
              >
                <span
                  class="pf-c-dropdown__toggle-text"
                >
                  Dropdown
                </span>
                <span
                  class="pf-c-dropdown__toggle-icon"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    />
                  </svg>
                </span>
              </button>
              <div
                class="pf-c-dropdown__menu"
              >
                <div>
                  BASIC
                </div>
              </div>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={false}
          bubbleEvent={false}
          className=""
          data-ouia-component-id="OUIA-Generated-DropdownToggle-7"
          data-ouia-component-type="PF4/DropdownToggle"
          data-ouia-safe={true}
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={true}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-expanded"
                data-ouia-component-id="OUIA-Generated-Dropdown-7"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="true"
                  aria-haspopup="false"
                  class="pf-c-dropdown__toggle"
                  data-ouia-component-id="OUIA-Generated-DropdownToggle-7"
                  data-ouia-component-type="PF4/DropdownToggle"
                  data-ouia-safe="true"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <span
                    class="pf-c-dropdown__toggle-text"
                  >
                    Dropdown
                  </span>
                  <span
                    class="pf-c-dropdown__toggle-icon"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      />
                    </svg>
                  </span>
                </button>
                <div
                  class="pf-c-dropdown__menu"
                >
                  <div>
                    BASIC
                  </div>
                </div>
              </div>,
            }
          }
        >
          <button
            aria-expanded={true}
            aria-haspopup={false}
            className="pf-c-dropdown__toggle"
            data-ouia-component-id="OUIA-Generated-DropdownToggle-7"
            data-ouia-component-type="PF4/DropdownToggle"
            data-ouia-safe={true}
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className="pf-c-dropdown__toggle-text"
            >
              Dropdown
            </span>
            <span
              className="pf-c-dropdown__toggle-icon"
            >
              <CaretDownIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  />
                </svg>
              </CaretDownIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
      <DropdownMenu
        aria-labelledby="Dropdown Toggle"
        autoFocus={false}
        className=""
        component="div"
        isGrouped={false}
        isOpen={true}
        openedOnEnter={false}
        position="left"
        setMenuComponentRef={[Function]}
      >
        <div
          className="pf-c-dropdown__menu"
          hidden={false}
          onClick={[Function]}
        >
          <div
            key=".0"
          >
            BASIC
          </div>
        </div>
      </DropdownMenu>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`dropdown dropup + right aligned 1`] = `
<Dropdown
  direction="up"
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  position="right"
  toggle={
    <DropdownToggle
      id="Dropdown Toggle"
    >
      Dropdown
    </DropdownToggle>
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="up"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="right"
    toggle={
      <DropdownToggle
        id="Dropdown Toggle"
      >
        Dropdown
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-dropdown pf-m-top pf-m-align-right"
      data-ouia-component-id="OUIA-Generated-Dropdown-4"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <DropdownToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-top pf-m-align-right"
              data-ouia-component-id="OUIA-Generated-Dropdown-4"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                class="pf-c-dropdown__toggle"
                data-ouia-component-id="OUIA-Generated-DropdownToggle-4"
                data-ouia-component-type="PF4/DropdownToggle"
                data-ouia-safe="true"
                id="Dropdown Toggle"
                type="button"
              >
                <span
                  class="pf-c-dropdown__toggle-text"
                >
                  Dropdown
                </span>
                <span
                  class="pf-c-dropdown__toggle-icon"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    />
                  </svg>
                </span>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          bubbleEvent={false}
          className=""
          data-ouia-component-id="OUIA-Generated-DropdownToggle-4"
          data-ouia-component-type="PF4/DropdownToggle"
          data-ouia-safe={true}
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-top pf-m-align-right"
                data-ouia-component-id="OUIA-Generated-Dropdown-4"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  class="pf-c-dropdown__toggle"
                  data-ouia-component-id="OUIA-Generated-DropdownToggle-4"
                  data-ouia-component-type="PF4/DropdownToggle"
                  data-ouia-safe="true"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <span
                    class="pf-c-dropdown__toggle-text"
                  >
                    Dropdown
                  </span>
                  <span
                    class="pf-c-dropdown__toggle-icon"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      />
                    </svg>
                  </span>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            className="pf-c-dropdown__toggle"
            data-ouia-component-id="OUIA-Generated-DropdownToggle-4"
            data-ouia-component-type="PF4/DropdownToggle"
            data-ouia-safe={true}
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className="pf-c-dropdown__toggle-text"
            >
              Dropdown
            </span>
            <span
              className="pf-c-dropdown__toggle-icon"
            >
              <CaretDownIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  />
                </svg>
              </CaretDownIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`dropdown dropup 1`] = `
<Dropdown
  direction="up"
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  toggle={
    <DropdownToggle
      id="Dropdown Toggle"
    >
      Dropdown
    </DropdownToggle>
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="up"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <DropdownToggle
        id="Dropdown Toggle"
      >
        Dropdown
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-dropdown pf-m-top"
      data-ouia-component-id="OUIA-Generated-Dropdown-3"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <DropdownToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-top"
              data-ouia-component-id="OUIA-Generated-Dropdown-3"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                class="pf-c-dropdown__toggle"
                data-ouia-component-id="OUIA-Generated-DropdownToggle-3"
                data-ouia-component-type="PF4/DropdownToggle"
                data-ouia-safe="true"
                id="Dropdown Toggle"
                type="button"
              >
                <span
                  class="pf-c-dropdown__toggle-text"
                >
                  Dropdown
                </span>
                <span
                  class="pf-c-dropdown__toggle-icon"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    />
                  </svg>
                </span>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          bubbleEvent={false}
          className=""
          data-ouia-component-id="OUIA-Generated-DropdownToggle-3"
          data-ouia-component-type="PF4/DropdownToggle"
          data-ouia-safe={true}
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-top"
                data-ouia-component-id="OUIA-Generated-Dropdown-3"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  class="pf-c-dropdown__toggle"
                  data-ouia-component-id="OUIA-Generated-DropdownToggle-3"
                  data-ouia-component-type="PF4/DropdownToggle"
                  data-ouia-safe="true"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <span
                    class="pf-c-dropdown__toggle-text"
                  >
                    Dropdown
                  </span>
                  <span
                    class="pf-c-dropdown__toggle-icon"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      />
                    </svg>
                  </span>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            className="pf-c-dropdown__toggle"
            data-ouia-component-id="OUIA-Generated-DropdownToggle-3"
            data-ouia-component-type="PF4/DropdownToggle"
            data-ouia-safe={true}
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className="pf-c-dropdown__toggle-text"
            >
              Dropdown
            </span>
            <span
              className="pf-c-dropdown__toggle-icon"
            >
              <CaretDownIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  />
                </svg>
              </CaretDownIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`dropdown expanded 1`] = `
<Dropdown
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  isOpen={true}
  toggle={
    <DropdownToggle
      id="Dropdown Toggle"
    >
      Dropdown
    </DropdownToggle>
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={true}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <DropdownToggle
        id="Dropdown Toggle"
      >
        Dropdown
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-dropdown pf-m-expanded"
      data-ouia-component-id="OUIA-Generated-Dropdown-5"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <DropdownToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={true}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-expanded"
              data-ouia-component-id="OUIA-Generated-Dropdown-5"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="true"
                aria-haspopup="true"
                class="pf-c-dropdown__toggle"
                data-ouia-component-id="OUIA-Generated-DropdownToggle-5"
                data-ouia-component-type="PF4/DropdownToggle"
                data-ouia-safe="true"
                id="Dropdown Toggle"
                type="button"
              >
                <span
                  class="pf-c-dropdown__toggle-text"
                >
                  Dropdown
                </span>
                <span
                  class="pf-c-dropdown__toggle-icon"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    />
                  </svg>
                </span>
              </button>
              <ul
                aria-labelledby="Dropdown Toggle"
                class="pf-c-dropdown__menu"
                role="menu"
              >
                <li
                  role="none"
                >
                  <a
                    aria-disabled="false"
                    class="pf-c-dropdown__menu-item"
                  >
                    Link
                  </a>
                </li>
                <li
                  role="none"
                >
                  <button
                    aria-disabled="false"
                    class="pf-c-dropdown__menu-item"
                    type="button"
                  >
                    Action
                  </button>
                </li>
                <li
                  role="none"
                >
                  <a
                    aria-disabled="true"
                    class="pf-m-disabled pf-c-dropdown__menu-item"
                  >
                    Disabled Link
                  </a>
                </li>
                <li
                  role="none"
                >
                  <button
                    aria-disabled="true"
                    class="pf-m-disabled pf-c-dropdown__menu-item"
                    type="button"
                  >
                    Disabled Action
                  </button>
                </li>
                <li
                  role="separator"
                >
                  <div
                    class="pf-c-divider"
                    role="separator"
                  />
                </li>
                <li
                  role="none"
                >
                  <a
                    aria-disabled="false"
                    class="pf-c-dropdown__menu-item"
                  >
                    Separated Link
                  </a>
                </li>
                <li
                  role="none"
                >
                  <button
                    aria-disabled="false"
                    class="pf-c-dropdown__menu-item"
                    type="button"
                  >
                    Separated Action
                  </button>
                </li>
              </ul>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          bubbleEvent={false}
          className=""
          data-ouia-component-id="OUIA-Generated-DropdownToggle-5"
          data-ouia-component-type="PF4/DropdownToggle"
          data-ouia-safe={true}
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={true}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-expanded"
                data-ouia-component-id="OUIA-Generated-Dropdown-5"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="true"
                  aria-haspopup="true"
                  class="pf-c-dropdown__toggle"
                  data-ouia-component-id="OUIA-Generated-DropdownToggle-5"
                  data-ouia-component-type="PF4/DropdownToggle"
                  data-ouia-safe="true"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <span
                    class="pf-c-dropdown__toggle-text"
                  >
                    Dropdown
                  </span>
                  <span
                    class="pf-c-dropdown__toggle-icon"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      />
                    </svg>
                  </span>
                </button>
                <ul
                  aria-labelledby="Dropdown Toggle"
                  class="pf-c-dropdown__menu"
                  role="menu"
                >
                  <li
                    role="none"
                  >
                    <a
                      aria-disabled="false"
                      class="pf-c-dropdown__menu-item"
                    >
                      Link
                    </a>
                  </li>
                  <li
                    role="none"
                  >
                    <button
                      aria-disabled="false"
                      class="pf-c-dropdown__menu-item"
                      type="button"
                    >
                      Action
                    </button>
                  </li>
                  <li
                    role="none"
                  >
                    <a
                      aria-disabled="true"
                      class="pf-m-disabled pf-c-dropdown__menu-item"
                    >
                      Disabled Link
                    </a>
                  </li>
                  <li
                    role="none"
                  >
                    <button
                      aria-disabled="true"
                      class="pf-m-disabled pf-c-dropdown__menu-item"
                      type="button"
                    >
                      Disabled Action
                    </button>
                  </li>
                  <li
                    role="separator"
                  >
                    <div
                      class="pf-c-divider"
                      role="separator"
                    />
                  </li>
                  <li
                    role="none"
                  >
                    <a
                      aria-disabled="false"
                      class="pf-c-dropdown__menu-item"
                    >
                      Separated Link
                    </a>
                  </li>
                  <li
                    role="none"
                  >
                    <button
                      aria-disabled="false"
                      class="pf-c-dropdown__menu-item"
                      type="button"
                    >
                      Separated Action
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
        >
          <button
            aria-expanded={true}
            aria-haspopup={true}
            className="pf-c-dropdown__toggle"
            data-ouia-component-id="OUIA-Generated-DropdownToggle-5"
            data-ouia-component-type="PF4/DropdownToggle"
            data-ouia-safe={true}
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className="pf-c-dropdown__toggle-text"
            >
              Dropdown
            </span>
            <span
              className="pf-c-dropdown__toggle-icon"
            >
              <CaretDownIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  />
                </svg>
              </CaretDownIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
      <DropdownMenu
        aria-labelledby="Dropdown Toggle"
        autoFocus={false}
        className=""
        component="ul"
        isGrouped={false}
        isOpen={true}
        openedOnEnter={false}
        position="left"
        setMenuComponentRef={[Function]}
      >
        <ul
          aria-labelledby="Dropdown Toggle"
          autoFocus={false}
          className="pf-c-dropdown__menu"
          hidden={false}
          role="menu"
        >
          <InternalDropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={0}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={false}
            isHovered={false}
            isPlainText={false}
            key=".$link"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <a
                aria-disabled={false}
                className="pf-c-dropdown__menu-item"
              >
                Link
              </a>
            </li>
          </InternalDropdownItem>
          <InternalDropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={1}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={false}
            isHovered={false}
            isPlainText={false}
            key=".$action"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <button
                aria-disabled={false}
                className="pf-c-dropdown__menu-item"
                type="button"
              >
                Action
              </button>
            </li>
          </InternalDropdownItem>
          <InternalDropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={2}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={true}
            isHovered={false}
            isPlainText={false}
            key=".$disabled link"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <a
                aria-disabled={true}
                className="pf-m-disabled pf-c-dropdown__menu-item"
                onClick={[Function]}
                onKeyPress={[Function]}
              >
                Disabled Link
              </a>
            </li>
          </InternalDropdownItem>
          <InternalDropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={3}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={true}
            isHovered={false}
            isPlainText={false}
            key=".$disabled action"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <button
                aria-disabled={true}
                className="pf-m-disabled pf-c-dropdown__menu-item"
                onClick={[Function]}
                onKeyPress={[Function]}
                type="button"
              >
                Disabled Action
              </button>
            </li>
          </InternalDropdownItem>
          <DropdownSeparator
            index={4}
            key=".$separator"
          >
            <InternalDropdownItem
              className=""
              component={
                <Divider
                  component="div"
                />
              }
              context={
                Object {
                  "keyHandler": [Function],
                  "sendRef": [Function],
                }
              }
              data-ouia-component-id="OUIA-Generated-DropdownSeparator-1"
              data-ouia-component-type="PF4/DropdownSeparator"
              data-ouia-safe={true}
              description={null}
              enterTriggersArrowDown={false}
              icon={null}
              index={4}
              inoperableEvents={
                Array [
                  "onClick",
                  "onKeyPress",
                ]
              }
              isDisabled={false}
              isHovered={false}
              isPlainText={false}
              onClick={[Function]}
              role="separator"
              styleChildren={true}
              tooltipProps={Object {}}
            >
              <li
                className={null}
                onClick={[Function]}
                onKeyDown={[Function]}
                role="separator"
              >
                <Divider
                  className=""
                  component="div"
                >
                  <div
                    className="pf-c-divider"
                    role="separator"
                  />
                </Divider>
              </li>
            </InternalDropdownItem>
          </DropdownSeparator>
          <InternalDropdownItem
            className=""
            component="a"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={5}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={false}
            isHovered={false}
            isPlainText={false}
            key=".$separated link"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <a
                aria-disabled={false}
                className="pf-c-dropdown__menu-item"
              >
                Separated Link
              </a>
            </li>
          </InternalDropdownItem>
          <InternalDropdownItem
            className=""
            component="button"
            context={
              Object {
                "keyHandler": [Function],
                "sendRef": [Function],
              }
            }
            description={null}
            enterTriggersArrowDown={false}
            icon={null}
            index={6}
            inoperableEvents={
              Array [
                "onClick",
                "onKeyPress",
              ]
            }
            isDisabled={false}
            isHovered={false}
            isPlainText={false}
            key=".$separated action"
            onClick={[Function]}
            role="none"
            styleChildren={true}
            tooltipProps={Object {}}
          >
            <li
              className={null}
              onClick={[Function]}
              onKeyDown={[Function]}
              role="none"
            >
              <button
                aria-disabled={false}
                className="pf-c-dropdown__menu-item"
                type="button"
              >
                Separated Action
              </button>
            </li>
          </InternalDropdownItem>
        </ul>
      </DropdownMenu>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`dropdown primary 1`] = `
<Dropdown
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  toggle={
    <DropdownToggle
      id="Dropdown Toggle"
      isPrimary={true}
    >
      Dropdown
    </DropdownToggle>
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <DropdownToggle
        id="Dropdown Toggle"
        isPrimary={true}
      >
        Dropdown
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-dropdown"
      data-ouia-component-id="OUIA-Generated-Dropdown-6"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <DropdownToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        isPrimary={true}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown"
              data-ouia-component-id="OUIA-Generated-Dropdown-6"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                class="pf-c-dropdown__toggle pf-m-primary"
                data-ouia-component-id="OUIA-Generated-DropdownToggle-6"
                data-ouia-component-type="PF4/DropdownToggle"
                data-ouia-safe="true"
                id="Dropdown Toggle"
                type="button"
              >
                <span
                  class="pf-c-dropdown__toggle-text"
                >
                  Dropdown
                </span>
                <span
                  class="pf-c-dropdown__toggle-icon"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    />
                  </svg>
                </span>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          bubbleEvent={false}
          className=""
          data-ouia-component-id="OUIA-Generated-DropdownToggle-6"
          data-ouia-component-type="PF4/DropdownToggle"
          data-ouia-safe={true}
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={true}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown"
                data-ouia-component-id="OUIA-Generated-Dropdown-6"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  class="pf-c-dropdown__toggle pf-m-primary"
                  data-ouia-component-id="OUIA-Generated-DropdownToggle-6"
                  data-ouia-component-type="PF4/DropdownToggle"
                  data-ouia-safe="true"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <span
                    class="pf-c-dropdown__toggle-text"
                  >
                    Dropdown
                  </span>
                  <span
                    class="pf-c-dropdown__toggle-icon"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      />
                    </svg>
                  </span>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            className="pf-c-dropdown__toggle pf-m-primary"
            data-ouia-component-id="OUIA-Generated-DropdownToggle-6"
            data-ouia-component-type="PF4/DropdownToggle"
            data-ouia-safe={true}
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className="pf-c-dropdown__toggle-text"
            >
              Dropdown
            </span>
            <span
              className="pf-c-dropdown__toggle-icon"
            >
              <CaretDownIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  />
                </svg>
              </CaretDownIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`dropdown regular 1`] = `
<Dropdown
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  toggle={
    <DropdownToggle
      id="Dropdown Toggle"
    >
      Dropdown
    </DropdownToggle>
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="left"
    toggle={
      <DropdownToggle
        id="Dropdown Toggle"
      >
        Dropdown
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-dropdown"
      data-ouia-component-id="OUIA-Generated-Dropdown-1"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <DropdownToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown"
              data-ouia-component-id="OUIA-Generated-Dropdown-1"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                class="pf-c-dropdown__toggle"
                data-ouia-component-id="OUIA-Generated-DropdownToggle-1"
                data-ouia-component-type="PF4/DropdownToggle"
                data-ouia-safe="true"
                id="Dropdown Toggle"
                type="button"
              >
                <span
                  class="pf-c-dropdown__toggle-text"
                >
                  Dropdown
                </span>
                <span
                  class="pf-c-dropdown__toggle-icon"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    />
                  </svg>
                </span>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          bubbleEvent={false}
          className=""
          data-ouia-component-id="OUIA-Generated-DropdownToggle-1"
          data-ouia-component-type="PF4/DropdownToggle"
          data-ouia-safe={true}
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown"
                data-ouia-component-id="OUIA-Generated-Dropdown-1"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  class="pf-c-dropdown__toggle"
                  data-ouia-component-id="OUIA-Generated-DropdownToggle-1"
                  data-ouia-component-type="PF4/DropdownToggle"
                  data-ouia-safe="true"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <span
                    class="pf-c-dropdown__toggle-text"
                  >
                    Dropdown
                  </span>
                  <span
                    class="pf-c-dropdown__toggle-icon"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      />
                    </svg>
                  </span>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            className="pf-c-dropdown__toggle"
            data-ouia-component-id="OUIA-Generated-DropdownToggle-1"
            data-ouia-component-type="PF4/DropdownToggle"
            data-ouia-safe={true}
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className="pf-c-dropdown__toggle-text"
            >
              Dropdown
            </span>
            <span
              className="pf-c-dropdown__toggle-icon"
            >
              <CaretDownIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  />
                </svg>
              </CaretDownIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;

exports[`dropdown right aligned 1`] = `
<Dropdown
  dropdownItems={
    Array [
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Action
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={true}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Disabled Action
      </InternalDropdownItem>,
      <DropdownSeparator />,
      <InternalDropdownItem
        className=""
        component="a"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Link
      </InternalDropdownItem>,
      <InternalDropdownItem
        className=""
        component="button"
        context={
          Object {
            "keyHandler": [Function],
            "sendRef": [Function],
          }
        }
        description={null}
        enterTriggersArrowDown={false}
        icon={null}
        index={-1}
        inoperableEvents={
          Array [
            "onClick",
            "onKeyPress",
          ]
        }
        isDisabled={false}
        isHovered={false}
        isPlainText={false}
        onClick={[Function]}
        role="none"
        styleChildren={true}
        tooltipProps={Object {}}
      >
        Separated Action
      </InternalDropdownItem>,
    ]
  }
  position="right"
  toggle={
    <DropdownToggle
      id="Dropdown Toggle"
    >
      Dropdown
    </DropdownToggle>
  }
>
  <DropdownWithContext
    autoFocus={true}
    className=""
    direction="down"
    dropdownItems={
      Array [
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Action
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={true}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Disabled Action
        </InternalDropdownItem>,
        <DropdownSeparator />,
        <InternalDropdownItem
          className=""
          component="a"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Link
        </InternalDropdownItem>,
        <InternalDropdownItem
          className=""
          component="button"
          context={
            Object {
              "keyHandler": [Function],
              "sendRef": [Function],
            }
          }
          description={null}
          enterTriggersArrowDown={false}
          icon={null}
          index={-1}
          inoperableEvents={
            Array [
              "onClick",
              "onKeyPress",
            ]
          }
          isDisabled={false}
          isHovered={false}
          isPlainText={false}
          onClick={[Function]}
          role="none"
          styleChildren={true}
          tooltipProps={Object {}}
        >
          Separated Action
        </InternalDropdownItem>,
      ]
    }
    isGrouped={false}
    isOpen={false}
    isPlain={false}
    menuAppendTo="inline"
    onSelect={[Function]}
    position="right"
    toggle={
      <DropdownToggle
        id="Dropdown Toggle"
      >
        Dropdown
      </DropdownToggle>
    }
  >
    <div
      className="pf-c-dropdown pf-m-align-right"
      data-ouia-component-id="OUIA-Generated-Dropdown-2"
      data-ouia-component-type="PF4/Dropdown"
      data-ouia-safe={true}
    >
      <DropdownToggle
        aria-haspopup={true}
        getMenuRef={[Function]}
        id="Dropdown Toggle"
        isOpen={false}
        isPlain={false}
        key=".0"
        onEnter={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-dropdown pf-m-align-right"
              data-ouia-component-id="OUIA-Generated-Dropdown-2"
              data-ouia-component-type="PF4/Dropdown"
              data-ouia-safe="true"
            >
              <button
                aria-expanded="false"
                aria-haspopup="true"
                class="pf-c-dropdown__toggle"
                data-ouia-component-id="OUIA-Generated-DropdownToggle-2"
                data-ouia-component-type="PF4/DropdownToggle"
                data-ouia-safe="true"
                id="Dropdown Toggle"
                type="button"
              >
                <span
                  class="pf-c-dropdown__toggle-text"
                >
                  Dropdown
                </span>
                <span
                  class="pf-c-dropdown__toggle-icon"
                >
                  <svg
                    aria-hidden="true"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    />
                  </svg>
                </span>
              </button>
            </div>,
          }
        }
      >
        <Toggle
          aria-haspopup={true}
          bubbleEvent={false}
          className=""
          data-ouia-component-id="OUIA-Generated-DropdownToggle-2"
          data-ouia-component-type="PF4/DropdownToggle"
          data-ouia-safe={true}
          getMenuRef={[Function]}
          id="Dropdown Toggle"
          isActive={false}
          isDisabled={false}
          isOpen={false}
          isPlain={false}
          isPrimary={false}
          isSplitButton={false}
          onEnter={[Function]}
          onToggle={[Function]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-dropdown pf-m-align-right"
                data-ouia-component-id="OUIA-Generated-Dropdown-2"
                data-ouia-component-type="PF4/Dropdown"
                data-ouia-safe="true"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="true"
                  class="pf-c-dropdown__toggle"
                  data-ouia-component-id="OUIA-Generated-DropdownToggle-2"
                  data-ouia-component-type="PF4/DropdownToggle"
                  data-ouia-safe="true"
                  id="Dropdown Toggle"
                  type="button"
                >
                  <span
                    class="pf-c-dropdown__toggle-text"
                  >
                    Dropdown
                  </span>
                  <span
                    class="pf-c-dropdown__toggle-icon"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      />
                    </svg>
                  </span>
                </button>
              </div>,
            }
          }
        >
          <button
            aria-expanded={false}
            aria-haspopup={true}
            className="pf-c-dropdown__toggle"
            data-ouia-component-id="OUIA-Generated-DropdownToggle-2"
            data-ouia-component-type="PF4/DropdownToggle"
            data-ouia-safe={true}
            disabled={false}
            id="Dropdown Toggle"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className="pf-c-dropdown__toggle-text"
            >
              Dropdown
            </span>
            <span
              className="pf-c-dropdown__toggle-icon"
            >
              <CaretDownIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  />
                </svg>
              </CaretDownIcon>
            </span>
          </button>
        </Toggle>
      </DropdownToggle>
    </div>
  </DropdownWithContext>
</Dropdown>
`;
