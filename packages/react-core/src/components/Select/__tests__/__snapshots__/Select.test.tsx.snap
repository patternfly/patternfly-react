// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`checkbox select renders checkbox select groups successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={true}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
=======
  toggleId="checkbox-select-expanded-groups-old"
>>>>>>> upstream/master
  variant="checkbox"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={15}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <CheckboxSelectGroup
            label="group 1"
          >
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={false}
              isDisabled={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            />
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={false}
              isDisabled={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            />
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={false}
              isDisabled={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            />
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={false}
              isDisabled={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            />
          </CheckboxSelectGroup>,
          <CheckboxSelectGroup
            label="group 2"
          >
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={false}
              isDisabled={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            />
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={false}
              isDisabled={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            />
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={false}
              isDisabled={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            />
            <CheckboxSelectOption
              className=""
              index={0}
              isChecked={false}
              isDisabled={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            />
          </CheckboxSelectGroup>,
        ],
        "isExpanded": true,
        "isGrouped": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "checkbox-select-expanded-groups-old",
        "variant": "checkbox",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-6"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-6"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="15"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="checkbox-select-expanded-groups-old"
      variant="checkbox"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-expanded-groups-old"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-expanded-groups-old"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-labelledby=" checkbox-select-expanded-groups-old"
                  class="pf-c-select__toggle"
                  id="checkbox-select-expanded-groups-old"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    />
                    
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
                <div>
                  <div
                    class="pf-c-select__menu"
                  >
                    <fieldset
                      aria-label=""
                      class="pf-c-form__fieldset"
                    >
                      <div
                        class="pf-c-select__menu-group"
                      >
                        <div
                          aria-hidden="true"
                          class="pf-c-select__menu-group-title"
                          id="group-1"
                        >
                          group 1
                        </div>
                        <fieldset
                          aria-labelledby="group-1"
                          class="pf-c-select__menu-fieldset"
                        >
                          <label
                            class="pf-c-check pf-c-select__menu-item"
                          >
                            <input
                              class="pf-c-check__input"
                              id="Mr"
                              type="checkbox"
                            />
                            <span
                              class="pf-c-check__label"
                            >
                              Mr
                            </span>
                          </label>
                          <label
                            class="pf-c-check pf-c-select__menu-item"
                          >
                            <input
                              class="pf-c-check__input"
                              id="Mrs"
                              type="checkbox"
                            />
                            <span
                              class="pf-c-check__label"
                            >
                              Mrs
                            </span>
                          </label>
                          <label
                            class="pf-c-check pf-c-select__menu-item"
                          >
                            <input
                              class="pf-c-check__input"
                              id="Ms"
                              type="checkbox"
                            />
                            <span
                              class="pf-c-check__label"
                            >
                              Ms
                            </span>
                          </label>
                          <label
                            class="pf-c-check pf-c-select__menu-item"
                          >
                            <input
                              class="pf-c-check__input"
                              id="Other"
                              type="checkbox"
                            />
                            <span
                              class="pf-c-check__label"
                            >
                              Other
                            </span>
                          </label>
                        </fieldset>
                      </div>
                      <div
                        class="pf-c-select__menu-group"
                      >
                        <div
                          aria-hidden="true"
                          class="pf-c-select__menu-group-title"
                          id="group-2"
                        >
                          group 2
                        </div>
                        <fieldset
                          aria-labelledby="group-2"
                          class="pf-c-select__menu-fieldset"
                        >
                          <label
                            class="pf-c-check pf-c-select__menu-item"
                          >
                            <input
                              class="pf-c-check__input"
                              id="Mr"
                              type="checkbox"
                            />
                            <span
                              class="pf-c-check__label"
                            >
                              Mr
                            </span>
                          </label>
                          <label
                            class="pf-c-check pf-c-select__menu-item"
                          >
                            <input
                              class="pf-c-check__input"
                              id="Mrs"
                              type="checkbox"
                            />
                            <span
                              class="pf-c-check__label"
                            >
                              Mrs
                            </span>
                          </label>
                          <label
                            class="pf-c-check pf-c-select__menu-item"
                          >
                            <input
                              class="pf-c-check__input"
                              id="Ms"
                              type="checkbox"
                            />
                            <span
                              class="pf-c-check__label"
                            >
                              Ms
                            </span>
                          </label>
                          <label
                            class="pf-c-check pf-c-select__menu-item"
                          >
                            <input
                              class="pf-c-check__input"
                              id="Other"
                              type="checkbox"
                            />
                            <span
                              class="pf-c-check__label"
                            >
                              Other
                            </span>
                          </label>
                        </fieldset>
                      </div>
                    </fieldset>
                  </div>
                </div>
              </div>,
            }
          }
          type="button"
          variant="checkbox"
        >
          <button
            aria-expanded={true}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-expanded-groups-old"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-expanded-groups-old"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <button
              aria-expanded="true"
              aria-labelledby=" pf-toggle-id-6"
              class="pf-c-select__toggle"
              id="pf-toggle-id-6"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
<<<<<<< HEAD
            </button>
=======
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          checked={Array []}
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={true}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <FocusTrap
            active={true}
            focusTrapOptions={
              Object {
                "clickOutsideDeactivates": true,
              }
            }
            paused={false}
          >
>>>>>>> upstream/master
            <div>
              <div
                class="pf-c-select__menu"
              >
                <fieldset
                  aria-label=""
                  class="pf-c-form__fieldset"
                >
                  <div
                    class="pf-c-select__menu-group"
                  >
                    <div
                      aria-hidden="true"
                      class="pf-c-select__menu-group-title"
                      id="group-1"
                    >
                      group 1
                    </div>
                    <fieldset
                      aria-labelledby="group-1"
                      class="pf-c-select__menu-fieldset"
                    >
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mr"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mr
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mrs"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mrs
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Ms"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Ms
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Other"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Other
                        </span>
                      </label>
                    </fieldset>
                  </div>
                  <div
                    class="pf-c-select__menu-group"
                  >
                    <div
                      aria-hidden="true"
                      class="pf-c-select__menu-group-title"
                      id="group-2"
                    >
                      group 2
                    </div>
                    <fieldset
                      aria-labelledby="group-2"
                      class="pf-c-select__menu-fieldset"
                    >
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mr"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mr
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mrs"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mrs
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Ms"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Ms
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Other"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Other
                        </span>
                      </label>
                    </fieldset>
                  </div>
                </fieldset>
              </div>
            </div>
          </div>,
        }
      }
      type="button"
      variant="checkbox"
    >
      <button
        aria-expanded={true}
        aria-haspopup={null}
        aria-labelledby=" pf-toggle-id-6"
        className="pf-c-select__toggle"
        disabled={false}
        id="pf-toggle-id-6"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      checked={Array []}
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={true}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <FocusTrap
        active={true}
        focusTrapOptions={
          Object {
            "clickOutsideDeactivates": true,
          }
        }
        paused={false}
      >
        <div>
          <div
            className="pf-c-select__menu"
          >
            <fieldset
              aria-label=""
              aria-labelledby={null}
              className="pf-c-form__fieldset"
            >
              <SelectGroup
                key=".0"
                label="group 1"
                titleId="group-1"
              >
                <div
                  className="pf-c-select__menu-group"
                >
                  <div
                    aria-hidden={true}
                    className="pf-c-select__menu-group-title"
                    id="group-1"
                  >
                    group 1
                  </div>
                  <fieldset
                    aria-labelledby="group-1"
                    className="pf-c-select__menu-fieldset"
                  >
                    <SelectOption
                      className=""
                      component="button"
                      index={0}
                      isChecked={false}
                      isDisabled={false}
                      isFocused={false}
                      isNoResultsOption={false}
                      isPlaceholder={false}
                      isSelected={false}
                      key="00"
                      keyHandler={[Function]}
                      onClick={[Function]}
                      sendRef={[Function]}
                      value="Mr"
                    >
                      <label
                        className="pf-c-check pf-c-select__menu-item"
                        onKeyDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="pf-c-check__input"
                          disabled={false}
                          id="Mr"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        <span
                          className="pf-c-check__label"
                        >
                          Mr
                        </span>
                      </label>
                    </SelectOption>
                    <SelectOption
                      className=""
                      component="button"
                      index={1}
                      isChecked={false}
                      isDisabled={false}
                      isFocused={false}
                      isNoResultsOption={false}
                      isPlaceholder={false}
                      isSelected={false}
                      key="01"
                      keyHandler={[Function]}
                      onClick={[Function]}
                      sendRef={[Function]}
                      value="Mrs"
                    >
                      <label
                        className="pf-c-check pf-c-select__menu-item"
                        onKeyDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="pf-c-check__input"
                          disabled={false}
                          id="Mrs"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        <span
                          className="pf-c-check__label"
                        >
                          Mrs
                        </span>
                      </label>
                    </SelectOption>
                    <SelectOption
                      className=""
                      component="button"
                      index={2}
                      isChecked={false}
                      isDisabled={false}
                      isFocused={false}
                      isNoResultsOption={false}
                      isPlaceholder={false}
                      isSelected={false}
                      key="02"
                      keyHandler={[Function]}
                      onClick={[Function]}
                      sendRef={[Function]}
                      value="Ms"
                    >
                      <label
                        className="pf-c-check pf-c-select__menu-item"
                        onKeyDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="pf-c-check__input"
                          disabled={false}
                          id="Ms"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        <span
                          className="pf-c-check__label"
                        >
                          Ms
                        </span>
                      </label>
                    </SelectOption>
                    <SelectOption
                      className=""
                      component="button"
                      index={3}
                      isChecked={false}
                      isDisabled={false}
                      isFocused={false}
                      isNoResultsOption={false}
                      isPlaceholder={false}
                      isSelected={false}
                      key="03"
                      keyHandler={[Function]}
                      onClick={[Function]}
                      sendRef={[Function]}
                      value="Other"
                    >
                      <label
                        className="pf-c-check pf-c-select__menu-item"
                        onKeyDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="pf-c-check__input"
                          disabled={false}
                          id="Other"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        <span
                          className="pf-c-check__label"
                        >
                          Other
                        </span>
                      </label>
                    </SelectOption>
                  </fieldset>
                </div>
              </SelectGroup>
              <SelectGroup
                key=".1"
                label="group 2"
                titleId="group-2"
              >
                <div
                  className="pf-c-select__menu-group"
                >
                  <div
                    aria-hidden={true}
                    className="pf-c-select__menu-group-title"
                    id="group-2"
                  >
                    group 2
                  </div>
                  <fieldset
                    aria-labelledby="group-2"
                    className="pf-c-select__menu-fieldset"
                  >
                    <SelectOption
                      className=""
                      component="button"
                      index={4}
                      isChecked={false}
                      isDisabled={false}
                      isFocused={false}
                      isNoResultsOption={false}
                      isPlaceholder={false}
                      isSelected={false}
                      key="00"
                      keyHandler={[Function]}
                      onClick={[Function]}
                      sendRef={[Function]}
                      value="Mr"
                    >
                      <label
                        className="pf-c-check pf-c-select__menu-item"
                        onKeyDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="pf-c-check__input"
                          disabled={false}
                          id="Mr"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        <span
                          className="pf-c-check__label"
                        >
                          Mr
                        </span>
                      </label>
                    </SelectOption>
                    <SelectOption
                      className=""
                      component="button"
                      index={5}
                      isChecked={false}
                      isDisabled={false}
                      isFocused={false}
                      isNoResultsOption={false}
                      isPlaceholder={false}
                      isSelected={false}
                      key="01"
                      keyHandler={[Function]}
                      onClick={[Function]}
                      sendRef={[Function]}
                      value="Mrs"
                    >
                      <label
                        className="pf-c-check pf-c-select__menu-item"
                        onKeyDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="pf-c-check__input"
                          disabled={false}
                          id="Mrs"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        <span
                          className="pf-c-check__label"
                        >
                          Mrs
                        </span>
                      </label>
                    </SelectOption>
                    <SelectOption
                      className=""
                      component="button"
                      index={6}
                      isChecked={false}
                      isDisabled={false}
                      isFocused={false}
                      isNoResultsOption={false}
                      isPlaceholder={false}
                      isSelected={false}
                      key="02"
                      keyHandler={[Function]}
                      onClick={[Function]}
                      sendRef={[Function]}
                      value="Ms"
                    >
                      <label
                        className="pf-c-check pf-c-select__menu-item"
                        onKeyDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="pf-c-check__input"
                          disabled={false}
                          id="Ms"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        <span
                          className="pf-c-check__label"
                        >
                          Ms
                        </span>
                      </label>
                    </SelectOption>
                    <SelectOption
                      className=""
                      component="button"
                      index={7}
                      isChecked={false}
                      isDisabled={false}
                      isFocused={false}
                      isNoResultsOption={false}
                      isPlaceholder={false}
                      isSelected={false}
                      key="03"
                      keyHandler={[Function]}
                      onClick={[Function]}
                      sendRef={[Function]}
                      value="Other"
                    >
                      <label
                        className="pf-c-check pf-c-select__menu-item"
                        onKeyDown={[Function]}
                      >
                        <input
                          checked={false}
                          className="pf-c-check__input"
                          disabled={false}
                          id="Other"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        <span
                          className="pf-c-check__label"
                        >
                          Other
                        </span>
                      </label>
                    </SelectOption>
                  </fieldset>
                </div>
              </SelectGroup>
            </fieldset>
          </div>
        </div>
      </FocusTrap>
    </SelectMenu>
  </div>
</Select>
`;

exports[`checkbox select renders checkbox select selections properly 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={
    Array [
      <SelectOption
        className=""
        component="button"
        index={0}
        isChecked={false}
        isDisabled={false}
        isFocused={false}
        isNoResultsOption={false}
        isPlaceholder={false}
        isSelected={false}
        keyHandler={[Function]}
        onClick={[Function]}
        sendRef={[Function]}
        value="Mr"
      />,
    ]
  }
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="checkbox-select-selections"
  typeAheadAriaLabel=""
=======
  toggleId="checkbox-select-expanded-groups"
>>>>>>> upstream/master
  variant="checkbox"
  width=""
>
  <div
    className="pf-c-select"
    data-ouia-component-id={9}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" checkbox-select-selections"
      className=""
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="checkbox-select-selections"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="9"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
<<<<<<< HEAD
            <button
              aria-expanded="false"
              aria-labelledby=" checkbox-select-selections"
              class="pf-c-select__toggle"
              id="checkbox-select-selections"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
                <div
                  class="pf-c-select__toggle-badge"
                >
                  <span
                    class="pf-c-badge pf-m-read"
                  >
                    1
                  </span>
                </div>
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </button>
          </div>,
        }
      }
      type="button"
      variant="checkbox"
    >
      <button
        aria-expanded={false}
        aria-haspopup={null}
        aria-labelledby=" checkbox-select-selections"
        className="pf-c-select__toggle"
        disabled={false}
        id="checkbox-select-selections"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
          <div
            className="pf-c-select__toggle-badge"
          >
            <span
              className="pf-c-badge pf-m-read"
            >
              1
            </span>
          </div>
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`checkbox select renders checkbox select selections properly when isCheckboxSelectionBadgeHidden is true 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCheckboxSelectionBadgeHidden={true}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={
    Array [
      <SelectOption
        className=""
        component="button"
        index={0}
        isChecked={false}
        isDisabled={false}
        isFocused={false}
        isNoResultsOption={false}
        isPlaceholder={false}
        isSelected={false}
        keyHandler={[Function]}
        onClick={[Function]}
        sendRef={[Function]}
        value="Mr"
      />,
    ]
  }
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="checkbox-select-hidden-badge"
  typeAheadAriaLabel=""
  variant="checkbox"
  width=""
>
  <div
    className="pf-c-select"
    data-ouia-component-id={10}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" checkbox-select-hidden-badge"
      className=""
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="checkbox-select-hidden-badge"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="10"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <button
              aria-expanded="false"
              aria-labelledby=" checkbox-select-hidden-badge"
              class="pf-c-select__toggle"
              id="checkbox-select-hidden-badge"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </button>
          </div>,
        }
      }
      type="button"
      variant="checkbox"
    >
      <button
        aria-expanded={false}
        aria-haspopup={null}
        aria-labelledby=" checkbox-select-hidden-badge"
        className="pf-c-select__toggle"
        disabled={false}
        id="checkbox-select-hidden-badge"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`checkbox select renders closed successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="checkbox-select-closed"
  typeAheadAriaLabel=""
  variant="checkbox"
  width=""
>
  <div
    className="pf-c-select"
    data-ouia-component-id={8}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
=======
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            />
          </SelectGroup>,
          <SelectGroup
            label="group 2"
          >
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            />
          </SelectGroup>,
        ],
        "isExpanded": true,
        "isGrouped": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "checkbox-select-expanded-groups",
        "variant": "checkbox",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" checkbox-select-closed"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="checkbox-select-closed"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="8"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <button
              aria-expanded="false"
              aria-labelledby=" checkbox-select-closed"
              class="pf-c-select__toggle"
              id="checkbox-select-closed"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </button>
          </div>,
        }
      }
<<<<<<< HEAD
      type="button"
=======
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="checkbox-select-expanded-groups"
>>>>>>> upstream/master
      variant="checkbox"
    >
      <button
        aria-expanded={false}
        aria-haspopup={null}
        aria-labelledby=" checkbox-select-closed"
        className="pf-c-select__toggle"
        disabled={false}
        id="checkbox-select-closed"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
<<<<<<< HEAD
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`checkbox select renders expanded successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
  variant="checkbox"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={11}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-3"
      className=""
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-3"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="11"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <button
              aria-expanded="true"
              aria-labelledby=" pf-toggle-id-3"
              class="pf-c-select__toggle"
              id="pf-toggle-id-3"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </button>
            <div>
              <div
                class="pf-c-select__menu"
              >
                <fieldset
                  aria-label=""
                  class="pf-c-form__fieldset"
=======
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-expanded-groups"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-expanded-groups"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-labelledby=" checkbox-select-expanded-groups"
                  class="pf-c-select__toggle"
                  id="checkbox-select-expanded-groups"
                  type="button"
>>>>>>> upstream/master
                >
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Mr"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Mr
                    </span>
                  </label>
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Mrs"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Mrs
                    </span>
                  </label>
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Ms"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Ms
                    </span>
                  </label>
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Other"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Other
                    </span>
                  </label>
                </fieldset>
              </div>
            </div>
          </div>,
        }
      }
      type="button"
      variant="checkbox"
    >
      <button
        aria-expanded={true}
        aria-haspopup={null}
        aria-labelledby=" pf-toggle-id-3"
        className="pf-c-select__toggle"
        disabled={false}
        id="pf-toggle-id-3"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
<<<<<<< HEAD
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
=======
          <button
            aria-expanded={true}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-expanded-groups"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-expanded-groups"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      checked={Array []}
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <FocusTrap
        active={true}
        focusTrapOptions={
          Object {
            "clickOutsideDeactivates": true,
          }
        }
        paused={false}
      >
        <div>
          <div
            className="pf-c-select__menu"
          >
            <fieldset
              aria-label=""
              aria-labelledby={null}
              className="pf-c-form__fieldset"
            >
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$00"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Mr"
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Mr"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Mr
                  </span>
                </label>
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={1}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$01"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Mrs"
              >
<<<<<<< HEAD
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Mrs"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Mrs
                  </span>
                </label>
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={2}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$02"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Ms"
=======
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          checked={Array []}
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={true}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <FocusTrap
            active={true}
            focusTrapOptions={
              Object {
                "clickOutsideDeactivates": true,
              }
            }
            paused={false}
          >
            <div>
              <div
                className="pf-c-select__menu"
>>>>>>> upstream/master
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Ms"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
<<<<<<< HEAD
                    Ms
                  </span>
                </label>
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={3}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$03"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Other"
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Other"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Other
                  </span>
                </label>
              </SelectOption>
            </fieldset>
          </div>
        </div>
      </FocusTrap>
    </SelectMenu>
  </div>
</Select>
`;

exports[`checkbox select renders expanded successfully with custom objects 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
=======
                    <div
                      className="pf-c-select__menu-group"
                    >
                      <div
                        aria-hidden={true}
                        className="pf-c-select__menu-group-title"
                        id="group-1"
                      >
                        group 1
                      </div>
                      <fieldset
                        aria-labelledby="group-1"
                        className="pf-c-select__menu-fieldset"
                      >
                        <SelectOption
                          className=""
                          component="button"
                          index={0}
                          isChecked={false}
                          isDisabled={false}
                          isFocused={false}
                          isNoResultsOption={false}
                          isPlaceholder={false}
                          isSelected={false}
                          key="00"
                          keyHandler={[Function]}
                          onClick={[Function]}
                          sendRef={[Function]}
                          value="Mr"
                        >
                          <label
                            className="pf-c-check pf-c-select__menu-item"
                            onKeyDown={[Function]}
                          >
                            <input
                              checked={false}
                              className="pf-c-check__input"
                              disabled={false}
                              id="Mr"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <span
                              className="pf-c-check__label"
                            >
                              Mr
                            </span>
                          </label>
                        </SelectOption>
                        <SelectOption
                          className=""
                          component="button"
                          index={1}
                          isChecked={false}
                          isDisabled={false}
                          isFocused={false}
                          isNoResultsOption={false}
                          isPlaceholder={false}
                          isSelected={false}
                          key="01"
                          keyHandler={[Function]}
                          onClick={[Function]}
                          sendRef={[Function]}
                          value="Mrs"
                        >
                          <label
                            className="pf-c-check pf-c-select__menu-item"
                            onKeyDown={[Function]}
                          >
                            <input
                              checked={false}
                              className="pf-c-check__input"
                              disabled={false}
                              id="Mrs"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <span
                              className="pf-c-check__label"
                            >
                              Mrs
                            </span>
                          </label>
                        </SelectOption>
                        <SelectOption
                          className=""
                          component="button"
                          index={2}
                          isChecked={false}
                          isDisabled={false}
                          isFocused={false}
                          isNoResultsOption={false}
                          isPlaceholder={false}
                          isSelected={false}
                          key="02"
                          keyHandler={[Function]}
                          onClick={[Function]}
                          sendRef={[Function]}
                          value="Ms"
                        >
                          <label
                            className="pf-c-check pf-c-select__menu-item"
                            onKeyDown={[Function]}
                          >
                            <input
                              checked={false}
                              className="pf-c-check__input"
                              disabled={false}
                              id="Ms"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <span
                              className="pf-c-check__label"
                            >
                              Ms
                            </span>
                          </label>
                        </SelectOption>
                        <SelectOption
                          className=""
                          component="button"
                          index={3}
                          isChecked={false}
                          isDisabled={false}
                          isFocused={false}
                          isNoResultsOption={false}
                          isPlaceholder={false}
                          isSelected={false}
                          key="03"
                          keyHandler={[Function]}
                          onClick={[Function]}
                          sendRef={[Function]}
                          value="Other"
                        >
                          <label
                            className="pf-c-check pf-c-select__menu-item"
                            onKeyDown={[Function]}
                          >
                            <input
                              checked={false}
                              className="pf-c-check__input"
                              disabled={false}
                              id="Other"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <span
                              className="pf-c-check__label"
                            >
                              Other
                            </span>
                          </label>
                        </SelectOption>
                      </fieldset>
                    </div>
                  </SelectGroup>
                  <SelectGroup
                    key=".1"
                    label="group 2"
                    titleId="group-2"
                  >
                    <div
                      className="pf-c-select__menu-group"
                    >
                      <div
                        aria-hidden={true}
                        className="pf-c-select__menu-group-title"
                        id="group-2"
                      >
                        group 2
                      </div>
                      <fieldset
                        aria-labelledby="group-2"
                        className="pf-c-select__menu-fieldset"
                      >
                        <SelectOption
                          className=""
                          component="button"
                          index={4}
                          isChecked={false}
                          isDisabled={false}
                          isFocused={false}
                          isNoResultsOption={false}
                          isPlaceholder={false}
                          isSelected={false}
                          key="00"
                          keyHandler={[Function]}
                          onClick={[Function]}
                          sendRef={[Function]}
                          value="Mr"
                        >
                          <label
                            className="pf-c-check pf-c-select__menu-item"
                            onKeyDown={[Function]}
                          >
                            <input
                              checked={false}
                              className="pf-c-check__input"
                              disabled={false}
                              id="Mr"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <span
                              className="pf-c-check__label"
                            >
                              Mr
                            </span>
                          </label>
                        </SelectOption>
                        <SelectOption
                          className=""
                          component="button"
                          index={5}
                          isChecked={false}
                          isDisabled={false}
                          isFocused={false}
                          isNoResultsOption={false}
                          isPlaceholder={false}
                          isSelected={false}
                          key="01"
                          keyHandler={[Function]}
                          onClick={[Function]}
                          sendRef={[Function]}
                          value="Mrs"
                        >
                          <label
                            className="pf-c-check pf-c-select__menu-item"
                            onKeyDown={[Function]}
                          >
                            <input
                              checked={false}
                              className="pf-c-check__input"
                              disabled={false}
                              id="Mrs"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <span
                              className="pf-c-check__label"
                            >
                              Mrs
                            </span>
                          </label>
                        </SelectOption>
                        <SelectOption
                          className=""
                          component="button"
                          index={6}
                          isChecked={false}
                          isDisabled={false}
                          isFocused={false}
                          isNoResultsOption={false}
                          isPlaceholder={false}
                          isSelected={false}
                          key="02"
                          keyHandler={[Function]}
                          onClick={[Function]}
                          sendRef={[Function]}
                          value="Ms"
                        >
                          <label
                            className="pf-c-check pf-c-select__menu-item"
                            onKeyDown={[Function]}
                          >
                            <input
                              checked={false}
                              className="pf-c-check__input"
                              disabled={false}
                              id="Ms"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <span
                              className="pf-c-check__label"
                            >
                              Ms
                            </span>
                          </label>
                        </SelectOption>
                        <SelectOption
                          className=""
                          component="button"
                          index={7}
                          isChecked={false}
                          isDisabled={false}
                          isFocused={false}
                          isNoResultsOption={false}
                          isPlaceholder={false}
                          isSelected={false}
                          key="03"
                          keyHandler={[Function]}
                          onClick={[Function]}
                          sendRef={[Function]}
                          value="Other"
                        >
                          <label
                            className="pf-c-check pf-c-select__menu-item"
                            onKeyDown={[Function]}
                          >
                            <input
                              checked={false}
                              className="pf-c-check__input"
                              disabled={false}
                              id="Other"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <span
                              className="pf-c-check__label"
                            >
                              Other
                            </span>
                          </label>
                        </SelectOption>
                      </fieldset>
                    </div>
                  </SelectGroup>
                </fieldset>
              </div>
            </div>
          </FocusTrap>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`checkbox select renders checkbox select selections properly 1`] = `
<Component
  onToggle={[MockFunction]}
  selections={
    Array [
      <SelectOption
        className=""
        component="button"
        index={0}
        isChecked={false}
        isDisabled={false}
        isFocused={false}
        isNoResultsOption={false}
        isPlaceholder={false}
        isSelected={false}
        keyHandler={[Function]}
        onClick={[Function]}
        sendRef={[Function]}
        value="Mr"
      />,
    ]
  }
  toggleId="checkbox-select-selections"
>>>>>>> upstream/master
  variant="checkbox"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={14}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "onToggle": [MockFunction],
        "selections": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
        ],
        "toggleId": "checkbox-select-selections",
        "variant": "checkbox",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-5"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-5"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
<<<<<<< HEAD
      onClose={[Function]}
      onEnter={[Function]}
=======
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
>>>>>>> upstream/master
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="14"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <button
              aria-expanded="true"
              aria-labelledby=" pf-toggle-id-5"
              class="pf-c-select__toggle"
              id="pf-toggle-id-5"
              type="button"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections={
        Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
        ]
      }
      toggleIcon={null}
      toggleId="checkbox-select-selections"
      variant="checkbox"
      width=""
    >
      <div
        className="pf-c-select"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-selections"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-selections"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <button
                  aria-expanded="false"
                  aria-labelledby=" checkbox-select-selections"
                  class="pf-c-select__toggle"
                  id="checkbox-select-selections"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    />
                    <div
                      class="pf-c-select__toggle-badge"
                    >
                      <span
                        class="pf-c-badge pf-m-read"
                      >
                        1
                      </span>
                    </div>
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
              </div>,
            }
          }
          type="button"
          variant="checkbox"
        >
          <button
            aria-expanded={false}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-selections"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-selections"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <span
                className="pf-c-select__toggle-text"
              />
              <div
                className="pf-c-select__toggle-badge"
              >
                <span
                  className="pf-c-badge pf-m-read"
                >
                  1
                </span>
              </div>
            </div>
            <CaretDownIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
              title={null}
>>>>>>> upstream/master
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
<<<<<<< HEAD
            </button>
            <div>
              <div
                class="pf-c-select__menu"
              >
                <fieldset
                  aria-label=""
                  class="pf-c-form__fieldset"
                >
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Mr: User One"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Mr: User One
                    </span>
                  </label>
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Mrs: New User"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Mrs: New User
                    </span>
                  </label>
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Ms: Test Three"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Ms: Test Three
                    </span>
                  </label>
                </fieldset>
              </div>
            </div>
          </div>,
        }
=======
            </CaretDownIcon>
          </button>
        </SelectToggle>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`checkbox select renders checkbox select selections properly when isCheckboxSelectionBadgeHidden is true 1`] = `
<Component
  isCheckboxSelectionBadgeHidden={true}
  onToggle={[MockFunction]}
  selections={
    Array [
      <SelectOption
        className=""
        component="button"
        index={0}
        isChecked={false}
        isDisabled={false}
        isFocused={false}
        isNoResultsOption={false}
        isPlaceholder={false}
        isSelected={false}
        keyHandler={[Function]}
        onClick={[Function]}
        sendRef={[Function]}
        value="Mr"
      />,
    ]
  }
  toggleId="checkbox-select-hidden-badge"
  variant="checkbox"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isCheckboxSelectionBadgeHidden": true,
        "onToggle": [MockFunction],
        "selections": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
        ],
        "toggleId": "checkbox-select-hidden-badge",
        "variant": "checkbox",
>>>>>>> upstream/master
      }
      type="button"
      variant="checkbox"
    >
      <button
        aria-expanded={true}
        aria-haspopup={null}
        aria-labelledby=" pf-toggle-id-5"
        className="pf-c-select__toggle"
        disabled={false}
        id="pf-toggle-id-5"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      checked={Array []}
      className=""
<<<<<<< HEAD
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCheckboxSelectionBadgeHidden={true}
      isCreatable={false}
      isDisabled={false}
      isExpanded={false}
      isGrouped={false}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections={
        Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
        ]
      }
      toggleIcon={null}
      toggleId="checkbox-select-hidden-badge"
      variant="checkbox"
      width=""
>>>>>>> upstream/master
    >
      <FocusTrap
        active={true}
        focusTrapOptions={
          Object {
            "clickOutsideDeactivates": true,
          }
        }
        paused={false}
      >
<<<<<<< HEAD
        <div>
          <div
            className="pf-c-select__menu"
          >
            <fieldset
              aria-label=""
              aria-labelledby={null}
              className="pf-c-form__fieldset"
            >
              <SelectOption
                className=""
                component="button"
                index={0}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$0"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value={
                  User {
                    "compareTo": [Function],
                    "firstName": "User",
                    "lastName": "One",
                    "title": "Mr",
                    "toString": [Function],
                  }
                }
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
=======
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-hidden-badge"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-hidden-badge"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <button
                  aria-expanded="false"
                  aria-labelledby=" checkbox-select-hidden-badge"
                  class="pf-c-select__toggle"
                  id="checkbox-select-hidden-badge"
                  type="button"
>>>>>>> upstream/master
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Mr: User One"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
<<<<<<< HEAD
                    Mr: User One
                  </span>
                </label>
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={1}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$1"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value={
                  User {
                    "compareTo": [Function],
                    "firstName": "New",
                    "lastName": "User",
                    "title": "Mrs",
                    "toString": [Function],
                  }
                }
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Mrs: New User"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Mrs: New User
                  </span>
                </label>
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={2}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$2"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value={
                  User {
                    "compareTo": [Function],
                    "firstName": "Test",
                    "lastName": "Three",
                    "title": "Ms",
                    "toString": [Function],
=======
                    <span
                      class="pf-c-select__toggle-text"
                    />
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
              </div>,
            }
          }
          type="button"
          variant="checkbox"
        >
          <button
            aria-expanded={false}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-hidden-badge"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-hidden-badge"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <span
                className="pf-c-select__toggle-text"
              />
            </div>
            <CaretDownIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
              title={null}
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
>>>>>>> upstream/master
                  }
                }
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Ms: Test Three"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Ms: Test Three
                  </span>
                </label>
              </SelectOption>
            </fieldset>
          </div>
        </div>
      </FocusTrap>
    </SelectMenu>
  </div>
</Select>
`;

<<<<<<< HEAD
exports[`checkbox select renders expanded with filtering successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={true}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[MockFunction]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
=======
exports[`checkbox select renders closed successfully - old classes 1`] = `
<Component
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="checkbox-select-closed-old"
>>>>>>> upstream/master
  variant="checkbox"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={12}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <CheckboxSelectOption
            className=""
            index={0}
            isChecked={false}
            isDisabled={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <CheckboxSelectOption
            className=""
            index={0}
            isChecked={false}
            isDisabled={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <CheckboxSelectOption
            className=""
            index={0}
            isChecked={false}
            isDisabled={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <CheckboxSelectOption
            className=""
            index={0}
            isChecked={false}
            isDisabled={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "checkbox-select-closed-old",
        "variant": "checkbox",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-4"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={true}
      id="pf-toggle-id-4"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={false}
      isGrouped={false}
>>>>>>> upstream/master
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="12"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              
              <button
                aria-expanded="true"
                aria-label="Options menu"
                aria-labelledby=" pf-toggle-id-4"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="pf-toggle-id-4"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </button>
            </div>
            <div>
              <div
                class="pf-c-select__menu"
              >
                <fieldset
                  aria-label=""
                  class="pf-c-form__fieldset"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="checkbox-select-closed-old"
      variant="checkbox"
      width=""
    >
      <div
        className="pf-c-select"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-closed-old"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-closed-old"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <button
                  aria-expanded="false"
                  aria-labelledby=" checkbox-select-closed-old"
                  class="pf-c-select__toggle"
                  id="checkbox-select-closed-old"
                  type="button"
>>>>>>> upstream/master
                >
                  <div
                    class="pf-c-select__menu-input"
                  >
                    <input
                      autocomplete="off"
                      class="pf-c-form-control pf-m-search"
                      type="search"
                    />
<<<<<<< HEAD
                  </div>
                  <hr
                    class="pf-c-divider"
                  />
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Mr"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Mr
                    </span>
                  </label>
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Mrs"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Mrs
                    </span>
                  </label>
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Ms"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Ms
                    </span>
                  </label>
                  <label
                    class="pf-c-check pf-c-select__menu-item"
                  >
                    <input
                      class="pf-c-check__input"
                      id="Other"
                      type="checkbox"
                    />
                    <span
                      class="pf-c-check__label"
                    >
                      Other
                    </span>
                  </label>
                </fieldset>
              </div>
            </div>
          </div>,
        }
      }
      type="button"
      variant="checkbox"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <button
          aria-expanded={true}
          aria-haspopup={null}
          aria-label="Options menu"
          aria-labelledby=" pf-toggle-id-4"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="pf-toggle-id-4"
          onClick={[Function]}
=======
                  </svg>
                </button>
              </div>,
            }
          }
>>>>>>> upstream/master
          type="button"
        >
<<<<<<< HEAD
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
=======
          <button
            aria-expanded={false}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-closed-old"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-closed-old"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
<<<<<<< HEAD
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
=======
            </CaretDownIcon>
          </button>
        </SelectToggle>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`checkbox select renders closed successfully 1`] = `
<Component
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="checkbox-select-closed"
  variant="checkbox"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "checkbox-select-closed",
        "variant": "checkbox",
      }
    }
    consumerContext={null}
  >
    <Select
      aria-label=""
      ariaLabelClear="Clear all"
      ariaLabelRemove="Remove"
      ariaLabelToggle="Options menu"
      ariaLabelTypeAhead=""
      ariaLabelledBy=""
      className=""
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={false}
      isGrouped={false}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="checkbox-select-closed"
      variant="checkbox"
      width=""
    >
      <div
        className="pf-c-select"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-closed"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-closed"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <button
                  aria-expanded="false"
                  aria-labelledby=" checkbox-select-closed"
                  class="pf-c-select__toggle"
                  id="checkbox-select-closed"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    />
                    
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
              </div>,
            }
          }
          type="button"
          variant="checkbox"
        >
          <button
            aria-expanded={false}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-closed"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-closed"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <span
                className="pf-c-select__toggle-text"
              />
            </div>
            <CaretDownIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
              title={null}
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </CaretDownIcon>
          </button>
        </SelectToggle>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`checkbox select renders expanded successfully - old classes 1`] = `
<Component
  isExpanded={true}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="checkbox-select-expanded-old"
  variant="checkbox"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <CheckboxSelectOption
            className=""
            index={0}
            isChecked={false}
            isDisabled={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <CheckboxSelectOption
            className=""
            index={0}
            isChecked={false}
            isDisabled={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <CheckboxSelectOption
            className=""
            index={0}
            isChecked={false}
            isDisabled={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <CheckboxSelectOption
            className=""
            index={0}
            isChecked={false}
            isDisabled={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "checkbox-select-expanded-old",
        "variant": "checkbox",
      }
    }
    consumerContext={null}
  >
    <Select
      aria-label=""
      ariaLabelClear="Clear all"
      ariaLabelRemove="Remove"
      ariaLabelToggle="Options menu"
      ariaLabelTypeAhead=""
      ariaLabelledBy=""
      className=""
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={true}
      isGrouped={false}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="checkbox-select-expanded-old"
      variant="checkbox"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-expanded-old"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-expanded-old"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-labelledby=" checkbox-select-expanded-old"
                  class="pf-c-select__toggle"
                  id="checkbox-select-expanded-old"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    />
                    
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
                <div>
                  <div
                    class="pf-c-select__menu"
                  >
                    <fieldset
                      aria-label=""
                      class="pf-c-form__fieldset"
                    >
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mr"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mr
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mrs"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mrs
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Ms"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Ms
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Other"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Other
                        </span>
                      </label>
                    </fieldset>
                  </div>
                </div>
              </div>,
            }
          }
          type="button"
          variant="checkbox"
        >
          <button
            aria-expanded={true}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-expanded-old"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-expanded-old"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <span
                className="pf-c-select__toggle-text"
              />
            </div>
            <CaretDownIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
              title={null}
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          checked={Array []}
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <FocusTrap
            active={true}
            focusTrapOptions={
              Object {
                "clickOutsideDeactivates": true,
              }
            }
            paused={false}
          >
            <div>
              <div
                className="pf-c-select__menu"
              >
                <fieldset
                  aria-label=""
                  aria-labelledby={null}
                  className="pf-c-form__fieldset"
                >
                  <CheckboxSelectOption
                    className=""
                    index={0}
                    isChecked={false}
                    isDisabled={false}
                    key=".$0"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Mr"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Mr"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Mr
                      </span>
                    </label>
                  </CheckboxSelectOption>
                  <CheckboxSelectOption
                    className=""
                    index={1}
                    isChecked={false}
                    isDisabled={false}
                    key=".$1"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Mrs"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Mrs"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Mrs
                      </span>
                    </label>
                  </CheckboxSelectOption>
                  <CheckboxSelectOption
                    className=""
                    index={2}
                    isChecked={false}
                    isDisabled={false}
                    key=".$2"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Ms"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Ms"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Ms
                      </span>
                    </label>
                  </CheckboxSelectOption>
                  <CheckboxSelectOption
                    className=""
                    index={3}
                    isChecked={false}
                    isDisabled={false}
                    key=".$3"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Other"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Other"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Other
                      </span>
                    </label>
                  </CheckboxSelectOption>
                </fieldset>
              </div>
            </div>
          </FocusTrap>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`checkbox select renders expanded successfully 1`] = `
<Component
  isExpanded={true}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="checkbox-select-expanded"
  variant="checkbox"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "checkbox-select-expanded",
        "variant": "checkbox",
      }
    }
    consumerContext={null}
  >
    <Select
      aria-label=""
      ariaLabelClear="Clear all"
      ariaLabelRemove="Remove"
      ariaLabelToggle="Options menu"
      ariaLabelTypeAhead=""
      ariaLabelledBy=""
      className=""
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={true}
      isGrouped={false}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="checkbox-select-expanded"
      variant="checkbox"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-expanded"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-expanded"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-labelledby=" checkbox-select-expanded"
                  class="pf-c-select__toggle"
                  id="checkbox-select-expanded"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    />
                    
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
                <div>
                  <div
                    class="pf-c-select__menu"
                  >
                    <fieldset
                      aria-label=""
                      class="pf-c-form__fieldset"
                    >
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mr"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mr
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mrs"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mrs
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Ms"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Ms
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Other"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Other
                        </span>
                      </label>
                    </fieldset>
                  </div>
                </div>
              </div>,
            }
          }
          type="button"
          variant="checkbox"
        >
          <button
            aria-expanded={true}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-expanded"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-expanded"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <span
                className="pf-c-select__toggle-text"
              />
            </div>
            <CaretDownIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
              title={null}
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          checked={Array []}
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <FocusTrap
            active={true}
            focusTrapOptions={
              Object {
                "clickOutsideDeactivates": true,
              }
            }
            paused={false}
          >
            <div>
              <div
                className="pf-c-select__menu"
              >
                <fieldset
                  aria-label=""
                  aria-labelledby={null}
                  className="pf-c-form__fieldset"
                >
                  <SelectOption
                    className=""
                    component="button"
                    index={0}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$00"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Mr"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Mr"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Mr
                      </span>
                    </label>
                  </SelectOption>
                  <SelectOption
                    className=""
                    component="button"
                    index={1}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$01"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Mrs"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Mrs"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Mrs
                      </span>
                    </label>
                  </SelectOption>
                  <SelectOption
                    className=""
                    component="button"
                    index={2}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$02"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Ms"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Ms"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Ms
                      </span>
                    </label>
                  </SelectOption>
                  <SelectOption
                    className=""
                    component="button"
                    index={3}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$03"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Other"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Other"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Other
                      </span>
                    </label>
                  </SelectOption>
                </fieldset>
              </div>
            </div>
          </FocusTrap>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`checkbox select renders expanded successfully with custom objects 1`] = `
<Component
  isExpanded={true}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="checkbox-select-expanded-custom"
  variant="checkbox"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value={
              User {
                "compareTo": [Function],
                "firstName": "User",
                "lastName": "One",
                "title": "Mr",
                "toString": [Function],
              }
            }
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value={
              User {
                "compareTo": [Function],
                "firstName": "New",
                "lastName": "User",
                "title": "Mrs",
                "toString": [Function],
              }
            }
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value={
              User {
                "compareTo": [Function],
                "firstName": "Test",
                "lastName": "Three",
                "title": "Ms",
                "toString": [Function],
              }
            }
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "checkbox-select-expanded-custom",
        "variant": "checkbox",
      }
    }
    consumerContext={null}
  >
    <Select
>>>>>>> upstream/master
      aria-label=""
      aria-labelledby=""
      checked={Array []}
      className=""
<<<<<<< HEAD
      hasInlineFilter={true}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={true}
      isGrouped={false}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="checkbox-select-expanded-custom"
      variant="checkbox"
      width=""
>>>>>>> upstream/master
    >
      <FocusTrap
        active={true}
        focusTrapOptions={
          Object {
            "clickOutsideDeactivates": true,
          }
        }
        paused={false}
      >
<<<<<<< HEAD
        <div>
          <div
            className="pf-c-select__menu"
          >
            <fieldset
              aria-label=""
              aria-labelledby={null}
              className="pf-c-form__fieldset"
            >
              <div
                className="pf-c-select__menu-input"
                key="inline-filter"
              >
                <input
                  autoComplete="off"
                  className="pf-c-form-control pf-m-search"
                  key="inline-filter-input"
                  onChange={[Function]}
                  onKeyDown={[Function]}
                  type="search"
                />
              </div>
              <Divider
                key="inline-filter-divider"
              >
                <hr
                  className="pf-c-divider"
                />
              </Divider>
              <SelectOption
                className=""
                component="button"
                index={1}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$1"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Mr"
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
=======
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-expanded-custom"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="checkbox-select-expanded-custom"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-labelledby=" checkbox-select-expanded-custom"
                  class="pf-c-select__toggle"
                  id="checkbox-select-expanded-custom"
                  type="button"
>>>>>>> upstream/master
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Mr"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Mr
                  </span>
                </label>
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={2}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$2"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Mrs"
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Mrs"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
<<<<<<< HEAD
                    Mrs
                  </span>
                </label>
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={3}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$3"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Ms"
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Ms"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Ms
                  </span>
                </label>
              </SelectOption>
              <SelectOption
                className=""
                component="button"
                index={4}
                isChecked={false}
                isDisabled={false}
                isFocused={false}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key=".$4"
                keyHandler={[Function]}
                onClick={[Function]}
                sendRef={[Function]}
                value="Other"
              >
                <label
                  className="pf-c-check pf-c-select__menu-item"
                  onKeyDown={[Function]}
                >
                  <input
                    checked={false}
                    className="pf-c-check__input"
                    disabled={false}
                    id="Other"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf-c-check__label"
                  >
                    Other
                  </span>
                </label>
              </SelectOption>
            </fieldset>
          </div>
        </div>
      </FocusTrap>
    </SelectMenu>
  </div>
</Select>
`;

exports[`checkbox select renders expanded with filtering successfully 2`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={true}
  isCreatable={false}
  isDisabled={false}
  isExpanded={true}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[MockFunction]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="checkbox-select-expanded-filtered"
  typeAheadAriaLabel=""
  variant="checkbox"
  width=""
>
  <div
    className="pf-c-select"
    data-ouia-component-id={13}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" checkbox-select-expanded-filtered"
      className=""
      handleTypeaheadKeys={[Function]}
      hasClearButton={true}
      id="checkbox-select-expanded-filtered"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="13"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
                    <fieldset
                      aria-label=""
                      class="pf-c-form__fieldset"
                    >
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mr: User One"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mr: User One
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mrs: New User"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mrs: New User
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Ms: Test Three"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Ms: Test Three
                        </span>
                      </label>
                    </fieldset>
                  </div>
                </div>
              </div>,
            }
          }
          type="button"
          variant="checkbox"
        >
          <button
            aria-expanded={true}
            aria-haspopup={null}
            aria-labelledby=" checkbox-select-expanded-custom"
            className="pf-c-select__toggle"
            disabled={false}
            id="checkbox-select-expanded-custom"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              
              <button
                aria-expanded="false"
                aria-label="Options menu"
                aria-labelledby=" checkbox-select-expanded-filtered"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="checkbox-select-expanded-filtered"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </button>
            </div>
          </div>,
        }
      }
      type="button"
      variant="checkbox"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <button
          aria-expanded={false}
          aria-haspopup={null}
          aria-label="Options menu"
          aria-labelledby=" checkbox-select-expanded-filtered"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="checkbox-select-expanded-filtered"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
<<<<<<< HEAD
            </SVGIcon>
          </CaretDownIcon>
        </button>
=======
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          checked={Array []}
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <FocusTrap
            active={true}
            focusTrapOptions={
              Object {
                "clickOutsideDeactivates": true,
              }
            }
            paused={false}
          >
            <div>
              <div
                className="pf-c-select__menu"
              >
                <fieldset
                  aria-label=""
                  aria-labelledby={null}
                  className="pf-c-form__fieldset"
                >
                  <SelectOption
                    className=""
                    component="button"
                    index={0}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$0"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value={
                      User {
                        "compareTo": [Function],
                        "firstName": "User",
                        "lastName": "One",
                        "title": "Mr",
                        "toString": [Function],
                      }
                    }
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Mr: User One"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Mr: User One
                      </span>
                    </label>
                  </SelectOption>
                  <SelectOption
                    className=""
                    component="button"
                    index={1}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$1"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value={
                      User {
                        "compareTo": [Function],
                        "firstName": "New",
                        "lastName": "User",
                        "title": "Mrs",
                        "toString": [Function],
                      }
                    }
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Mrs: New User"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Mrs: New User
                      </span>
                    </label>
                  </SelectOption>
                  <SelectOption
                    className=""
                    component="button"
                    index={2}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$2"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value={
                      User {
                        "compareTo": [Function],
                        "firstName": "Test",
                        "lastName": "Three",
                        "title": "Ms",
                        "toString": [Function],
                      }
                    }
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Ms: Test Three"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Ms: Test Three
                      </span>
                    </label>
                  </SelectOption>
                </fieldset>
              </div>
            </div>
          </FocusTrap>
        </SelectMenu>
>>>>>>> upstream/master
      </div>
    </SelectToggle>
  </div>
</Select>
`;

<<<<<<< HEAD
exports[`select custom select filter filters properly 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={[Function]}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="custom-select-filters"
  typeAheadAriaLabel=""
  variant="typeahead"
  width=""
=======
exports[`checkbox select renders expanded with filtering successfully 1`] = `
<Component
  hasInlineFilter={true}
  isExpanded={true}
  onClear={[MockFunction]}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="checkbox-select-expanded-filtered"
  variant="checkbox"
>>>>>>> upstream/master
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={6}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "hasInlineFilter": true,
        "isExpanded": true,
        "onClear": [MockFunction],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "checkbox-select-expanded-filtered",
        "variant": "checkbox",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" custom-select-filters"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="custom-select-filters"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={true}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
<<<<<<< HEAD
      onClose={[Function]}
      onEnter={[Function]}
=======
      noResultsFoundText="No results found"
      onClear={[MockFunction]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
>>>>>>> upstream/master
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="6"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="custom-select-filters-select-typeahead"
                  placeholder=""
                  type="text"
                  value="r"
                />
              </div>
              <button
                aria-label="Clear all"
                class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                    transform=""
                  />
                </svg>
              </button>
              <button
                aria-expanded="true"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" custom-select-filters"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="custom-select-filters"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </button>
            </div>
            <ul
              class="pf-c-select__menu"
              role="listbox"
            >
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mr-0"
                  role="option"
                  type="button"
                >
                  Mr
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mrs-1"
                  role="option"
                  type="button"
                >
                  Mrs
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Other-2"
                  role="option"
                  type="button"
                >
                  Other
                </button>
              </li>
            </ul>
          </div>,
        }
      }
      type="button"
      variant="typeahead"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="custom-select-filters-select-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value="r"
          />
        </div>
        <button
          aria-label="Clear all"
          className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          <TimesCircleIcon
            aria-hidden={true}
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="checkbox-select-expanded-filtered"
      variant="checkbox"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" checkbox-select-expanded-filtered"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={true}
          id="checkbox-select-expanded-filtered"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    />
                    
                  </div>
                  
                  <button
                    aria-expanded="true"
                    aria-label="Options menu"
                    aria-labelledby=" checkbox-select-expanded-filtered"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="checkbox-select-expanded-filtered"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
                <div>
                  <div
                    class="pf-c-select__menu"
                  >
                    <fieldset
                      aria-label=""
                      class="pf-c-form__fieldset"
                    >
                      <div
                        class="pf-c-select__menu-input"
                      >
                        <input
                          autocomplete="off"
                          class="pf-c-form-control pf-m-search"
                          type="search"
                        />
                      </div>
                      <hr
                        class="pf-c-divider"
                      />
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mr"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mr
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Mrs"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Mrs
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Ms"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Ms
                        </span>
                      </label>
                      <label
                        class="pf-c-check pf-c-select__menu-item"
                      >
                        <input
                          class="pf-c-check__input"
                          id="Other"
                          type="checkbox"
                        />
                        <span
                          class="pf-c-check__label"
                        >
                          Other
                        </span>
                      </label>
                    </fieldset>
                  </div>
                </div>
              </div>,
            }
          }
          type="button"
          variant="checkbox"
        >
          <div
            className="pf-c-select__toggle pf-m-typeahead"
            onClick={[Function]}
            onKeyDown={[Function]}
>>>>>>> upstream/master
          >
            <SVGIcon
              aria-hidden={true}
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "TimesCircleIcon",
                  "svgPath": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
                  "transform": "",
                  "width": 512,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
<<<<<<< HEAD
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 512 512"
                width="1em"
              >
                <path
                  d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </TimesCircleIcon>
        </button>
        <button
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" custom-select-filters"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="custom-select-filters"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
=======
              <span
                className="pf-c-select__toggle-text"
              />
            </div>
            <button
              aria-expanded={true}
              aria-haspopup={null}
              aria-label="Options menu"
              aria-labelledby=" checkbox-select-expanded-filtered"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="checkbox-select-expanded-filtered"
              onClick={[Function]}
              type="button"
>>>>>>> upstream/master
            >
              <CaretDownIcon
                className="pf-c-select__toggle-arrow"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
<<<<<<< HEAD
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
          component="button"
          id="Mr-0"
          index={0}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$00"
=======
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  className="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </CaretDownIcon>
            </button>
          </div>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          checked={Array []}
          className=""
          hasInlineFilter={true}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
>>>>>>> upstream/master
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mr"
        >
<<<<<<< HEAD
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mr-0"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mr
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Mrs-1"
          index={1}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$01"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mrs"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mrs-1"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mrs
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Other-2"
          index={2}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$03"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Other"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Other-2"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Other
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
=======
          <FocusTrap
            active={true}
            focusTrapOptions={
              Object {
                "clickOutsideDeactivates": true,
              }
            }
            paused={false}
          >
            <div>
              <div
                className="pf-c-select__menu"
              >
                <fieldset
                  aria-label=""
                  aria-labelledby={null}
                  className="pf-c-form__fieldset"
                >
                  <div
                    className="pf-c-select__menu-input"
                    key="inline-filter"
                  >
                    <input
                      autoComplete="off"
                      className="pf-c-form-control pf-m-search"
                      key="inline-filter-input"
                      onChange={[Function]}
                      onKeyDown={[Function]}
                      type="search"
                    />
                  </div>
                  <Divider
                    key="inline-filter-divider"
                  >
                    <hr
                      className="pf-c-divider"
                    />
                  </Divider>
                  <SelectOption
                    className=""
                    component="button"
                    index={1}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$1"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Mr"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Mr"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Mr
                      </span>
                    </label>
                  </SelectOption>
                  <SelectOption
                    className=""
                    component="button"
                    index={2}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$2"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Mrs"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Mrs"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Mrs
                      </span>
                    </label>
                  </SelectOption>
                  <SelectOption
                    className=""
                    component="button"
                    index={3}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$3"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Ms"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Ms"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Ms
                      </span>
                    </label>
                  </SelectOption>
                  <SelectOption
                    className=""
                    component="button"
                    index={4}
                    isChecked={false}
                    isDisabled={false}
                    isFocused={false}
                    isNoResultsOption={false}
                    isPlaceholder={false}
                    isSelected={false}
                    key=".$4"
                    keyHandler={[Function]}
                    onClick={[Function]}
                    sendRef={[Function]}
                    value="Other"
                  >
                    <label
                      className="pf-c-check pf-c-select__menu-item"
                      onKeyDown={[Function]}
                    >
                      <input
                        checked={false}
                        className="pf-c-check__input"
                        disabled={false}
                        id="Other"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <span
                        className="pf-c-check__label"
                      >
                        Other
                      </span>
                    </label>
                  </SelectOption>
                </fieldset>
              </div>
            </div>
          </FocusTrap>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
>>>>>>> upstream/master
`;

exports[`select renders select groups successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={true}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
  variant="single"
  width=""
=======
  toggleId="custom-select-filters"
  variant="typeahead"
>>>>>>> upstream/master
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={7}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onFilter": [Function],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "custom-select-filters",
        "variant": "typeahead",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-2"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-2"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="7"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <button
              aria-expanded="true"
              aria-haspopup="listbox"
              aria-labelledby=" pf-toggle-id-2"
              class="pf-c-select__toggle"
              id="pf-toggle-id-2"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </button>
            <ul
              class="pf-c-select__menu"
              role="listbox"
            >
              <div
                class="pf-c-select__menu-group"
                id="-0"
                index="0"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="custom-select-filters"
      variant="typeahead"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" custom-select-filters"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="custom-select-filters"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
>>>>>>> upstream/master
              >
                <div
                  aria-hidden="true"
                  class="pf-c-select__menu-group-title"
                  id=""
                >
                  group 1
                </div>
                <li
                  role="presentation"
                >
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
<<<<<<< HEAD
                    Mr
                  </button>
                </li>
                <li
                  role="presentation"
                >
=======
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="custom-select-filters-select-typeahead"
                      placeholder=""
                      type="text"
                      value="r"
                    />
                  </div>
>>>>>>> upstream/master
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
                    Mrs
                  </button>
                </li>
                <li
                  role="presentation"
                >
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
                    Ms
                  </button>
                </li>
                <li
                  role="presentation"
                >
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
                    Other
                  </button>
                </li>
              </div>
              <div
                class="pf-c-select__menu-group"
                id="-1"
                index="1"
              >
                <div
                  aria-hidden="true"
                  class="pf-c-select__menu-group-title"
                  id=""
                >
                  group 2
                </div>
                <li
                  role="presentation"
                >
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
                    Mr
                  </button>
                </li>
                <li
                  role="presentation"
                >
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
                    Mrs
                  </button>
                </li>
                <li
                  role="presentation"
                >
                  <button
<<<<<<< HEAD
                    class="pf-c-select__menu-item"
                    role="option"
=======
                    aria-expanded="true"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" custom-select-filters"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="custom-select-filters"
>>>>>>> upstream/master
                    type="button"
                  >
                    Ms
                  </button>
                </li>
                <li
                  role="presentation"
                >
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
                    Other
                  </button>
                </li>
              </div>
            </ul>
          </div>,
        }
      }
      type="button"
      variant="single"
    >
      <button
        aria-expanded={true}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-2"
        className="pf-c-select__toggle"
        disabled={false}
        id="pf-toggle-id-2"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
<<<<<<< HEAD
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectGroup
          id="-0"
          index={0}
          isSelected={false}
          key=".0"
=======
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="custom-select-filters-select-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value="r"
              />
            </div>
            <button
              aria-label="Clear all"
              className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <TimesCircleIcon
                aria-hidden={true}
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                    transform=""
                  />
                </svg>
              </TimesCircleIcon>
            </button>
            <button
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" custom-select-filters"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="custom-select-filters"
              onClick={[Function]}
              type="button"
            >
              <CaretDownIcon
                className="pf-c-select__toggle-arrow"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
              >
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  className="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </CaretDownIcon>
            </button>
          </div>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
>>>>>>> upstream/master
          keyHandler={[Function]}
          label="group 1"
          sendRef={[Function]}
        >
          <div
            className="pf-c-select__menu-group"
            id="-0"
            index={0}
            isSelected={false}
            keyHandler={[Function]}
            sendRef={[Function]}
          >
            <div
              aria-hidden={true}
              className="pf-c-select__menu-group-title"
              id=""
            >
              group 1
            </div>
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
<<<<<<< HEAD
              isFocused={false}
=======
              isFocused={null}
>>>>>>> upstream/master
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key="00"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Mr
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
<<<<<<< HEAD
              isFocused={false}
=======
              isFocused={null}
>>>>>>> upstream/master
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key="01"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
<<<<<<< HEAD
=======
                  id="Mrs-1"
>>>>>>> upstream/master
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Mrs
                </button>
              </li>
            </SelectOption>
<<<<<<< HEAD
=======
            <SelectOption
              className=""
              component="button"
              id="Other-2"
              index={2}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$03"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  id="Other-2"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Other
                </button>
              </li>
            </SelectOption>
          </ul>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`select renders select groups successfully 1`] = `
<Component
  isExpanded={true}
  isGrouped={true}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="single-select-groups"
  variant="single"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectGroup
            label="group 1"
          >
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            />
          </SelectGroup>,
          <SelectGroup
            label="group 2"
          >
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            />
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            />
>>>>>>> upstream/master
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key="02"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Ms
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key="03"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
<<<<<<< HEAD
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
=======
            />
          </SelectGroup>,
        ],
        "isExpanded": true,
        "isGrouped": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "single-select-groups",
        "variant": "single",
      }
    }
    consumerContext={null}
  >
    <Select
      aria-label=""
      ariaLabelClear="Clear all"
      ariaLabelRemove="Remove"
      ariaLabelToggle="Options menu"
      ariaLabelTypeAhead=""
      ariaLabelledBy=""
      className=""
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={true}
      isGrouped={true}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="single-select-groups"
      variant="single"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" single-select-groups"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="single-select-groups"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-haspopup="listbox"
                  aria-labelledby=" single-select-groups"
                  class="pf-c-select__toggle"
                  id="single-select-groups"
>>>>>>> upstream/master
                  type="button"
                >
                  Other
                </button>
<<<<<<< HEAD
              </li>
            </SelectOption>
          </div>
        </SelectGroup>
        <SelectGroup
          id="-1"
          index={1}
          isSelected={false}
          key=".1"
          keyHandler={[Function]}
          label="group 2"
          sendRef={[Function]}
        >
          <div
            className="pf-c-select__menu-group"
            id="-1"
            index={1}
            isSelected={false}
            keyHandler={[Function]}
            sendRef={[Function]}
=======
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <div
                    class="pf-c-select__menu-group"
                  >
                    <div
                      aria-hidden="true"
                      class="pf-c-select__menu-group-title"
                      id="group-1"
                    >
                      group 1
                    </div>
                    <li
                      role="presentation"
                    >
                      <button
                        class="pf-c-select__menu-item"
                        id="Mr-0"
                        role="option"
                        type="button"
                      >
                        Mr
                      </button>
                    </li>
                    <li
                      role="presentation"
                    >
                      <button
                        class="pf-c-select__menu-item"
                        id="Mrs-1"
                        role="option"
                        type="button"
                      >
                        Mrs
                      </button>
                    </li>
                    <li
                      role="presentation"
                    >
                      <button
                        class="pf-c-select__menu-item"
                        id="Ms-2"
                        role="option"
                        type="button"
                      >
                        Ms
                      </button>
                    </li>
                    <li
                      role="presentation"
                    >
                      <button
                        class="pf-c-select__menu-item"
                        id="Other-3"
                        role="option"
                        type="button"
                      >
                        Other
                      </button>
                    </li>
                  </div>
                  <div
                    class="pf-c-select__menu-group"
                  >
                    <div
                      aria-hidden="true"
                      class="pf-c-select__menu-group-title"
                      id="group-2"
                    >
                      group 2
                    </div>
                    <li
                      role="presentation"
                    >
                      <button
                        class="pf-c-select__menu-item"
                        id="Mr-4"
                        role="option"
                        type="button"
                      >
                        Mr
                      </button>
                    </li>
                    <li
                      role="presentation"
                    >
                      <button
                        class="pf-c-select__menu-item"
                        id="Mrs-5"
                        role="option"
                        type="button"
                      >
                        Mrs
                      </button>
                    </li>
                    <li
                      role="presentation"
                    >
                      <button
                        class="pf-c-select__menu-item"
                        id="Ms-6"
                        role="option"
                        type="button"
                      >
                        Ms
                      </button>
                    </li>
                    <li
                      role="presentation"
                    >
                      <button
                        class="pf-c-select__menu-item"
                        id="Other-7"
                        role="option"
                        type="button"
                      >
                        Other
                      </button>
                    </li>
                  </div>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="single"
        >
          <button
            aria-expanded={true}
            aria-haspopup="listbox"
            aria-labelledby=" single-select-groups"
            className="pf-c-select__toggle"
            disabled={false}
            id="single-select-groups"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <div
              aria-hidden={true}
              className="pf-c-select__menu-group-title"
              id=""
            >
              group 2
            </div>
<<<<<<< HEAD
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key="00"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Mr
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key="01"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
=======
            <CaretDownIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
              title={null}
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={true}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <ul
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectGroup
              key=".0"
              label="group 1"
              titleId="group-1"
            >
              <div
                className="pf-c-select__menu-group"
              >
                <div
                  aria-hidden={true}
                  className="pf-c-select__menu-group-title"
                  id="group-1"
                >
                  group 1
                </div>
                <SelectOption
                  className=""
                  component="button"
                  id="Mr-0"
                  index={0}
                  isChecked={false}
                  isDisabled={false}
                  isFocused={false}
                  isNoResultsOption={false}
                  isPlaceholder={false}
                  isSelected={false}
                  key="00"
                  keyHandler={[Function]}
                  onClick={[Function]}
                  sendRef={[Function]}
                  value="Mr"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected={null}
                      className="pf-c-select__menu-item"
                      id="Mr-0"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="option"
                      type="button"
                    >
                      Mr
                    </button>
                  </li>
                </SelectOption>
                <SelectOption
                  className=""
                  component="button"
                  id="Mrs-1"
                  index={1}
                  isChecked={false}
                  isDisabled={false}
                  isFocused={false}
                  isNoResultsOption={false}
                  isPlaceholder={false}
                  isSelected={false}
                  key="01"
                  keyHandler={[Function]}
                  onClick={[Function]}
                  sendRef={[Function]}
                  value="Mrs"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected={null}
                      className="pf-c-select__menu-item"
                      id="Mrs-1"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="option"
                      type="button"
                    >
                      Mrs
                    </button>
                  </li>
                </SelectOption>
                <SelectOption
                  className=""
                  component="button"
                  id="Ms-2"
                  index={2}
                  isChecked={false}
                  isDisabled={false}
                  isFocused={false}
                  isNoResultsOption={false}
                  isPlaceholder={false}
                  isSelected={false}
                  key="02"
                  keyHandler={[Function]}
                  onClick={[Function]}
                  sendRef={[Function]}
                  value="Ms"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected={null}
                      className="pf-c-select__menu-item"
                      id="Ms-2"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="option"
                      type="button"
                    >
                      Ms
                    </button>
                  </li>
                </SelectOption>
                <SelectOption
                  className=""
                  component="button"
                  id="Other-3"
                  index={3}
                  isChecked={false}
                  isDisabled={false}
                  isFocused={false}
                  isNoResultsOption={false}
                  isPlaceholder={false}
                  isSelected={false}
                  key="03"
                  keyHandler={[Function]}
                  onClick={[Function]}
                  sendRef={[Function]}
                  value="Other"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected={null}
                      className="pf-c-select__menu-item"
                      id="Other-3"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="option"
                      type="button"
                    >
                      Other
                    </button>
                  </li>
                </SelectOption>
              </div>
            </SelectGroup>
            <SelectGroup
              key=".1"
              label="group 2"
              titleId="group-2"
            >
              <div
                className="pf-c-select__menu-group"
              >
                <div
                  aria-hidden={true}
                  className="pf-c-select__menu-group-title"
                  id="group-2"
                >
                  group 2
                </div>
                <SelectOption
                  className=""
                  component="button"
                  id="Mr-4"
                  index={4}
                  isChecked={false}
                  isDisabled={false}
                  isFocused={false}
                  isNoResultsOption={false}
                  isPlaceholder={false}
                  isSelected={false}
                  key="00"
                  keyHandler={[Function]}
                  onClick={[Function]}
                  sendRef={[Function]}
                  value="Mr"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected={null}
                      className="pf-c-select__menu-item"
                      id="Mr-4"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="option"
                      type="button"
                    >
                      Mr
                    </button>
                  </li>
                </SelectOption>
                <SelectOption
                  className=""
                  component="button"
                  id="Mrs-5"
                  index={5}
                  isChecked={false}
                  isDisabled={false}
                  isFocused={false}
                  isNoResultsOption={false}
                  isPlaceholder={false}
                  isSelected={false}
                  key="01"
                  keyHandler={[Function]}
>>>>>>> upstream/master
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
<<<<<<< HEAD
                  Mrs
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key="02"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
=======
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected={null}
                      className="pf-c-select__menu-item"
                      id="Mrs-5"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="option"
                      type="button"
                    >
                      Mrs
                    </button>
                  </li>
                </SelectOption>
                <SelectOption
                  className=""
                  component="button"
                  id="Ms-6"
                  index={6}
                  isChecked={false}
                  isDisabled={false}
                  isFocused={false}
                  isNoResultsOption={false}
                  isPlaceholder={false}
                  isSelected={false}
                  key="02"
                  keyHandler={[Function]}
>>>>>>> upstream/master
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
<<<<<<< HEAD
                  Ms
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key="03"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
=======
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected={null}
                      className="pf-c-select__menu-item"
                      id="Ms-6"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="option"
                      type="button"
                    >
                      Ms
                    </button>
                  </li>
                </SelectOption>
                <SelectOption
                  className=""
                  component="button"
                  id="Other-7"
                  index={7}
                  isChecked={false}
                  isDisabled={false}
                  isFocused={false}
                  isNoResultsOption={false}
                  isPlaceholder={false}
                  isSelected={false}
                  key="03"
                  keyHandler={[Function]}
>>>>>>> upstream/master
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
<<<<<<< HEAD
                  Other
                </button>
              </li>
            </SelectOption>
          </div>
        </SelectGroup>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`select renders up direction successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
=======
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected={null}
                      className="pf-c-select__menu-item"
                      id="Other-7"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="option"
                      type="button"
                    >
                      Other
                    </button>
                  </li>
                </SelectOption>
              </div>
            </SelectGroup>
          </ul>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`select renders up direction successfully 1`] = `
<Component
>>>>>>> upstream/master
  direction="up"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="select-up"
  typeAheadAriaLabel=""
=======
  toggleId="select-up"
>>>>>>> upstream/master
  variant="single"
  width=""
>
  <div
    className="pf-c-select pf-m-top"
    data-ouia-component-id={4}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "direction": "up",
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "select-up",
        "variant": "single",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" select-up"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="select-up"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="up"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-top"
            data-ouia-component-id="4"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="select-up"
      variant="single"
      width=""
    >
      <div
        className="pf-c-select pf-m-top"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" select-up"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="select-up"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-top"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="listbox"
                  aria-labelledby=" select-up"
                  class="pf-c-select__toggle"
                  id="select-up"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    >
                      Mr
                    </span>
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
              </div>,
            }
          }
          type="button"
          variant="single"
        >
          <button
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-labelledby=" select-up"
            className="pf-c-select__toggle"
            disabled={false}
            id="select-up"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <button
              aria-expanded="false"
              aria-haspopup="listbox"
              aria-labelledby=" select-up"
              class="pf-c-select__toggle"
              id="select-up"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                >
                  Mr
                </span>
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </button>
          </div>,
        }
      }
      type="button"
      variant="single"
    >
      <button
        aria-expanded={false}
        aria-haspopup="listbox"
        aria-labelledby=" select-up"
        className="pf-c-select__toggle"
        disabled={false}
        id="select-up"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          >
            Mr
          </span>
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`select single select renders closed successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="single-select-closed"
  typeAheadAriaLabel=""
=======
  toggleId="single-select-closed"
>>>>>>> upstream/master
  variant="single"
  width=""
>
  <div
    className="pf-c-select"
    data-ouia-component-id={0}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "single-select-closed",
        "variant": "single",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" single-select-closed"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="single-select-closed"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="0"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="single-select-closed"
      variant="single"
      width=""
    >
      <div
        className="pf-c-select"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" single-select-closed"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="single-select-closed"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="listbox"
                  aria-labelledby=" single-select-closed"
                  class="pf-c-select__toggle"
                  id="single-select-closed"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    >
                      Mr
                    </span>
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
              </div>,
            }
          }
          type="button"
          variant="single"
        >
          <button
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-labelledby=" single-select-closed"
            className="pf-c-select__toggle"
            disabled={false}
            id="single-select-closed"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <button
              aria-expanded="false"
              aria-haspopup="listbox"
              aria-labelledby=" single-select-closed"
              class="pf-c-select__toggle"
              id="single-select-closed"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                >
                  Mr
                </span>
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </button>
          </div>,
        }
      }
      type="button"
      variant="single"
    >
      <button
        aria-expanded={false}
        aria-haspopup="listbox"
        aria-labelledby=" single-select-closed"
        className="pf-c-select__toggle"
        disabled={false}
        id="single-select-closed"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          >
            Mr
          </span>
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`select single select renders disabled successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={true}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="single-select-disabled"
  typeAheadAriaLabel=""
=======
  toggleId="single-select-disabled"
>>>>>>> upstream/master
  variant="single"
  width=""
>
  <div
    className="pf-c-select"
    data-ouia-component-id={1}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isDisabled": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "single-select-disabled",
        "variant": "single",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" single-select-disabled"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="single-select-disabled"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={true}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="1"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="single-select-disabled"
      variant="single"
      width=""
    >
      <div
        className="pf-c-select"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" single-select-disabled"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="single-select-disabled"
          isActive={false}
          isDisabled={true}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="listbox"
                  aria-labelledby=" single-select-disabled"
                  class="pf-c-select__toggle pf-m-disabled"
                  disabled=""
                  id="single-select-disabled"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    >
                      Mr
                    </span>
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
              </div>,
            }
          }
          type="button"
          variant="single"
        >
          <button
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-labelledby=" single-select-disabled"
            className="pf-c-select__toggle pf-m-disabled"
            disabled={true}
            id="single-select-disabled"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <button
              aria-expanded="false"
              aria-haspopup="listbox"
              aria-labelledby=" single-select-disabled"
              class="pf-c-select__toggle pf-m-disabled"
              disabled=""
              id="single-select-disabled"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                >
                  Mr
                </span>
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
<<<<<<< HEAD
            </button>
          </div>,
        }
      }
      type="button"
      variant="single"
    >
      <button
        aria-expanded={false}
        aria-haspopup="listbox"
        aria-labelledby=" single-select-disabled"
        className="pf-c-select__toggle pf-m-disabled"
        disabled={true}
        id="single-select-disabled"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          >
            Mr
          </span>
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`select single select renders expanded successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
  variant="single"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={2}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
=======
            </CaretDownIcon>
          </button>
        </SelectToggle>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`select single select renders expanded successfully 1`] = `
<Component
  isExpanded={true}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="single-select-expanded"
  variant="single"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "single-select-expanded",
        "variant": "single",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-0"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-0"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="2"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="single-select-expanded"
      variant="single"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" single-select-expanded"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="single-select-expanded"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-haspopup="listbox"
                  aria-labelledby=" single-select-expanded"
                  class="pf-c-select__toggle"
                  id="single-select-expanded"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    >
                      Mr
                    </span>
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mr-0"
                      role="option"
                      type="button"
                    >
                      Mr
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mrs-1"
                      role="option"
                      type="button"
                    >
                      Mrs
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Ms-2"
                      role="option"
                      type="button"
                    >
                      Ms
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Other-3"
                      role="option"
                      type="button"
                    >
                      Other
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="single"
        >
          <button
            aria-expanded={true}
            aria-haspopup="listbox"
            aria-labelledby=" single-select-expanded"
            className="pf-c-select__toggle"
            disabled={false}
            id="single-select-expanded"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <button
              aria-expanded="true"
              aria-haspopup="listbox"
              aria-labelledby=" pf-toggle-id-0"
              class="pf-c-select__toggle"
              id="pf-toggle-id-0"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                >
                  Mr
                </span>
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
<<<<<<< HEAD
            </button>
            <ul
              class="pf-c-select__menu"
              role="listbox"
=======
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <ul
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectOption
              className=""
              component="button"
              id="Mr-0"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$00"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
>>>>>>> upstream/master
            >
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mr-0"
                  role="option"
                  type="button"
                >
                  Mr
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Mrs-1"
              index={1}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$01"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mrs-1"
                  role="option"
                  type="button"
                >
                  Mrs
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Ms-2"
              index={2}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$02"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Ms-2"
                  role="option"
                  type="button"
                >
                  Ms
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Other-3"
              index={3}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$03"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Other-3"
                  role="option"
                  type="button"
                >
                  Other
                </button>
              </li>
            </ul>
          </div>,
        }
      }
      type="button"
      variant="single"
    >
      <button
        aria-expanded={true}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-0"
        className="pf-c-select__toggle"
        disabled={false}
        id="pf-toggle-id-0"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          >
            Mr
          </span>
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
          component="button"
          id="Mr-0"
          index={0}
          isChecked={false}
          isDisabled={false}
          isFocused={false}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$00"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mr"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mr-0"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mr
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Mrs-1"
          index={1}
          isChecked={false}
          isDisabled={false}
          isFocused={false}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$01"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mrs"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mrs-1"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mrs
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Ms-2"
          index={2}
          isChecked={false}
          isDisabled={false}
          isFocused={false}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$02"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Ms"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Ms-2"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Ms
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Other-3"
          index={3}
          isChecked={false}
          isDisabled={false}
          isFocused={false}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$03"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Other"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Other-3"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Other
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`select single select renders expanded successfully with custom objects 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
=======
  toggleId="single-select-custom"
>>>>>>> upstream/master
  variant="single"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={3}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value={
              User {
                "compareTo": [Function],
                "firstName": "User",
                "lastName": "One",
                "title": "Mr",
                "toString": [Function],
              }
            }
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value={
              User {
                "compareTo": [Function],
                "firstName": "New",
                "lastName": "User",
                "title": "Mrs",
                "toString": [Function],
              }
            }
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value={
              User {
                "compareTo": [Function],
                "firstName": "Test",
                "lastName": "Three",
                "title": "Ms",
                "toString": [Function],
              }
            }
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "single-select-custom",
        "variant": "single",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-1"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-1"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="3"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="single-select-custom"
      variant="single"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" single-select-custom"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="single-select-custom"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-haspopup="listbox"
                  aria-labelledby=" single-select-custom"
                  class="pf-c-select__toggle"
                  id="single-select-custom"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    >
                      Mr: User One
                    </span>
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mr: User One-0"
                      role="option"
                      type="button"
                    >
                      Mr: User One
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mrs: New User-1"
                      role="option"
                      type="button"
                    >
                      Mrs: New User
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Ms: Test Three-2"
                      role="option"
                      type="button"
                    >
                      Ms: Test Three
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="single"
        >
          <button
            aria-expanded={true}
            aria-haspopup="listbox"
            aria-labelledby=" single-select-custom"
            className="pf-c-select__toggle"
            disabled={false}
            id="single-select-custom"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <button
              aria-expanded="true"
              aria-haspopup="listbox"
              aria-labelledby=" pf-toggle-id-1"
              class="pf-c-select__toggle"
              id="pf-toggle-id-1"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                >
                  Mr: User One
                </span>
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
<<<<<<< HEAD
            </button>
            <ul
              class="pf-c-select__menu"
              role="listbox"
=======
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <ul
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectOption
              className=""
              component="button"
              id="Mr: User One-0"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$0"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value={
                User {
                  "compareTo": [Function],
                  "firstName": "User",
                  "lastName": "One",
                  "title": "Mr",
                  "toString": [Function],
                }
              }
>>>>>>> upstream/master
            >
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mr: User One-0"
                  role="option"
                  type="button"
                >
                  Mr: User One
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Mrs: New User-1"
              index={1}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$1"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value={
                User {
                  "compareTo": [Function],
                  "firstName": "New",
                  "lastName": "User",
                  "title": "Mrs",
                  "toString": [Function],
                }
              }
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mrs: New User-1"
                  role="option"
                  type="button"
                >
                  Mrs: New User
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Ms: Test Three-2"
                  role="option"
                  type="button"
                >
                  Ms: Test Three
                </button>
              </li>
            </ul>
          </div>,
        }
      }
      type="button"
      variant="single"
    >
      <button
        aria-expanded={true}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-1"
        className="pf-c-select__toggle"
        disabled={false}
        id="pf-toggle-id-1"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          >
            Mr: User One
          </span>
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
          component="button"
          id="Mr: User One-0"
          index={0}
          isChecked={false}
          isDisabled={false}
          isFocused={false}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$0"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value={
            User {
              "compareTo": [Function],
              "firstName": "User",
              "lastName": "One",
              "title": "Mr",
              "toString": [Function],
            }
          }
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mr: User One-0"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mr: User One
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Mrs: New User-1"
          index={1}
          isChecked={false}
          isDisabled={false}
          isFocused={false}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$1"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value={
            User {
              "compareTo": [Function],
              "firstName": "New",
              "lastName": "User",
              "title": "Mrs",
              "toString": [Function],
            }
          }
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mrs: New User-1"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mrs: New User
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Ms: Test Three-2"
          index={2}
          isChecked={false}
          isDisabled={false}
          isFocused={false}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$2"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value={
            User {
              "compareTo": [Function],
              "firstName": "Test",
              "lastName": "Three",
              "title": "Ms",
              "toString": [Function],
            }
          }
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Ms: Test Three-2"
<<<<<<< HEAD
=======
              index={2}
              isChecked={false}
              isDisabled={false}
              isFocused={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$2"
              keyHandler={[Function]}
>>>>>>> upstream/master
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Ms: Test Three
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`select with custom content renders closed successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent="testing custom"
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="select-custom-content"
  typeAheadAriaLabel=""
  variant="single"
  width=""
=======
  toggleId="select-custom-content"
>>>>>>> upstream/master
>
  <div
    className="pf-c-select"
    data-ouia-component-id={39}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "customContent": "testing custom",
        "onToggle": [MockFunction],
        "toggleId": "select-custom-content",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" select-custom-content"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="select-custom-content"
      isActive={false}
=======
      createText="Create"
      customContent="testing custom"
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="39"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="select-custom-content"
      variant="single"
      width=""
    >
      <div
        className="pf-c-select"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" select-custom-content"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="select-custom-content"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <button
                  aria-expanded="false"
                  aria-haspopup="listbox"
                  aria-labelledby=" select-custom-content"
                  class="pf-c-select__toggle"
                  id="select-custom-content"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    />
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
              </div>,
            }
          }
          type="button"
          variant="single"
        >
          <button
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-labelledby=" select-custom-content"
            className="pf-c-select__toggle"
            disabled={false}
            id="select-custom-content"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <button
              aria-expanded="false"
              aria-haspopup="listbox"
              aria-labelledby=" select-custom-content"
              class="pf-c-select__toggle"
              id="select-custom-content"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </button>
          </div>,
        }
      }
      type="button"
      variant="single"
    >
      <button
        aria-expanded={false}
        aria-haspopup="listbox"
        aria-labelledby=" select-custom-content"
        className="pf-c-select__toggle"
        disabled={false}
        id="select-custom-content"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
  </div>
</Select>
`;

exports[`select with custom content renders expanded successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent="testing custom"
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
  variant="single"
  width=""
=======
  toggleId="select-expanded"
>>>>>>> upstream/master
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={40}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "customContent": "testing custom",
        "isExpanded": true,
        "onToggle": [MockFunction],
        "toggleId": "select-expanded",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-19"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-19"
      isActive={false}
=======
      createText="Create"
      customContent="testing custom"
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="40"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="select-expanded"
      variant="single"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" select-expanded"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="select-expanded"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <button
                  aria-expanded="true"
                  aria-haspopup="listbox"
                  aria-labelledby=" select-expanded"
                  class="pf-c-select__toggle"
                  id="select-expanded"
                  type="button"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <span
                      class="pf-c-select__toggle-text"
                    />
                  </div>
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                      transform=""
                    />
                  </svg>
                </button>
                <div
                  class="pf-c-select__menu"
                >
                  testing custom
                </div>
              </div>,
            }
          }
          type="button"
          variant="single"
        >
          <button
            aria-expanded={true}
            aria-haspopup="listbox"
            aria-labelledby=" select-expanded"
            className="pf-c-select__toggle"
            disabled={false}
            id="select-expanded"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
>>>>>>> upstream/master
          >
            <button
              aria-expanded="true"
              aria-haspopup="listbox"
              aria-labelledby=" pf-toggle-id-19"
              class="pf-c-select__toggle"
              id="pf-toggle-id-19"
              type="button"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <span
                  class="pf-c-select__toggle-text"
                />
              </div>
              <svg
                aria-hidden="true"
                class="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style="vertical-align: -0.125em;"
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
<<<<<<< HEAD
            </button>
            <div
              class="pf-c-select__menu"
            >
              testing custom
            </div>
          </div>,
        }
      }
      type="button"
      variant="single"
    >
      <button
        aria-expanded={true}
        aria-haspopup="listbox"
        aria-labelledby=" pf-toggle-id-19"
        className="pf-c-select__toggle"
        disabled={false}
        id="pf-toggle-id-19"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <div
          className="pf-c-select__toggle-wrapper"
=======
            </CaretDownIcon>
          </button>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={true}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
>>>>>>> upstream/master
        >
          <span
            className="pf-c-select__toggle-text"
          />
        </div>
        <CaretDownIcon
          className="pf-c-select__toggle-arrow"
        >
          <SVGIcon
            className="pf-c-select__toggle-arrow"
            color="currentColor"
            config={
              Object {
                "height": 512,
                "name": "CaretDownIcon",
                "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                "transform": "",
                "width": 320,
                "xOffset": 0,
                "yOffset": 0,
              }
            }
            noVerticalAlign={false}
            size="sm"
          >
            <svg
              aria-hidden={true}
              aria-labelledby={null}
              className="pf-c-select__toggle-arrow"
              fill="currentColor"
              height="1em"
              role="img"
              style={
                Object {
                  "verticalAlign": "-0.125em",
                }
              }
              viewBox="0 0 320 512"
              width="1em"
            >
              <path
                d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                transform=""
              />
            </svg>
          </SVGIcon>
        </CaretDownIcon>
      </button>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={true}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected={Array []}
      sendRef={[Function]}
    >
      <div
        className="pf-c-select__menu"
      >
        testing custom
      </div>
    </SelectMenu>
  </div>
</Select>
`;

exports[`toggle icon select checkbox 1`] = `
<span
  className="pf-c-select__toggle-icon"
>
  <div>
    Icon
  </div>
</span>
`;

exports[`toggle icon select single 1`] = `
<span
  className="pf-c-select__toggle-icon"
>
  <div>
    Icon
  </div>
</span>
`;

exports[`toggle icon typeahead multi select 1`] = `
<span
  className="pf-c-select__toggle-icon"
>
  <div>
    Icon
  </div>
</span>
`;

exports[`toggle icon typeahead select 1`] = `
<span
  className="pf-c-select__toggle-icon"
>
  <div>
    Icon
  </div>
</span>
`;

exports[`typeahead multi select renders closed successfully 1`] = `
<<<<<<< HEAD
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="typeahead-multi-select-closed"
  typeAheadAriaLabel=""
  variant="typeaheadmulti"
  width=""
>
  <div
    className="pf-c-select"
    data-ouia-component-id={23}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
=======
<Component
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="typeahead-multi-select-closed"
  variant="typeaheadmulti"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "typeahead-multi-select-closed",
        "variant": "typeaheadmulti",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" typeahead-multi-select-closed"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="typeahead-multi-select-closed"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="23"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="typeahead-multi-select-closed"
      variant="typeaheadmulti"
      width=""
    >
      <div
        className="pf-c-select"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-multi-select-closed"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="typeahead-multi-select-closed"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-multi-select-closed-select-multi-typeahead-typeahead"
                      placeholder=""
                      type="text"
                      value=""
                    />
                  </div>
                  <button
                    aria-expanded="false"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-multi-select-closed"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-multi-select-closed"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
              </div>,
            }
          }
          type="button"
          variant="typeaheadmulti"
        >
          <div
            className="pf-c-select__toggle pf-m-typeahead"
            onClick={[Function]}
            onKeyDown={[Function]}
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-multi-select-closed-select-multi-typeahead-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value=""
              />
            </div>
            <button
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-multi-select-closed"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-multi-select-closed"
              onClick={[Function]}
              type="button"
>>>>>>> upstream/master
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="typeahead-multi-select-closed-select-multi-typeahead-typeahead"
                  placeholder=""
                  type="text"
                  value=""
                />
              </div>
              <button
                aria-expanded="false"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" typeahead-multi-select-closed"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="typeahead-multi-select-closed"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </button>
            </div>
          </div>,
        }
      }
      type="button"
      variant="typeaheadmulti"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="typeahead-multi-select-closed-select-multi-typeahead-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value=""
          />
        </div>
        <button
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" typeahead-multi-select-closed"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="typeahead-multi-select-closed"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
  </div>
</Select>
`;

exports[`typeahead multi select renders expanded successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
=======
  toggleId="typeahead-multi-select-expanded"
>>>>>>> upstream/master
  variant="typeaheadmulti"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={24}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "typeahead-multi-select-expanded",
        "variant": "typeaheadmulti",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-13"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-13"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="24"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="typeahead-multi-select-expanded"
      variant="typeaheadmulti"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-multi-select-expanded"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="typeahead-multi-select-expanded"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-multi-select-expanded-select-multi-typeahead-typeahead"
                      placeholder=""
                      type="text"
                      value=""
                    />
                  </div>
                  <button
                    aria-expanded="true"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-multi-select-expanded"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-multi-select-expanded"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mr-0"
                      role="option"
                      type="button"
                    >
                      Mr
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mrs-1"
                      role="option"
                      type="button"
                    >
                      Mrs
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Ms-2"
                      role="option"
                      type="button"
                    >
                      Ms
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Other-3"
                      role="option"
                      type="button"
                    >
                      Other
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="typeaheadmulti"
        >
          <div
            className="pf-c-select__toggle pf-m-typeahead"
            onClick={[Function]}
            onKeyDown={[Function]}
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-multi-select-expanded-select-multi-typeahead-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value=""
              />
            </div>
            <button
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-multi-select-expanded"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-multi-select-expanded"
              onClick={[Function]}
              type="button"
>>>>>>> upstream/master
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
<<<<<<< HEAD
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="pf-toggle-id-13-select-multi-typeahead-typeahead"
                  placeholder=""
                  type="text"
                  value=""
                />
              </div>
              <button
                aria-expanded="true"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" pf-toggle-id-13"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="pf-toggle-id-13"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
=======
                <svg
                  aria-hidden={true}
                  aria-labelledby={null}
                  className="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style={
                    Object {
                      "verticalAlign": "-0.125em",
                    }
                  }
>>>>>>> upstream/master
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
            </div>
            <ul
              class="pf-c-select__menu"
              role="listbox"
=======
              </CaretDownIcon>
            </button>
          </div>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <ul
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectOption
              className=""
              component="button"
              id="Mr-0"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$00"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
>>>>>>> upstream/master
            >
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mr-0"
                  role="option"
                  type="button"
                >
                  Mr
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Mrs-1"
              index={1}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$01"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mrs-1"
                  role="option"
                  type="button"
                >
                  Mrs
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Ms-2"
              index={2}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$02"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Ms-2"
                  role="option"
                  type="button"
                >
                  Ms
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Other-3"
              index={3}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$03"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Other-3"
                  role="option"
                  type="button"
                >
                  Other
                </button>
              </li>
<<<<<<< HEAD
            </ul>
          </div>,
        }
      }
      type="button"
=======
            </SelectOption>
          </ul>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`typeahead multi select renders selected successfully 1`] = `
<Component
  isExpanded={true}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  selections={
    Array [
      "Mr",
      "Mrs",
    ]
  }
  toggleId="typeahead-multi-select-selected"
  variant="typeaheadmulti"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "selections": Array [
          "Mr",
          "Mrs",
        ],
        "toggleId": "typeahead-multi-select-selected",
        "variant": "typeaheadmulti",
      }
    }
    consumerContext={null}
  >
    <Select
      aria-label=""
      ariaLabelClear="Clear all"
      ariaLabelRemove="Remove"
      ariaLabelToggle="Options menu"
      ariaLabelTypeAhead=""
      ariaLabelledBy=""
      className=""
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={true}
      isGrouped={false}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections={
        Array [
          "Mr",
          "Mrs",
        ]
      }
      toggleIcon={null}
      toggleId="typeahead-multi-select-selected"
>>>>>>> upstream/master
      variant="typeaheadmulti"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="pf-toggle-id-13-select-multi-typeahead-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value=""
          />
        </div>
        <button
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" pf-toggle-id-13"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="pf-toggle-id-13"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected={Array []}
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
<<<<<<< HEAD
        <SelectOption
          className=""
          component="button"
          id="Mr-0"
          index={0}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$00"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mr"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mr-0"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mr
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Mrs-1"
          index={1}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$01"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mrs"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mrs-1"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mrs
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Ms-2"
          index={2}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$02"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Ms"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Ms-2"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Ms
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Other-3"
          index={3}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$03"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Other"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Other-3"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Other
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`typeahead multi select renders selected successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={
    Array [
      "Mr",
      "Mrs",
    ]
  }
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="typeahead-multi-select-selected"
  typeAheadAriaLabel=""
  variant="typeaheadmulti"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={25}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" typeahead-multi-select-selected"
      className=""
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="typeahead-multi-select-selected"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="25"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
=======
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-multi-select-selected"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="typeahead-multi-select-selected"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <ul
                      class="pf-c-chip-group"
                    >
                      <li
                        class="pf-c-chip"
                      >
                        <span
                          class="pf-c-chip__text"
                          id="pf-random-id-0"
                        >
                          Mr
                        </span>
                        <button
                          aria-label="Remove"
                          aria-labelledby="remove_pf-random-id-0 pf-random-id-0"
                          class="pf-c-button pf-m-plain"
                          id="remove_pf-random-id-0"
                          type="button"
                        >
                          <svg
                            aria-hidden="true"
                            fill="currentColor"
                            height="1em"
                            role="img"
                            style="vertical-align: -0.125em;"
                            viewBox="0 0 512 512"
                            width="1em"
                          >
                            <path
                              d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                              transform=""
                            />
                          </svg>
                        </button>
                      </li>
                      <li
                        class="pf-c-chip"
                      >
                        <span
                          class="pf-c-chip__text"
                          id="pf-random-id-1"
                        >
                          Mrs
                        </span>
                        <button
                          aria-label="Remove"
                          aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                          class="pf-c-button pf-m-plain"
                          id="remove_pf-random-id-1"
                          type="button"
                        >
                          <svg
                            aria-hidden="true"
                            fill="currentColor"
                            height="1em"
                            role="img"
                            style="vertical-align: -0.125em;"
                            viewBox="0 0 512 512"
                            width="1em"
                          >
                            <path
                              d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                              transform=""
                            />
                          </svg>
                        </button>
                      </li>
                    </ul>
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-multi-select-selected-select-multi-typeahead-typeahead"
                      placeholder=""
                      type="text"
                      value=""
                    />
                  </div>
                  <button
                    aria-label="Clear all"
                    class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                        transform=""
                      />
                    </svg>
                  </button>
                  <button
                    aria-expanded="true"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-multi-select-selected"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-multi-select-selected"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
>>>>>>> upstream/master
                <ul
                  class="pf-c-chip-group"
                >
                  <li
                    class="pf-c-chip"
                    data-ouia-component-id="28"
                    data-ouia-component-type="PF4/Chip"
                    data-ouia-safe="true"
                  >
                    <span
                      class="pf-c-chip__text"
                      id="pf-random-id-0"
                    >
                      Mr
                    </span>
                    <button
                      aria-label="Remove"
                      aria-labelledby="remove_pf-random-id-0 pf-random-id-0"
                      class="pf-c-button pf-m-plain"
                      data-ouia-component-type="PF4/Button"
                      data-ouia-safe="true"
                      id="remove_pf-random-id-0"
                      type="button"
                    >
                      <svg
                        aria-hidden="true"
                        fill="currentColor"
                        height="1em"
                        role="img"
                        style="vertical-align: -0.125em;"
                        viewBox="0 0 512 512"
                        width="1em"
                      >
                        <path
                          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                          transform=""
                        />
                      </svg>
                    </button>
                  </li>
                  <li
                    class="pf-c-chip"
                    data-ouia-component-id="29"
                    data-ouia-component-type="PF4/Chip"
                    data-ouia-safe="true"
                  >
                    <span
                      class="pf-c-chip__text"
                      id="pf-random-id-1"
                    >
                      Mrs
                    </span>
                    <button
                      aria-label="Remove"
                      aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                      class="pf-c-button pf-m-plain"
                      data-ouia-component-type="PF4/Button"
                      data-ouia-safe="true"
                      id="remove_pf-random-id-1"
                      type="button"
                    >
                      <svg
                        aria-hidden="true"
                        fill="currentColor"
                        height="1em"
                        role="img"
                        style="vertical-align: -0.125em;"
                        viewBox="0 0 512 512"
                        width="1em"
                      >
                        <path
                          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                          transform=""
                        />
                      </svg>
                    </button>
                  </li>
                </ul>
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="typeahead-multi-select-selected-select-multi-typeahead-typeahead"
                  placeholder=""
                  type="text"
                  value=""
                />
              </div>
              <button
                aria-label="Clear all"
                class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                    transform=""
                  />
                </svg>
              </button>
              <button
                aria-expanded="true"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" typeahead-multi-select-selected"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="typeahead-multi-select-selected"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </button>
            </div>
            <ul
              class="pf-c-select__menu"
              role="listbox"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected="true"
                  class="pf-c-select__menu-item pf-m-selected"
                  id="Mr-0"
                  role="option"
                  type="button"
                >
                  Mr
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__menu-item-icon"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 512 512"
                    width="1em"
                  >
                    <path
                      d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                      transform=""
                    />
                  </svg>
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  aria-selected="true"
                  class="pf-c-select__menu-item pf-m-selected"
                  id="Mrs-1"
                  role="option"
                  type="button"
                >
                  Mrs
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__menu-item-icon"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 512 512"
                    width="1em"
                  >
                    <path
                      d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                      transform=""
                    />
                  </svg>
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Ms-2"
                  role="option"
                  type="button"
                >
                  Ms
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Other-3"
                  role="option"
                  type="button"
                >
                  Other
                </button>
              </li>
            </ul>
          </div>,
        }
      }
      type="button"
      variant="typeaheadmulti"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <ChipGroup
            className=""
            collapsedText="\${remaining} more"
            defaultIsOpen={false}
            expandedText="Show Less"
            numChips={3}
            withToolbar={false}
          >
            <ul
              className="pf-c-chip-group"
            >
              <InnerChipGroup
                className=""
                collapsedText="\${remaining} more"
                defaultIsOpen={false}
                expandedText="Show Less"
                isOpen={false}
                numChips={3}
                onToggleCollapse={[Function]}
                withToolbar={false}
              >
                <Chip
                  className=""
                  closeBtnAriaLabel="Remove"
                  component="li"
                  isOverflowChip={false}
                  isReadOnly={false}
                  key=".$Mr"
                  onClick={[Function]}
                  tooltipPosition="top"
                >
                  <GenerateId
                    prefix="pf-random-id-"
                  >
                    <li
                      className="pf-c-chip"
                      data-ouia-component-id={28}
                      data-ouia-component-type="PF4/Chip"
                      data-ouia-safe={true}
                    >
                      <span
                        className="pf-c-chip__text"
                        id="pf-random-id-0"
                      >
                        Mr
                      </span>
                      <ChipButton
                        aria-label="Remove"
                        aria-labelledby="remove_pf-random-id-0 pf-random-id-0"
                        id="remove_pf-random-id-0"
                        onClick={[Function]}
                      >
                        <Button
                          aria-label="Remove"
                          aria-labelledby="remove_pf-random-id-0 pf-random-id-0"
                          className=""
                          id="remove_pf-random-id-0"
                          onClick={[Function]}
                          variant="plain"
                        >
                          <button
                            aria-disabled={null}
                            aria-label="Remove"
                            aria-labelledby="remove_pf-random-id-0 pf-random-id-0"
                            className="pf-c-button pf-m-plain"
                            data-ouia-component-id={null}
                            data-ouia-component-type="PF4/Button"
                            data-ouia-safe={true}
                            disabled={false}
                            id="remove_pf-random-id-0"
                            onClick={[Function]}
                            tabIndex={null}
                            type="button"
                          >
                            <TimesCircleIcon
                              aria-hidden="true"
                            >
                              <SVGIcon
                                aria-hidden="true"
                                color="currentColor"
                                config={
                                  Object {
                                    "height": 512,
                                    "name": "TimesCircleIcon",
                                    "svgPath": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
                                    "transform": "",
                                    "width": 512,
                                    "xOffset": 0,
                                    "yOffset": 0,
                                  }
                                }
                                noVerticalAlign={false}
                                size="sm"
                              >
                                <svg
                                  aria-hidden="true"
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  style={
                                    Object {
                                      "verticalAlign": "-0.125em",
                                    }
                                  }
                                  viewBox="0 0 512 512"
                                  width="1em"
                                >
                                  <path
                                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                    transform=""
                                  />
                                </svg>
                              </SVGIcon>
                            </TimesCircleIcon>
                          </button>
                        </Button>
                      </ChipButton>
                    </li>
                  </GenerateId>
                </Chip>
                <Chip
                  className=""
                  closeBtnAriaLabel="Remove"
                  component="li"
                  isOverflowChip={false}
                  isReadOnly={false}
                  key=".$Mrs"
                  onClick={[Function]}
                  tooltipPosition="top"
                >
                  <GenerateId
                    prefix="pf-random-id-"
                  >
                    <li
                      className="pf-c-chip"
                      data-ouia-component-id={29}
                      data-ouia-component-type="PF4/Chip"
                      data-ouia-safe={true}
                    >
                      <span
                        className="pf-c-chip__text"
                        id="pf-random-id-1"
                      >
                        Mrs
                      </span>
                      <ChipButton
                        aria-label="Remove"
                        aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                        id="remove_pf-random-id-1"
                        onClick={[Function]}
                      >
                        <Button
                          aria-label="Remove"
                          aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                          className=""
                          id="remove_pf-random-id-1"
                          onClick={[Function]}
                          variant="plain"
                        >
                          <button
                            aria-disabled={null}
                            aria-label="Remove"
                            aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                            className="pf-c-button pf-m-plain"
                            data-ouia-component-id={null}
                            data-ouia-component-type="PF4/Button"
                            data-ouia-safe={true}
                            disabled={false}
                            id="remove_pf-random-id-1"
                            onClick={[Function]}
                            tabIndex={null}
                            type="button"
                          >
                            <TimesCircleIcon
                              aria-hidden="true"
                            >
                              <SVGIcon
                                aria-hidden="true"
                                color="currentColor"
                                config={
                                  Object {
                                    "height": 512,
                                    "name": "TimesCircleIcon",
                                    "svgPath": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
                                    "transform": "",
                                    "width": 512,
                                    "xOffset": 0,
                                    "yOffset": 0,
                                  }
                                }
                                noVerticalAlign={false}
                                size="sm"
                              >
                                <svg
                                  aria-hidden="true"
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  style={
                                    Object {
                                      "verticalAlign": "-0.125em",
                                    }
<<<<<<< HEAD
                                  }
                                  viewBox="0 0 512 512"
                                  width="1em"
                                >
                                  <path
                                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                    transform=""
                                  />
                                </svg>
                              </SVGIcon>
                            </TimesCircleIcon>
                          </button>
                        </Button>
                      </ChipButton>
                    </li>
                  </GenerateId>
                </Chip>
              </InnerChipGroup>
            </ul>
          </ChipGroup>
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="typeahead-multi-select-selected-select-multi-typeahead-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value=""
          />
        </div>
        <button
          aria-label="Clear all"
          className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          <TimesCircleIcon
            aria-hidden={true}
          >
            <SVGIcon
              aria-hidden={true}
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "TimesCircleIcon",
                  "svgPath": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
                  "transform": "",
                  "width": 512,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 512 512"
                width="1em"
              >
                <path
                  d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </TimesCircleIcon>
        </button>
        <button
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" typeahead-multi-select-selected"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="typeahead-multi-select-selected"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected={
        Array [
          "Mr",
          "Mrs",
        ]
      }
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
          component="button"
          id="Mr-0"
          index={0}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={true}
          key=".$.$00"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mr"
        >
          <li
            role="presentation"
          >
=======
                                    consumerContext={
                                      Object {
                                        "isOuia": false,
                                        "ouiaId": null,
                                      }
                                    }
                                  >
                                    <Button
                                      aria-label="Remove"
                                      aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                                      className=""
                                      id="remove_pf-random-id-1"
                                      onClick={[Function]}
                                      ouiaContext={
                                        Object {
                                          "isOuia": false,
                                          "ouiaId": null,
                                        }
                                      }
                                      variant="plain"
                                    >
                                      <button
                                        aria-disabled={null}
                                        aria-label="Remove"
                                        aria-labelledby="remove_pf-random-id-1 pf-random-id-1"
                                        className="pf-c-button pf-m-plain"
                                        disabled={false}
                                        id="remove_pf-random-id-1"
                                        onClick={[Function]}
                                        tabIndex={null}
                                        type="button"
                                      >
                                        <TimesCircleIcon
                                          aria-hidden="true"
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                          title={null}
                                        >
                                          <svg
                                            aria-hidden="true"
                                            aria-labelledby={null}
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 512 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                                              transform=""
                                            />
                                          </svg>
                                        </TimesCircleIcon>
                                      </button>
                                    </Button>
                                  </ComponentWithOuia>
                                </Component>
                              </ChipButton>
                            </li>
                          </GenerateId>
                        </Chip>
                      </ComponentWithOuia>
                    </Component>
                  </InnerChipGroup>
                </ul>
              </ChipGroup>
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-multi-select-selected-select-multi-typeahead-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value=""
              />
            </div>
>>>>>>> upstream/master
            <button
              aria-selected={true}
              className="pf-c-select__menu-item pf-m-selected"
              id="Mr-0"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mr
              <CheckIcon
                aria-hidden={true}
                className="pf-c-select__menu-item-icon"
              >
                <SVGIcon
                  aria-hidden={true}
                  className="pf-c-select__menu-item-icon"
                  color="currentColor"
                  config={
                    Object {
                      "height": 512,
                      "name": "CheckIcon",
                      "svgPath": "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z",
                      "transform": "",
                      "width": 512,
                      "xOffset": 0,
                      "yOffset": 0,
                    }
                  }
                  noVerticalAlign={false}
                  size="sm"
                >
                  <svg
                    aria-hidden={true}
                    aria-labelledby={null}
                    className="pf-c-select__menu-item-icon"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style={
                      Object {
                        "verticalAlign": "-0.125em",
                      }
                    }
                    viewBox="0 0 512 512"
                    width="1em"
                  >
                    <path
                      d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                      transform=""
                    />
                  </svg>
                </SVGIcon>
              </CheckIcon>
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Mrs-1"
          index={1}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={true}
          key=".$.$01"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mrs"
        >
          <li
            role="presentation"
          >
            <button
<<<<<<< HEAD
              aria-selected={true}
              className="pf-c-select__menu-item pf-m-selected"
              id="Mrs-1"
=======
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-multi-select-selected"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-multi-select-selected"
>>>>>>> upstream/master
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mrs
              <CheckIcon
                aria-hidden={true}
                className="pf-c-select__menu-item-icon"
              >
                <SVGIcon
                  aria-hidden={true}
                  className="pf-c-select__menu-item-icon"
                  color="currentColor"
                  config={
                    Object {
                      "height": 512,
                      "name": "CheckIcon",
                      "svgPath": "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z",
                      "transform": "",
                      "width": 512,
                      "xOffset": 0,
                      "yOffset": 0,
                    }
                  }
                  noVerticalAlign={false}
                  size="sm"
                >
                  <svg
                    aria-hidden={true}
                    aria-labelledby={null}
                    className="pf-c-select__menu-item-icon"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style={
                      Object {
                        "verticalAlign": "-0.125em",
                      }
                    }
                    viewBox="0 0 512 512"
                    width="1em"
                  >
                    <path
                      d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                      transform=""
                    />
                  </svg>
                </SVGIcon>
              </CheckIcon>
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
<<<<<<< HEAD
          component="button"
          id="Ms-2"
          index={2}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$02"
=======
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
>>>>>>> upstream/master
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Ms"
        >
          <li
            role="presentation"
          >
<<<<<<< HEAD
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Ms-2"
=======
            <SelectOption
              className=""
              component="button"
              id="Mr-0"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={true}
              key=".$.$00"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={true}
                  className="pf-c-select__menu-item pf-m-selected"
                  id="Mr-0"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Mr
                  <CheckIcon
                    aria-hidden={true}
                    className="pf-c-select__menu-item-icon"
                    color="currentColor"
                    noVerticalAlign={false}
                    size="sm"
                    title={null}
                  >
                    <svg
                      aria-hidden={true}
                      aria-labelledby={null}
                      className="pf-c-select__menu-item-icon"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style={
                        Object {
                          "verticalAlign": "-0.125em",
                        }
                      }
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                        transform=""
                      />
                    </svg>
                  </CheckIcon>
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Mrs-1"
              index={1}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={true}
              key=".$.$01"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={true}
                  className="pf-c-select__menu-item pf-m-selected"
                  id="Mrs-1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Mrs
                  <CheckIcon
                    aria-hidden={true}
                    className="pf-c-select__menu-item-icon"
                    color="currentColor"
                    noVerticalAlign={false}
                    size="sm"
                    title={null}
                  >
                    <svg
                      aria-hidden={true}
                      aria-labelledby={null}
                      className="pf-c-select__menu-item-icon"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style={
                        Object {
                          "verticalAlign": "-0.125em",
                        }
                      }
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                        transform=""
                      />
                    </svg>
                  </CheckIcon>
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Ms-2"
              index={2}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$02"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  id="Ms-2"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Ms
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Other-3"
              index={3}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$03"
              keyHandler={[Function]}
>>>>>>> upstream/master
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
<<<<<<< HEAD
              Ms
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Other-3"
          index={3}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$03"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Other"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Other-3"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Other
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`typeahead multi select test onChange 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[MockFunction]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
  variant="typeahead"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={31}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
=======
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  id="Other-3"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Other
                </button>
              </li>
            </SelectOption>
          </ul>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`typeahead multi select test onChange 1`] = `
<Component
  isExpanded={true}
  onClear={[MockFunction]}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="typeahead-multi-select-onchange"
  variant="typeaheadmulti"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onClear": [MockFunction],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "typeahead-multi-select-onchange",
        "variant": "typeaheadmulti",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-15"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={true}
      id="pf-toggle-id-15"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="31"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="typeahead-multi-select-onchange"
      variant="typeaheadmulti"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-multi-select-onchange"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={true}
          id="typeahead-multi-select-onchange"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-multi-select-onchange-select-multi-typeahead-typeahead"
                      placeholder=""
                      type="text"
                      value="test"
                    />
                  </div>
                  <button
                    aria-label="Clear all"
                    class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                        transform=""
                      />
                    </svg>
                  </button>
                  <button
                    aria-expanded="true"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-multi-select-onchange"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-multi-select-onchange"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item pf-m-disabled"
                      id="No results found-0"
                      role="option"
                      type="button"
                    >
                      No results found
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="typeaheadmulti"
        >
          <div
            className="pf-c-select__toggle pf-m-typeahead"
            onClick={[Function]}
            onKeyDown={[Function]}
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-multi-select-onchange-select-multi-typeahead-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value="test"
              />
            </div>
            <button
              aria-label="Clear all"
              className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
              disabled={false}
              onClick={[Function]}
              type="button"
>>>>>>> upstream/master
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="pf-toggle-id-15-select-typeahead"
                  placeholder=""
                  type="text"
                  value="test"
                />
              </div>
              <button
                aria-label="Clear all"
                class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
              <button
                aria-expanded="true"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" pf-toggle-id-15"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="pf-toggle-id-15"
                type="button"
=======
              </TimesCircleIcon>
            </button>
            <button
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-multi-select-onchange"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-multi-select-onchange"
              onClick={[Function]}
              type="button"
            >
              <CaretDownIcon
                className="pf-c-select__toggle-arrow"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
>>>>>>> upstream/master
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
            </div>
            <ul
              class="pf-c-select__menu"
              role="listbox"
=======
              </CaretDownIcon>
            </button>
          </div>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <ul
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectOption
              className=""
              component="button"
              id="No results found-0"
              index={0}
              isChecked={false}
              isDisabled={true}
              isFocused={null}
              isNoResultsOption={true}
              isPlaceholder={false}
              isSelected={false}
              key=".$0"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="No results found"
>>>>>>> upstream/master
            >
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item pf-m-disabled"
                  id="No results found-0"
                  role="option"
                  type="button"
                >
                  No results found
                </button>
              </li>
<<<<<<< HEAD
            </ul>
          </div>,
        }
      }
      type="button"
=======
            </SelectOption>
          </ul>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`typeahead select renders closed successfully 1`] = `
<Component
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  toggleId="typeahead-select-closed"
  variant="typeahead"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "typeahead-select-closed",
        "variant": "typeahead",
      }
    }
    consumerContext={null}
  >
    <Select
      aria-label=""
      ariaLabelClear="Clear all"
      ariaLabelRemove="Remove"
      ariaLabelToggle="Options menu"
      ariaLabelTypeAhead=""
      ariaLabelledBy=""
      className=""
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={false}
      isGrouped={false}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="typeahead-select-closed"
>>>>>>> upstream/master
      variant="typeahead"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
<<<<<<< HEAD
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="pf-toggle-id-15-select-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value="test"
          />
        </div>
        <button
          aria-label="Clear all"
          className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          <TimesCircleIcon
            aria-hidden={true}
          >
            <SVGIcon
              aria-hidden={true}
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "TimesCircleIcon",
                  "svgPath": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
                  "transform": "",
                  "width": 512,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 512 512"
                width="1em"
              >
                <path
                  d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </TimesCircleIcon>
        </button>
        <button
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" pf-toggle-id-15"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="pf-toggle-id-15"
          onClick={[Function]}
=======
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-select-closed"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="typeahead-select-closed"
          isActive={false}
          isDisabled={false}
          isExpanded={false}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-select-closed-select-typeahead"
                      placeholder=""
                      type="text"
                      value=""
                    />
                  </div>
                  <button
                    aria-expanded="false"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-select-closed"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-select-closed"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
              </div>,
            }
          }
>>>>>>> upstream/master
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
          component="button"
          id="No results found-0"
          index={0}
          isChecked={false}
          isDisabled={true}
          isFocused={null}
          isNoResultsOption={true}
          isPlaceholder={false}
          isSelected={false}
          key=".$0"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="No results found"
        >
          <li
            role="presentation"
          >
<<<<<<< HEAD
            <button
              aria-selected={null}
              className="pf-c-select__menu-item pf-m-disabled"
              id="No results found-0"
=======
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-select-closed-select-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value=""
              />
            </div>
            <button
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-select-closed"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-select-closed"
>>>>>>> upstream/master
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              No results found
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`typeahead select renders closed successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={false}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId="typeahead-select-closed"
  typeAheadAriaLabel=""
  variant="typeahead"
  width=""
>
  <div
    className="pf-c-select"
    data-ouia-component-id={16}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" typeahead-select-closed"
      className=""
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="typeahead-select-closed"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={false}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
          "current": <div
            class="pf-c-select"
            data-ouia-component-id="16"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="typeahead-select-closed-select-typeahead"
                  placeholder=""
                  type="text"
                  value=""
                />
              </div>
              <button
                aria-expanded="false"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" typeahead-select-closed"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="typeahead-select-closed"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </button>
            </div>
          </div>,
        }
      }
      type="button"
      variant="typeahead"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="typeahead-select-closed-select-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value=""
          />
        </div>
        <button
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" typeahead-select-closed"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="typeahead-select-closed"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
  </div>
</Select>
`;

exports[`typeahead select renders expanded successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
=======
  toggleId="typeahead-select-expanded"
>>>>>>> upstream/master
  variant="typeahead"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={17}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "typeahead-select-expanded",
        "variant": "typeahead",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-7"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-7"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="17"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="typeahead-select-expanded"
      variant="typeahead"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-select-expanded"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="typeahead-select-expanded"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-select-expanded-select-typeahead"
                      placeholder=""
                      type="text"
                      value=""
                    />
                  </div>
                  <button
                    aria-expanded="true"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-select-expanded"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-select-expanded"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mr-0"
                      role="option"
                      type="button"
                    >
                      Mr
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mrs-1"
                      role="option"
                      type="button"
                    >
                      Mrs
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Ms-2"
                      role="option"
                      type="button"
                    >
                      Ms
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Other-3"
                      role="option"
                      type="button"
                    >
                      Other
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="typeahead"
        >
          <div
            className="pf-c-select__toggle pf-m-typeahead"
            onClick={[Function]}
            onKeyDown={[Function]}
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-select-expanded-select-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value=""
              />
            </div>
            <button
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-select-expanded"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-select-expanded"
              onClick={[Function]}
              type="button"
>>>>>>> upstream/master
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="pf-toggle-id-7-select-typeahead"
                  placeholder=""
                  type="text"
                  value=""
                />
              </div>
              <button
                aria-expanded="true"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" pf-toggle-id-7"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="pf-toggle-id-7"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
            </div>
            <ul
              class="pf-c-select__menu"
              role="listbox"
=======
              </CaretDownIcon>
            </button>
          </div>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <ul
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectOption
              className=""
              component="button"
              id="Mr-0"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$00"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  id="Mr-0"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Mr
                </button>
              </li>
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Mrs-1"
              index={1}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$01"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
>>>>>>> upstream/master
            >
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mr-0"
                  role="option"
                  type="button"
                >
                  Mr
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mrs-1"
                  role="option"
                  type="button"
                >
                  Mrs
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Ms-2"
              index={2}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$02"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Ms"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Ms-2"
                  role="option"
                  type="button"
                >
                  Ms
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Other-3"
              index={3}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$03"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Other"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Other-3"
                  role="option"
                  type="button"
                >
                  Other
                </button>
              </li>
<<<<<<< HEAD
            </ul>
          </div>,
        }
      }
      type="button"
=======
            </SelectOption>
          </ul>
        </SelectMenu>
      </div>
    </Select>
  </ComponentWithOuia>
</Component>
`;

exports[`typeahead select renders selected successfully 1`] = `
<Component
  isExpanded={true}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  selections="Mr"
  toggleId="typeahead-select-selected"
  variant="typeahead"
>
  <ComponentWithOuia
    component={[Function]}
    componentProps={
      Object {
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "selections": "Mr",
        "toggleId": "typeahead-select-selected",
        "variant": "typeahead",
      }
    }
    consumerContext={null}
  >
    <Select
      aria-label=""
      ariaLabelClear="Clear all"
      ariaLabelRemove="Remove"
      ariaLabelToggle="Options menu"
      ariaLabelTypeAhead=""
      ariaLabelledBy=""
      className=""
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
      isDisabled={false}
      isExpanded={true}
      isGrouped={false}
      isPlain={false}
      noResultsFoundText="No results found"
      onClear={[Function]}
      onCreateOption={[Function]}
      onFilter={null}
      onSelect={[MockFunction]}
      onToggle={[MockFunction]}
      ouiaContext={
        Object {
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections="Mr"
      toggleIcon={null}
      toggleId="typeahead-select-selected"
>>>>>>> upstream/master
      variant="typeahead"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="pf-toggle-id-7-select-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value=""
          />
        </div>
        <button
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" pf-toggle-id-7"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="pf-toggle-id-7"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
<<<<<<< HEAD
        <SelectOption
          className=""
          component="button"
          id="Mr-0"
          index={0}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$00"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mr"
=======
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-select-selected"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="typeahead-select-selected"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-select-selected-select-typeahead"
                      placeholder=""
                      type="text"
                      value="Mr"
                    />
                  </div>
                  <button
                    aria-label="Clear all"
                    class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                        transform=""
                      />
                    </svg>
                  </button>
                  <button
                    aria-expanded="true"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-select-selected"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-select-selected"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      aria-selected="true"
                      class="pf-c-select__menu-item pf-m-selected"
                      id="Mr-0"
                      role="option"
                      type="button"
                    >
                      Mr
                      <svg
                        aria-hidden="true"
                        class="pf-c-select__menu-item-icon"
                        fill="currentColor"
                        height="1em"
                        role="img"
                        style="vertical-align: -0.125em;"
                        viewBox="0 0 512 512"
                        width="1em"
                      >
                        <path
                          d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                          transform=""
                        />
                      </svg>
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Mrs-1"
                      role="option"
                      type="button"
                    >
                      Mrs
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Ms-2"
                      role="option"
                      type="button"
                    >
                      Ms
                    </button>
                  </li>
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="Other-3"
                      role="option"
                      type="button"
                    >
                      Other
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="typeahead"
>>>>>>> upstream/master
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mr-0"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
<<<<<<< HEAD
              Mr
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Mrs-1"
          index={1}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$01"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mrs"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mrs-1"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mrs
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Ms-2"
          index={2}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$02"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Ms"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Ms-2"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Ms
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Other-3"
          index={3}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$03"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Other"
        >
          <li
            role="presentation"
          >
=======
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-select-selected-select-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value="Mr"
              />
            </div>
>>>>>>> upstream/master
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Other-3"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Other
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`typeahead select renders selected successfully 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection="Mr"
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
  variant="typeahead"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={18}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
        "width": "",
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-8"
      className=""
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-8"
      isActive={false}
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="18"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="pf-toggle-id-8-select-typeahead"
                  placeholder=""
                  type="text"
                  value="Mr"
                />
              </div>
              <button
                aria-label="Clear all"
                class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
              <button
                aria-expanded="true"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" pf-toggle-id-8"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="pf-toggle-id-8"
                type="button"
=======
              </TimesCircleIcon>
            </button>
            <button
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-select-selected"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-select-selected"
              onClick={[Function]}
              type="button"
            >
              <CaretDownIcon
                className="pf-c-select__toggle-arrow"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
>>>>>>> upstream/master
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
            </div>
            <ul
              class="pf-c-select__menu"
              role="listbox"
=======
              </CaretDownIcon>
            </button>
          </div>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected="Mr"
          sendRef={[Function]}
        >
          <ul
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectOption
              className=""
              component="button"
              id="Mr-0"
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={true}
              key=".$.$00"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mr"
>>>>>>> upstream/master
            >
              <li
                role="presentation"
              >
                <button
                  aria-selected="true"
                  class="pf-c-select__menu-item pf-m-selected"
                  id="Mr-0"
                  role="option"
                  type="button"
                >
                  Mr
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__menu-item-icon"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 512 512"
                    width="1em"
                  >
                    <path
                      d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                      transform=""
                    />
                  </svg>
                </button>
              </li>
<<<<<<< HEAD
=======
            </SelectOption>
            <SelectOption
              className=""
              component="button"
              id="Mrs-1"
              index={1}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$01"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="Mrs"
            >
>>>>>>> upstream/master
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Mrs-1"
                  role="option"
                  type="button"
                >
                  Mrs
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Ms-2"
                  role="option"
                  type="button"
                >
                  Ms
                </button>
              </li>
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="Other-3"
                  role="option"
                  type="button"
                >
                  Other
                </button>
              </li>
            </ul>
          </div>,
        }
      }
      type="button"
      variant="typeahead"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="pf-toggle-id-8-select-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value="Mr"
          />
        </div>
        <button
          aria-label="Clear all"
          className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          <TimesCircleIcon
            aria-hidden={true}
          >
            <SVGIcon
              aria-hidden={true}
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "TimesCircleIcon",
                  "svgPath": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
                  "transform": "",
                  "width": 512,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 512 512"
                width="1em"
              >
                <path
                  d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </TimesCircleIcon>
        </button>
        <button
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" pf-toggle-id-8"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="pf-toggle-id-8"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected="Mr"
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
          component="button"
          id="Mr-0"
          index={0}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={true}
          key=".$.$00"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mr"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={true}
              className="pf-c-select__menu-item pf-m-selected"
              id="Mr-0"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mr
              <CheckIcon
                aria-hidden={true}
                className="pf-c-select__menu-item-icon"
              >
                <SVGIcon
                  aria-hidden={true}
                  className="pf-c-select__menu-item-icon"
                  color="currentColor"
                  config={
                    Object {
                      "height": 512,
                      "name": "CheckIcon",
                      "svgPath": "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z",
                      "transform": "",
                      "width": 512,
                      "xOffset": 0,
                      "yOffset": 0,
                    }
                  }
                  noVerticalAlign={false}
                  size="sm"
                >
                  <svg
                    aria-hidden={true}
                    aria-labelledby={null}
                    className="pf-c-select__menu-item-icon"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style={
                      Object {
                        "verticalAlign": "-0.125em",
                      }
                    }
                    viewBox="0 0 512 512"
                    width="1em"
                  >
                    <path
                      d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                      transform=""
                    />
                  </svg>
                </SVGIcon>
              </CheckIcon>
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Mrs-1"
          index={1}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$01"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Mrs"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Mrs-1"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Mrs
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Ms-2"
          index={2}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$02"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Ms"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Ms-2"
<<<<<<< HEAD
=======
              index={2}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$02"
              keyHandler={[Function]}
>>>>>>> upstream/master
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Ms
            </button>
          </li>
        </SelectOption>
        <SelectOption
          className=""
          component="button"
          id="Other-3"
          index={3}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$.$03"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="Other"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="Other-3"
<<<<<<< HEAD
=======
              index={3}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$.$03"
              keyHandler={[Function]}
>>>>>>> upstream/master
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Other
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`typeahead select test creatable option 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={true}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
=======
  toggleId="typeahead-select-creatable"
>>>>>>> upstream/master
  variant="typeahead"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={22}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isCreatable": true,
        "isExpanded": true,
        "onToggle": [MockFunction],
        "toggleId": "typeahead-select-creatable",
        "variant": "typeahead",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-12"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={false}
      id="pf-toggle-id-12"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={true}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="22"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="typeahead-select-creatable"
      variant="typeahead"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-select-creatable"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={false}
          id="typeahead-select-creatable"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-select-creatable-select-typeahead"
                      placeholder=""
                      type="text"
                      value="test"
                    />
                  </div>
                  <button
                    aria-label="Clear all"
                    class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                        transform=""
                      />
                    </svg>
                  </button>
                  <button
                    aria-expanded="true"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-select-creatable"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-select-creatable"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item"
                      id="test-0"
                      role="option"
                      type="button"
                    >
                      Create
                       "
                      test
                      "
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="typeahead"
        >
          <div
            className="pf-c-select__toggle pf-m-typeahead"
            onClick={[Function]}
            onKeyDown={[Function]}
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-select-creatable-select-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value="test"
              />
            </div>
            <button
              aria-label="Clear all"
              className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
              disabled={false}
              onClick={[Function]}
              type="button"
>>>>>>> upstream/master
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="pf-toggle-id-12-select-typeahead"
                  placeholder=""
                  type="text"
                  value="test"
                />
              </div>
              <button
                aria-label="Clear all"
                class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
              <button
                aria-expanded="true"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" pf-toggle-id-12"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="pf-toggle-id-12"
                type="button"
=======
              </TimesCircleIcon>
            </button>
            <button
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-select-creatable"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-select-creatable"
              onClick={[Function]}
              type="button"
            >
              <CaretDownIcon
                className="pf-c-select__toggle-arrow"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
>>>>>>> upstream/master
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
              </button>
            </div>
            <ul
              class="pf-c-select__menu"
              role="listbox"
            >
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  id="test-0"
                  role="option"
                  type="button"
                >
                  Create
                   "
                  test
                  "
                </button>
              </li>
            </ul>
          </div>,
        }
      }
      type="button"
      variant="typeahead"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="pf-toggle-id-12-select-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value="test"
          />
        </div>
        <button
          aria-label="Clear all"
          className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          <TimesCircleIcon
            aria-hidden={true}
          >
            <SVGIcon
              aria-hidden={true}
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "TimesCircleIcon",
                  "svgPath": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
                  "transform": "",
                  "width": 512,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 512 512"
                width="1em"
              >
                <path
                  d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </TimesCircleIcon>
        </button>
        <button
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" pf-toggle-id-12"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="pf-toggle-id-12"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
<<<<<<< HEAD
          component="button"
          id="test-0"
          index={0}
          isChecked={false}
          isDisabled={false}
          isFocused={null}
          isNoResultsOption={false}
          isPlaceholder={false}
          isSelected={false}
          key=".$0"
=======
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
>>>>>>> upstream/master
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="test"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item"
              id="test-0"
<<<<<<< HEAD
=======
              index={0}
              isChecked={false}
              isDisabled={false}
              isFocused={null}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$0"
              keyHandler={[Function]}
>>>>>>> upstream/master
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              Create
               "
              test
              "
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;

exports[`typeahead select test onChange 1`] = `
<Select
  aria-label=""
  aria-labelledby=""
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customContent={null}
  direction="down"
  hasInlineFilter={false}
  isCreatable={false}
  isDisabled={false}
  isGrouped={false}
  isOpen={true}
  isPlain={false}
  noResultsFoundText="No results found"
  onClear={[MockFunction]}
  onCreateOption={[Function]}
  onFilter={null}
  onSelect={[MockFunction]}
  onToggle={[MockFunction]}
<<<<<<< HEAD
  placeholderText=""
  removeSelectionAriaLabel="Remove"
  selection=""
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
=======
  toggleId="typeahead-select-onchange"
>>>>>>> upstream/master
  variant="typeahead"
  width=""
>
  <div
    className="pf-c-select pf-m-expanded"
    data-ouia-component-id={20}
    data-ouia-component-type="PF4/Select"
    data-ouia-safe={true}
    style={
      Object {
<<<<<<< HEAD
        "width": "",
=======
        "children": Array [
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mr"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Mrs"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Ms"
          />,
          <SelectOption
            className=""
            component="button"
            index={0}
            isChecked={false}
            isDisabled={false}
            isFocused={false}
            isNoResultsOption={false}
            isPlaceholder={false}
            isSelected={false}
            keyHandler={[Function]}
            onClick={[Function]}
            sendRef={[Function]}
            value="Other"
          />,
        ],
        "isExpanded": true,
        "onClear": [MockFunction],
        "onSelect": [MockFunction],
        "onToggle": [MockFunction],
        "toggleId": "typeahead-select-onchange",
        "variant": "typeahead",
>>>>>>> upstream/master
      }
    }
  >
    <SelectToggle
      aria-label="Options menu"
      aria-labelledby=" pf-toggle-id-10"
      className=""
<<<<<<< HEAD
      handleTypeaheadKeys={[Function]}
      hasClearButton={true}
      id="pf-toggle-id-10"
      isActive={false}
=======
      createText="Create"
      customContent={null}
      direction="down"
      hasInlineFilter={false}
      isCreatable={false}
>>>>>>> upstream/master
      isDisabled={false}
      isFocused={false}
      isHovered={false}
      isOpen={true}
      isPlain={false}
      onClose={[Function]}
      onEnter={[Function]}
      onToggle={[MockFunction]}
      parentRef={
        Object {
<<<<<<< HEAD
          "current": <div
            class="pf-c-select pf-m-expanded"
            data-ouia-component-id="20"
            data-ouia-component-type="PF4/Select"
            data-ouia-safe="true"
          >
            <div
              class="pf-c-select__toggle pf-m-typeahead"
=======
          "isOuia": false,
          "ouiaId": null,
        }
      }
      placeholderText=""
      selections=""
      toggleIcon={null}
      toggleId="typeahead-select-onchange"
      variant="typeahead"
      width=""
    >
      <div
        className="pf-c-select pf-m-expanded"
        style={
          Object {
            "width": "",
          }
        }
      >
        <SelectToggle
          ariaLabelToggle="Options menu"
          ariaLabelledBy=" typeahead-select-onchange"
          className=""
          handleTypeaheadKeys={[Function]}
          hasClearButton={true}
          id="typeahead-select-onchange"
          isActive={false}
          isDisabled={false}
          isExpanded={true}
          isFocused={false}
          isHovered={false}
          isPlain={false}
          onClose={[Function]}
          onEnter={[Function]}
          onToggle={[MockFunction]}
          parentRef={
            Object {
              "current": <div
                class="pf-c-select pf-m-expanded"
              >
                <div
                  class="pf-c-select__toggle pf-m-typeahead"
                >
                  <div
                    class="pf-c-select__toggle-wrapper"
                  >
                    <input
                      aria-label=""
                      autocomplete="off"
                      class="pf-c-form-control pf-c-select__toggle-typeahead"
                      id="typeahead-select-onchange-select-typeahead"
                      placeholder=""
                      type="text"
                      value="test"
                    />
                  </div>
                  <button
                    aria-label="Clear all"
                    class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                        transform=""
                      />
                    </svg>
                  </button>
                  <button
                    aria-expanded="true"
                    aria-haspopup="listbox"
                    aria-label="Options menu"
                    aria-labelledby=" typeahead-select-onchange"
                    class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                    id="typeahead-select-onchange"
                    type="button"
                  >
                    <svg
                      aria-hidden="true"
                      class="pf-c-select__toggle-arrow"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style="vertical-align: -0.125em;"
                      viewBox="0 0 320 512"
                      width="1em"
                    >
                      <path
                        d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                        transform=""
                      />
                    </svg>
                  </button>
                </div>
                <ul
                  class="pf-c-select__menu"
                  role="listbox"
                >
                  <li
                    role="presentation"
                  >
                    <button
                      class="pf-c-select__menu-item pf-m-disabled"
                      id="No results found-0"
                      role="option"
                      type="button"
                    >
                      No results found
                    </button>
                  </li>
                </ul>
              </div>,
            }
          }
          type="button"
          variant="typeahead"
        >
          <div
            className="pf-c-select__toggle pf-m-typeahead"
            onClick={[Function]}
            onKeyDown={[Function]}
          >
            <div
              className="pf-c-select__toggle-wrapper"
            >
              <input
                aria-activedescendant={null}
                aria-label=""
                autoComplete="off"
                className="pf-c-form-control pf-c-select__toggle-typeahead"
                disabled={false}
                id="typeahead-select-onchange-select-typeahead"
                onChange={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                placeholder=""
                type="text"
                value="test"
              />
            </div>
            <button
              aria-label="Clear all"
              className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
              disabled={false}
              onClick={[Function]}
              type="button"
>>>>>>> upstream/master
            >
              <div
                class="pf-c-select__toggle-wrapper"
              >
                <input
                  aria-label=""
                  autocomplete="off"
                  class="pf-c-form-control pf-c-select__toggle-typeahead"
                  id="pf-toggle-id-10-select-typeahead"
                  placeholder=""
                  type="text"
                  value="test"
                />
              </div>
              <button
                aria-label="Clear all"
                class="pf-c-button pf-m-plain pf-c-select__toggle-clear"
                type="button"
              >
                <svg
                  aria-hidden="true"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 512 512"
                  width="1em"
                >
                  <path
                    d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
              <button
                aria-expanded="true"
                aria-haspopup="listbox"
                aria-label="Options menu"
                aria-labelledby=" pf-toggle-id-10"
                class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                id="pf-toggle-id-10"
                type="button"
=======
              </TimesCircleIcon>
            </button>
            <button
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-label="Options menu"
              aria-labelledby=" typeahead-select-onchange"
              className="pf-c-button pf-c-select__toggle-button pf-m-plain"
              disabled={false}
              id="typeahead-select-onchange"
              onClick={[Function]}
              type="button"
            >
              <CaretDownIcon
                className="pf-c-select__toggle-arrow"
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
                title={null}
>>>>>>> upstream/master
              >
                <svg
                  aria-hidden="true"
                  class="pf-c-select__toggle-arrow"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  style="vertical-align: -0.125em;"
                  viewBox="0 0 320 512"
                  width="1em"
                >
                  <path
                    d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    transform=""
                  />
                </svg>
<<<<<<< HEAD
              </button>
            </div>
            <ul
              class="pf-c-select__menu"
              role="listbox"
=======
              </CaretDownIcon>
            </button>
          </div>
        </SelectToggle>
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          hasInlineFilter={false}
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          selected=""
          sendRef={[Function]}
        >
          <ul
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectOption
              className=""
              component="button"
              id="No results found-0"
              index={0}
              isChecked={false}
              isDisabled={true}
              isFocused={null}
              isNoResultsOption={true}
              isPlaceholder={false}
              isSelected={false}
              key=".$0"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              value="No results found"
>>>>>>> upstream/master
            >
              <li
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item pf-m-disabled"
                  id="No results found-0"
                  role="option"
                  type="button"
                >
                  No results found
                </button>
              </li>
            </ul>
          </div>,
        }
      }
      type="button"
      variant="typeahead"
    >
      <div
        className="pf-c-select__toggle pf-m-typeahead"
        onClick={[Function]}
        onKeyDown={[Function]}
      >
        <div
          className="pf-c-select__toggle-wrapper"
        >
          <input
            aria-activedescendant={null}
            aria-label=""
            autoComplete="off"
            className="pf-c-form-control pf-c-select__toggle-typeahead"
            disabled={false}
            id="pf-toggle-id-10-select-typeahead"
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            placeholder=""
            type="text"
            value="test"
          />
        </div>
        <button
          aria-label="Clear all"
          className="pf-c-button pf-m-plain pf-c-select__toggle-clear"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          <TimesCircleIcon
            aria-hidden={true}
          >
            <SVGIcon
              aria-hidden={true}
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "TimesCircleIcon",
                  "svgPath": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
                  "transform": "",
                  "width": 512,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 512 512"
                width="1em"
              >
                <path
                  d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </TimesCircleIcon>
        </button>
        <button
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-label="Options menu"
          aria-labelledby=" pf-toggle-id-10"
          className="pf-c-button pf-c-select__toggle-button pf-m-plain"
          disabled={false}
          id="pf-toggle-id-10"
          onClick={[Function]}
          type="button"
        >
          <CaretDownIcon
            className="pf-c-select__toggle-arrow"
          >
            <SVGIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              config={
                Object {
                  "height": 512,
                  "name": "CaretDownIcon",
                  "svgPath": "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
                  "transform": "",
                  "width": 320,
                  "xOffset": 0,
                  "yOffset": 0,
                }
              }
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                  transform=""
                />
              </svg>
            </SVGIcon>
          </CaretDownIcon>
        </button>
      </div>
    </SelectToggle>
    <SelectMenu
      aria-label=""
      aria-labelledby=""
      className=""
      hasInlineFilter={false}
      isCustomContent={false}
      isExpanded={false}
      isGrouped={false}
      keyHandler={[Function]}
      maxHeight=""
      openedOnEnter={false}
      selected=""
      sendRef={[Function]}
    >
      <ul
        className="pf-c-select__menu"
        role="listbox"
      >
        <SelectOption
          className=""
          component="button"
          id="No results found-0"
          index={0}
          isChecked={false}
          isDisabled={true}
          isFocused={null}
          isNoResultsOption={true}
          isPlaceholder={false}
          isSelected={false}
          key=".$0"
          keyHandler={[Function]}
          onClick={[Function]}
          sendRef={[Function]}
          value="No results found"
        >
          <li
            role="presentation"
          >
            <button
              aria-selected={null}
              className="pf-c-select__menu-item pf-m-disabled"
              id="No results found-0"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="option"
              type="button"
            >
              No results found
            </button>
          </li>
        </SelectOption>
      </ul>
    </SelectMenu>
  </div>
</Select>
`;
