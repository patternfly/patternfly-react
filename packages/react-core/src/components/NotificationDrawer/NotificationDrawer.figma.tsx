import React from 'react';
import { NotificationDrawer } from './NotificationDrawer';
import figma from '@figma/code-connect';

/**
 * -- This file was auto-generated by Code Connect --
 * `props` includes a mapping from Figma properties and variants to
 * suggested values. You should update this to match the props of your
 * code component, and update the `example` function to return the
 * code example you'd like to see in Figma
 */

figma.connect(
  NotificationDrawer,
  'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=7172-99015',
  {
    props: {
      type: figma.enum('Type', {
        Basic: 'basic',
        Grouped: 'grouped'
      })
    },
    example: (props) => <NotificationDrawer />
  }
);

figma.connect(
  NotificationDrawer,
  'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=3172-18190',
  {
    props: {
      hasCount: figma.boolean('Has count'),
      groupTitle: figma.string('Group title'),
      type: figma.enum('Type', {
        Collapsed: 'collapsed',
        Expanded: 'expanded'
      })
    },
    example: (props) => <NotificationDrawer />
  }
);

figma.connect(
  NotificationDrawer,
  'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=3170-17841',
  {
    props: {
      showUnreadCount: figma.boolean('Show unread count'),
      unreadCount: figma.string('Unread count'),
      headingText: figma.string('Heading text'),
      hasActionsMenu: figma.boolean('Has actions menu')
    },
    example: (props) => <NotificationDrawer />
  }
);

figma.connect(
  NotificationDrawer,
  'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=3164-16861',
  {
    props: {
      status: figma.enum('Status', {
        Danger: 'danger',
        Info: 'info',
        Success: 'success',
        Warning: 'warning'
      }),
      type: figma.enum('Type', {
        Unread: 'unread',
        Read: 'read'
      }),
      state: figma.enum('State', {
        Default: 'default',
        Hover: 'hover'
      }),
      topActionType: figma.enum('Top Action Type', {
        'Icon button': 'icon-button',
        'Link button': 'link-button'
      })
    },
    example: (props) => <NotificationDrawer />
  }
);
