/**
 * Enhanced Icon Connector Script
 * Generates Figma connections for PatternFly React icons
 */
import fs from 'fs/promises';
import path from 'path';
import getIconConfig from '../utils/config.mjs';
import {
  extractIconNames,
  loadIconData,
  findIconByName,
  generateConnectStatement,
  generateSummary
} from '../utils/iconUtils.mjs';

// Get the configuration
const config = getIconConfig();
const { logger } = config;

/**
 * Generate Figma connections for icons with enhanced error handling and performance tracking
 */
async function generateIconConnections() {
  // Track performance and statistics
  const stats = {
    startTime: Date.now(),
    endTime: 0,
    totalIcons: 0,
    newIcons: 0,
    updatedIcons: 0,
    errors: 0
  };

  try {
    logger.info('Starting icon connection generation', {
      source: 'IconConnector',
      context: {
        configPath: config.iconsDataPath,
        outputPath: path.resolve(config.iconsFigmaDir, config.figmaOutputFile)
      }
    });

    // Read the existing icons data
    const iconsData = await loadIconData(config.iconsDataPath, config, logger);

    // Resolve the output file path
    const connectionFilePath = path.resolve(config.iconsFigmaDir, config.figmaOutputFile);
    logger.debug(`Output file path: ${connectionFilePath}`, { source: 'IconConnector' });

    // Create output directory if it doesn't exist
    const outputDir = path.dirname(connectionFilePath);
    await fs.mkdir(outputDir, { recursive: true });

    // Default content for new files
    const defaultContent = `import React from "react";
import {
  AddCircleOIcon, AngleDoubleLeftIcon, AngleDoubleRightIcon, AngleDownIcon
} from "./generated";
import figma from "@figma/code-connect";

/**
 * -- This file was auto-generated by the figmaConnector script --
 * This file connects icon components to their corresponding Figma components.
 */
`;

    // Read the current icon connection file
    let existingContent;
    try {
      existingContent = await fs.readFile(connectionFilePath, 'utf8');
      logger.debug('Read existing connection file', { source: 'IconConnector' });
    } catch (error) {
      logger.info('No existing connection file, using default template', {
        source: 'IconConnector'
      });
      existingContent = defaultContent;
    }

    // Extract unique icon names
    const uniqueIconNames = extractIconNames(existingContent, logger);
    stats.totalIcons = uniqueIconNames.length;

    if (uniqueIconNames.length === 0) {
      logger.warn('No icon names found in existing file, using defaults', {
        source: 'IconConnector'
      });
      uniqueIconNames.push('AddCircleOIcon', 'AngleDoubleLeftIcon');
      stats.totalIcons = uniqueIconNames.length;
    }

    logger.info(`Found ${uniqueIconNames.length} unique icon names`, {
      source: 'IconConnector'
    });

    // Generate import statement
    const importStatement = `import {
  ${uniqueIconNames.join(', ')}
} from "./generated";`;

    // Create connections for each icon
    const iconConnections = [];

    for (const iconName of uniqueIconNames) {
      try {
        // Find matching icon configuration
        const iconConfig = findIconByName(iconName, iconsData);

        // Use URL from icon data or fallback to default
        let url;
        if (iconConfig?.url) {
          url = iconConfig.url;
          stats.updatedIcons++;
        } else {
          url = `${config.figmaBaseUrl}?node-id=${config.defaultNodeId}&m=dev`;
          stats.newIcons++;
          logger.debug(`No URL found for ${iconName}, using default`, { source: 'IconConnector' });
        }

        // Generate connection statement
        const connectStatement = generateConnectStatement(iconName, url);
        iconConnections.push(connectStatement);
      } catch (error) {
        logger.error(`Error generating connection for ${iconName}`, error, {
          source: 'IconConnector'
        });
        stats.errors++;
      }
    }

    // Generate complete connection file content
    const connectionContent = `import React from "react";
${importStatement}
import figma from "@figma/code-connect";

/**
 * -- This file was auto-generated by the figmaConnector script --
 * This file connects icon components to their corresponding Figma components.
 * Generated on: ${new Date().toISOString()}
 */

${iconConnections.join('\n\n')}
`;

    // Write the file unless in dry-run mode
    if (!config.dryRun) {
      await fs.writeFile(connectionFilePath, connectionContent, 'utf8');
      logger.success(`Generated icon connections file at ${connectionFilePath}`, {
        source: 'IconConnector',
        context: {
          iconCount: uniqueIconNames.length
        }
      });
    } else {
      logger.info('Dry run: would have written icon connections file', {
        source: 'IconConnector',
        context: {
          path: connectionFilePath,
          iconCount: uniqueIconNames.length
        }
      });
    }

    // Calculate final statistics
    stats.endTime = Date.now();
    logger.info(generateSummary(stats), { source: 'IconConnector' });

    return true;
  } catch (error) {
    stats.endTime = Date.now();
    stats.errors++;

    logger.error('Error generating icon connections', error, {
      source: 'IconConnector'
    });

    logger.info(generateSummary(stats), { source: 'IconConnector' });
    return false;
  }
}

// Execute directly if run as a script
if (import.meta.url === `file://${process.argv[1]}`) {
  generateIconConnections()
    .then((success) => process.exit(success ? 0 : 1))
    .catch((error) => {
      logger.error('Unhandled error in icon generation', error, {
        source: 'IconConnector'
      });
      process.exit(1);
    });
}

export default generateIconConnections;