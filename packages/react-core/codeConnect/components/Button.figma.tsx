import React from 'react';
import { Button } from 'src/components/Button';
import figma from '@figma/code-connect';

/**
 * -- This file was auto-generated by Code Connect --
 * `props` includes a mapping from Figma properties and variants to
 * suggested values. You should update this to match the props of your
 * code component, and update the `example` function to return the
 * code example you'd like to see in Figma
 */

figma.connect(
  Button,
  'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=1259-678',
  {
    props: {
      iconLeft: figma.boolean('Icon left'),
      showCount: figma.boolean('Show Count'),
      iconRight: figma.boolean('Icon right'),
      text: figma.string('✏️ Text'),
      type: figma.enum('Type', {
        Primary: 'primary',
        Secondary: 'secondary',
        Tertiary: 'tertiary',
        Danger: 'danger',
        'Secondary Danger': 'secondary-danger',
        Warning: 'warning',
        Progress: 'progress',
        'Secondary Progress': 'secondary-progress'
      }),
      state: figma.enum('State', {
        Default: 'default',
        Hover: 'hover',
        Clicked: 'clicked',
        Disabled: 'disabled'
      }),
      size: figma.enum('Size', {
        Default: 'default',
        Small: 'small',
        Nest: 'nest'
      })
    },
    example: (props) => <Button>{props.text}</Button>
  }
);

// Icon button plain
figma.connect(
  Button,
  "https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=1259-736",
  {
    props: {
      state: figma.enum("State", {
        Default: "default",
        Hover: "hover",
        Clicked: "clicked",
        Disabled: "disabled",
      }),
      type: figma.enum("Type", {
        "Default (with padding)": "default--with-padding-",
        "No padding": "no-padding",
      }),
    },
    example: (props) => <Button>test</Button>,
  },
)

// figma.connect(
//   Button,
//   'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=1259-778',
//   {
//     props: {
//       text: figma.string('Text'),
//       variant: figma.enum('Type', {
//         Primary: 'primary',
//         Secondary: 'secondary',
//         Tertiary: 'tertiary',
//         Inline: 'link'
//       }),
//       isInline: figma.enum('Type', {
//         Inline: true
//       }),
//       icon: figma.children(['IconWrapper', 'Icon'])
//     },
//     example: ({ text, ...props }) => (
//       <Button {...props} size="lg">
//         {text}
//       </Button>
//     )
//   }
// );

// figma.connect(
//   Button,
//   'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=1259-736',
//   {
//     props: {
//       noPadding: figma.enum('Type', {
//         'No padding': true
//       }),
//       isDisabled: figma.enum('State', {
//         Disabled: true
//       }),
//       icon: figma.children(['IconWrapper', 'Icon'])
//     },
//     example: (props) => <Button variant="plain" aria-label="Action" {...props} />
//   }
// );

// figma.connect(
//   Button,
//   'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=1291-2153',
//   {
//     props: {
//       text: figma.string('Text'),
//       icon: figma.children(['IconWrapper', 'Icon']),
//       iconPosition: figma.enum('Type', {
//         'Inline link external': 'end'
//       }),
//       isDisabled: figma.enum('State', {
//         Disabled: true
//       })
//     },
//     example: ({ text, ...props }) => (
//       <Button variant="link" isInline {...props}>
//         {text}
//       </Button>
//     )
//   }
// );

// figma.connect(
//   Button,
//   'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=1259-745',
//   {
//     props: {
//       text: figma.string('✏️ Text'),
//       // text: figma.string('Text'),
//       iconPosition: figma.boolean('Icon right', {
//         true: 'end',
//         false: undefined
//       }),
//       icon: figma.children(['IconWrapper', 'Icon']),
//       isDanger: figma.enum('Type', {
//         Danger: true
//       }),
//       isLoading: figma.enum('Type', {
//         Progress: true
//       }),
//       spinnerAriaValueText: figma.enum('Type', {
//         Progress: 'Loading'
//       }),
//       spinnerAriaLabel: figma.enum('Type', {
//         Progress: 'Content being loaded'
//       }),
//       isDisabled: figma.enum('State', {
//         Disabled: true
//       }),
//       size: figma.enum('Size', {
//         Small: 'sm'
//       }),
//       countOptions: figma.enum('Type', {
//         'Button with count': {
//           isRead: false,
//           count: 0,
//           className: 'custom-badge-unread'
//         }
//       })
//     },
//     example: ({ text, ...props }) => (
//       <Button variant="link" {...props}>
//         {text}
//       </Button>
//     )
//   }
// );

// figma.connect(
//   Button,
//   'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=5805-20130',
//   {
//     props: {
//       text: figma.string('Text ✏️'),
//       state: figma.enum('Type', {
//         Read: 'read',
//         Unread: 'unread',
//         'Unread - Needs attention': 'attention'
//       }),
//       icon: figma.children(['IconWrapper', 'Icon'])
//     },
//     example: ({ text, ...props }) => (
//       <Button variant="stateful" {...props}>
//         {text}
//       </Button>
//     )
//   }
// );

figma.connect(
  Button,
  'https://www.figma.com/design/VMEX8Xg2nzhBX8rfBx53jp/branch/H3LonYnwH26v9zNEa2SXFk/PatternFly-6%3A-Components?m=auto&node-id=1259-778',
  {
    props: {
      text: figma.string('Text'),
      variant: figma.enum('Type', {
        Primary: 'primary',
        Secondary: 'secondary',
        Tertiary: 'tertiary',
        Inline: 'link'
      }),
      isInline: figma.enum('Type', {
        Inline: true
      }),
      icon: figma.children(['IconWrapper', 'Icon'])
    },
    example: ({ text, ...props }) => (
      <Button {...props} size="lg">
        {text}
      </Button>
    )
  }
);
